
Power_meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08003058  08003058  00013058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003414  08003414  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003414  08003414  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003414  08003414  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003414  08003414  00013414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003418  08003418  00013418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800341c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  2000000c  08003428  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08003428  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000be22  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022c1  00000000  00000000  0002be9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc0  00000000  00000000  0002e160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000091e  00000000  00000000  0002ed20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017c50  00000000  00000000  0002f63e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000120f7  00000000  00000000  0004728e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008852f  00000000  00000000  00059385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002f00  00000000  00000000  000e18b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000e47b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003040 	.word	0x08003040

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003040 	.word	0x08003040

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	; (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	; (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	; (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	; (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	; (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f000 fc13 	bl	80009b4 <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f000 faa0 	bl	80006d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000198:	2301      	movs	r3, #1
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	; (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f000 fd6d 	bl	8000c88 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f000 fa90 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000028 	.word	0x20000028
 80001c4:	40012400 	.word	0x40012400

080001c8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001ce:	1d3b      	adds	r3, r7, #4
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80001d8:	4b18      	ldr	r3, [pc, #96]	; (800023c <MX_ADC2_Init+0x74>)
 80001da:	4a19      	ldr	r2, [pc, #100]	; (8000240 <MX_ADC2_Init+0x78>)
 80001dc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80001de:	4b17      	ldr	r3, [pc, #92]	; (800023c <MX_ADC2_Init+0x74>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80001e4:	4b15      	ldr	r3, [pc, #84]	; (800023c <MX_ADC2_Init+0x74>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80001ea:	4b14      	ldr	r3, [pc, #80]	; (800023c <MX_ADC2_Init+0x74>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80001f0:	4b12      	ldr	r3, [pc, #72]	; (800023c <MX_ADC2_Init+0x74>)
 80001f2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80001f6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001f8:	4b10      	ldr	r3, [pc, #64]	; (800023c <MX_ADC2_Init+0x74>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80001fe:	4b0f      	ldr	r3, [pc, #60]	; (800023c <MX_ADC2_Init+0x74>)
 8000200:	2201      	movs	r2, #1
 8000202:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000204:	480d      	ldr	r0, [pc, #52]	; (800023c <MX_ADC2_Init+0x74>)
 8000206:	f000 fbd5 	bl	80009b4 <HAL_ADC_Init>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000210:	f000 fa62 	bl	80006d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000214:	2308      	movs	r3, #8
 8000216:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000218:	2301      	movs	r3, #1
 800021a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800021c:	2300      	movs	r3, #0
 800021e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	4619      	mov	r1, r3
 8000224:	4805      	ldr	r0, [pc, #20]	; (800023c <MX_ADC2_Init+0x74>)
 8000226:	f000 fd2f 	bl	8000c88 <HAL_ADC_ConfigChannel>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000230:	f000 fa52 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000234:	bf00      	nop
 8000236:	3710      	adds	r7, #16
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	20000058 	.word	0x20000058
 8000240:	40012800 	.word	0x40012800

08000244 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b08a      	sub	sp, #40	; 0x28
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024c:	f107 0318 	add.w	r3, r7, #24
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4a28      	ldr	r2, [pc, #160]	; (8000300 <HAL_ADC_MspInit+0xbc>)
 8000260:	4293      	cmp	r3, r2
 8000262:	d122      	bne.n	80002aa <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000264:	4b27      	ldr	r3, [pc, #156]	; (8000304 <HAL_ADC_MspInit+0xc0>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a26      	ldr	r2, [pc, #152]	; (8000304 <HAL_ADC_MspInit+0xc0>)
 800026a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b24      	ldr	r3, [pc, #144]	; (8000304 <HAL_ADC_MspInit+0xc0>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000278:	617b      	str	r3, [r7, #20]
 800027a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800027c:	4b21      	ldr	r3, [pc, #132]	; (8000304 <HAL_ADC_MspInit+0xc0>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a20      	ldr	r2, [pc, #128]	; (8000304 <HAL_ADC_MspInit+0xc0>)
 8000282:	f043 0304 	orr.w	r3, r3, #4
 8000286:	6193      	str	r3, [r2, #24]
 8000288:	4b1e      	ldr	r3, [pc, #120]	; (8000304 <HAL_ADC_MspInit+0xc0>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f003 0304 	and.w	r3, r3, #4
 8000290:	613b      	str	r3, [r7, #16]
 8000292:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000294:	2306      	movs	r3, #6
 8000296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000298:	2303      	movs	r3, #3
 800029a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800029c:	f107 0318 	add.w	r3, r7, #24
 80002a0:	4619      	mov	r1, r3
 80002a2:	4819      	ldr	r0, [pc, #100]	; (8000308 <HAL_ADC_MspInit+0xc4>)
 80002a4:	f001 fa16 	bl	80016d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80002a8:	e026      	b.n	80002f8 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a17      	ldr	r2, [pc, #92]	; (800030c <HAL_ADC_MspInit+0xc8>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d121      	bne.n	80002f8 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80002b4:	4b13      	ldr	r3, [pc, #76]	; (8000304 <HAL_ADC_MspInit+0xc0>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a12      	ldr	r2, [pc, #72]	; (8000304 <HAL_ADC_MspInit+0xc0>)
 80002ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002be:	6193      	str	r3, [r2, #24]
 80002c0:	4b10      	ldr	r3, [pc, #64]	; (8000304 <HAL_ADC_MspInit+0xc0>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002cc:	4b0d      	ldr	r3, [pc, #52]	; (8000304 <HAL_ADC_MspInit+0xc0>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a0c      	ldr	r2, [pc, #48]	; (8000304 <HAL_ADC_MspInit+0xc0>)
 80002d2:	f043 0308 	orr.w	r3, r3, #8
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b0a      	ldr	r3, [pc, #40]	; (8000304 <HAL_ADC_MspInit+0xc0>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0308 	and.w	r3, r3, #8
 80002e0:	60bb      	str	r3, [r7, #8]
 80002e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80002e4:	2303      	movs	r3, #3
 80002e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002e8:	2303      	movs	r3, #3
 80002ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ec:	f107 0318 	add.w	r3, r7, #24
 80002f0:	4619      	mov	r1, r3
 80002f2:	4807      	ldr	r0, [pc, #28]	; (8000310 <HAL_ADC_MspInit+0xcc>)
 80002f4:	f001 f9ee 	bl	80016d4 <HAL_GPIO_Init>
}
 80002f8:	bf00      	nop
 80002fa:	3728      	adds	r7, #40	; 0x28
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	40012400 	.word	0x40012400
 8000304:	40021000 	.word	0x40021000
 8000308:	40010800 	.word	0x40010800
 800030c:	40012800 	.word	0x40012800
 8000310:	40010c00 	.word	0x40010c00

08000314 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000318:	4b16      	ldr	r3, [pc, #88]	; (8000374 <MX_CAN_Init+0x60>)
 800031a:	4a17      	ldr	r2, [pc, #92]	; (8000378 <MX_CAN_Init+0x64>)
 800031c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800031e:	4b15      	ldr	r3, [pc, #84]	; (8000374 <MX_CAN_Init+0x60>)
 8000320:	2210      	movs	r2, #16
 8000322:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000324:	4b13      	ldr	r3, [pc, #76]	; (8000374 <MX_CAN_Init+0x60>)
 8000326:	2200      	movs	r2, #0
 8000328:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800032a:	4b12      	ldr	r3, [pc, #72]	; (8000374 <MX_CAN_Init+0x60>)
 800032c:	2200      	movs	r2, #0
 800032e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000330:	4b10      	ldr	r3, [pc, #64]	; (8000374 <MX_CAN_Init+0x60>)
 8000332:	2200      	movs	r2, #0
 8000334:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000336:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <MX_CAN_Init+0x60>)
 8000338:	2200      	movs	r2, #0
 800033a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800033c:	4b0d      	ldr	r3, [pc, #52]	; (8000374 <MX_CAN_Init+0x60>)
 800033e:	2200      	movs	r2, #0
 8000340:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000342:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <MX_CAN_Init+0x60>)
 8000344:	2200      	movs	r2, #0
 8000346:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000348:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <MX_CAN_Init+0x60>)
 800034a:	2200      	movs	r2, #0
 800034c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800034e:	4b09      	ldr	r3, [pc, #36]	; (8000374 <MX_CAN_Init+0x60>)
 8000350:	2200      	movs	r2, #0
 8000352:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000354:	4b07      	ldr	r3, [pc, #28]	; (8000374 <MX_CAN_Init+0x60>)
 8000356:	2200      	movs	r2, #0
 8000358:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800035a:	4b06      	ldr	r3, [pc, #24]	; (8000374 <MX_CAN_Init+0x60>)
 800035c:	2200      	movs	r2, #0
 800035e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000360:	4804      	ldr	r0, [pc, #16]	; (8000374 <MX_CAN_Init+0x60>)
 8000362:	f000 fe97 	bl	8001094 <HAL_CAN_Init>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800036c:	f000 f9b4 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000370:	bf00      	nop
 8000372:	bd80      	pop	{r7, pc}
 8000374:	20000088 	.word	0x20000088
 8000378:	40006400 	.word	0x40006400

0800037c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b088      	sub	sp, #32
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000384:	f107 0310 	add.w	r3, r7, #16
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	609a      	str	r2, [r3, #8]
 8000390:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a1c      	ldr	r2, [pc, #112]	; (8000408 <HAL_CAN_MspInit+0x8c>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d131      	bne.n	8000400 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800039c:	4b1b      	ldr	r3, [pc, #108]	; (800040c <HAL_CAN_MspInit+0x90>)
 800039e:	69db      	ldr	r3, [r3, #28]
 80003a0:	4a1a      	ldr	r2, [pc, #104]	; (800040c <HAL_CAN_MspInit+0x90>)
 80003a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003a6:	61d3      	str	r3, [r2, #28]
 80003a8:	4b18      	ldr	r3, [pc, #96]	; (800040c <HAL_CAN_MspInit+0x90>)
 80003aa:	69db      	ldr	r3, [r3, #28]
 80003ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003b0:	60fb      	str	r3, [r7, #12]
 80003b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b4:	4b15      	ldr	r3, [pc, #84]	; (800040c <HAL_CAN_MspInit+0x90>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a14      	ldr	r2, [pc, #80]	; (800040c <HAL_CAN_MspInit+0x90>)
 80003ba:	f043 0304 	orr.w	r3, r3, #4
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b12      	ldr	r3, [pc, #72]	; (800040c <HAL_CAN_MspInit+0x90>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0304 	and.w	r3, r3, #4
 80003c8:	60bb      	str	r3, [r7, #8]
 80003ca:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80003cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80003d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003d2:	2300      	movs	r3, #0
 80003d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d6:	2300      	movs	r3, #0
 80003d8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003da:	f107 0310 	add.w	r3, r7, #16
 80003de:	4619      	mov	r1, r3
 80003e0:	480b      	ldr	r0, [pc, #44]	; (8000410 <HAL_CAN_MspInit+0x94>)
 80003e2:	f001 f977 	bl	80016d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80003e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003ec:	2302      	movs	r3, #2
 80003ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003f0:	2303      	movs	r3, #3
 80003f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003f4:	f107 0310 	add.w	r3, r7, #16
 80003f8:	4619      	mov	r1, r3
 80003fa:	4805      	ldr	r0, [pc, #20]	; (8000410 <HAL_CAN_MspInit+0x94>)
 80003fc:	f001 f96a 	bl	80016d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000400:	bf00      	nop
 8000402:	3720      	adds	r7, #32
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	40006400 	.word	0x40006400
 800040c:	40021000 	.word	0x40021000
 8000410:	40010800 	.word	0x40010800

08000414 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b088      	sub	sp, #32
 8000418:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041a:	f107 0310 	add.w	r3, r7, #16
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000428:	4b3a      	ldr	r3, [pc, #232]	; (8000514 <MX_GPIO_Init+0x100>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a39      	ldr	r2, [pc, #228]	; (8000514 <MX_GPIO_Init+0x100>)
 800042e:	f043 0310 	orr.w	r3, r3, #16
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b37      	ldr	r3, [pc, #220]	; (8000514 <MX_GPIO_Init+0x100>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0310 	and.w	r3, r3, #16
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000440:	4b34      	ldr	r3, [pc, #208]	; (8000514 <MX_GPIO_Init+0x100>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a33      	ldr	r2, [pc, #204]	; (8000514 <MX_GPIO_Init+0x100>)
 8000446:	f043 0320 	orr.w	r3, r3, #32
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b31      	ldr	r3, [pc, #196]	; (8000514 <MX_GPIO_Init+0x100>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0320 	and.w	r3, r3, #32
 8000454:	60bb      	str	r3, [r7, #8]
 8000456:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000458:	4b2e      	ldr	r3, [pc, #184]	; (8000514 <MX_GPIO_Init+0x100>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a2d      	ldr	r2, [pc, #180]	; (8000514 <MX_GPIO_Init+0x100>)
 800045e:	f043 0304 	orr.w	r3, r3, #4
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b2b      	ldr	r3, [pc, #172]	; (8000514 <MX_GPIO_Init+0x100>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0304 	and.w	r3, r3, #4
 800046c:	607b      	str	r3, [r7, #4]
 800046e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000470:	4b28      	ldr	r3, [pc, #160]	; (8000514 <MX_GPIO_Init+0x100>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a27      	ldr	r2, [pc, #156]	; (8000514 <MX_GPIO_Init+0x100>)
 8000476:	f043 0308 	orr.w	r3, r3, #8
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b25      	ldr	r3, [pc, #148]	; (8000514 <MX_GPIO_Init+0x100>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0308 	and.w	r3, r3, #8
 8000484:	603b      	str	r3, [r7, #0]
 8000486:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800048e:	4822      	ldr	r0, [pc, #136]	; (8000518 <MX_GPIO_Init+0x104>)
 8000490:	f001 fb8e 	bl	8001bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000498:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049a:	2301      	movs	r3, #1
 800049c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049e:	2300      	movs	r3, #0
 80004a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a2:	2302      	movs	r3, #2
 80004a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004a6:	f107 0310 	add.w	r3, r7, #16
 80004aa:	4619      	mov	r1, r3
 80004ac:	481a      	ldr	r0, [pc, #104]	; (8000518 <MX_GPIO_Init+0x104>)
 80004ae:	f001 f911 	bl	80016d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80004b2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80004b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004b8:	2303      	movs	r3, #3
 80004ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004bc:	f107 0310 	add.w	r3, r7, #16
 80004c0:	4619      	mov	r1, r3
 80004c2:	4815      	ldr	r0, [pc, #84]	; (8000518 <MX_GPIO_Init+0x104>)
 80004c4:	f001 f906 	bl	80016d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80004c8:	2301      	movs	r3, #1
 80004ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	4619      	mov	r1, r3
 80004da:	4810      	ldr	r0, [pc, #64]	; (800051c <MX_GPIO_Init+0x108>)
 80004dc:	f001 f8fa 	bl	80016d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 PA6
                           PA7 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80004e0:	f248 13f8 	movw	r3, #33272	; 0x81f8
 80004e4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004e6:	2303      	movs	r3, #3
 80004e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ea:	f107 0310 	add.w	r3, r7, #16
 80004ee:	4619      	mov	r1, r3
 80004f0:	480a      	ldr	r0, [pc, #40]	; (800051c <MX_GPIO_Init+0x108>)
 80004f2:	f001 f8ef 	bl	80016d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB12
                           PB13 PB14 PB15 PB3
                           PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 80004f6:	f64f 733c 	movw	r3, #65340	; 0xff3c
 80004fa:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004fc:	2303      	movs	r3, #3
 80004fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000500:	f107 0310 	add.w	r3, r7, #16
 8000504:	4619      	mov	r1, r3
 8000506:	4806      	ldr	r0, [pc, #24]	; (8000520 <MX_GPIO_Init+0x10c>)
 8000508:	f001 f8e4 	bl	80016d4 <HAL_GPIO_Init>

}
 800050c:	bf00      	nop
 800050e:	3720      	adds	r7, #32
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40021000 	.word	0x40021000
 8000518:	40011000 	.word	0x40011000
 800051c:	40010800 	.word	0x40010800
 8000520:	40010c00 	.word	0x40010c00

08000524 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <MX_I2C1_Init+0x50>)
 800052a:	4a13      	ldr	r2, [pc, #76]	; (8000578 <MX_I2C1_Init+0x54>)
 800052c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800052e:	4b11      	ldr	r3, [pc, #68]	; (8000574 <MX_I2C1_Init+0x50>)
 8000530:	4a12      	ldr	r2, [pc, #72]	; (800057c <MX_I2C1_Init+0x58>)
 8000532:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <MX_I2C1_Init+0x50>)
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <MX_I2C1_Init+0x50>)
 800053c:	2200      	movs	r2, #0
 800053e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <MX_I2C1_Init+0x50>)
 8000542:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000546:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000548:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <MX_I2C1_Init+0x50>)
 800054a:	2200      	movs	r2, #0
 800054c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_I2C1_Init+0x50>)
 8000550:	2200      	movs	r2, #0
 8000552:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <MX_I2C1_Init+0x50>)
 8000556:	2200      	movs	r2, #0
 8000558:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <MX_I2C1_Init+0x50>)
 800055c:	2200      	movs	r2, #0
 800055e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <MX_I2C1_Init+0x50>)
 8000562:	f001 fb57 	bl	8001c14 <HAL_I2C_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800056c:	f000 f8b4 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	200000b0 	.word	0x200000b0
 8000578:	40005400 	.word	0x40005400
 800057c:	000186a0 	.word	0x000186a0

08000580 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000588:	f107 0310 	add.w	r3, r7, #16
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a15      	ldr	r2, [pc, #84]	; (80005f0 <HAL_I2C_MspInit+0x70>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d123      	bne.n	80005e8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <HAL_I2C_MspInit+0x74>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a13      	ldr	r2, [pc, #76]	; (80005f4 <HAL_I2C_MspInit+0x74>)
 80005a6:	f043 0308 	orr.w	r3, r3, #8
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <HAL_I2C_MspInit+0x74>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0308 	and.w	r3, r3, #8
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005b8:	23c0      	movs	r3, #192	; 0xc0
 80005ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005bc:	2312      	movs	r3, #18
 80005be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c0:	2303      	movs	r3, #3
 80005c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c4:	f107 0310 	add.w	r3, r7, #16
 80005c8:	4619      	mov	r1, r3
 80005ca:	480b      	ldr	r0, [pc, #44]	; (80005f8 <HAL_I2C_MspInit+0x78>)
 80005cc:	f001 f882 	bl	80016d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <HAL_I2C_MspInit+0x74>)
 80005d2:	69db      	ldr	r3, [r3, #28]
 80005d4:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <HAL_I2C_MspInit+0x74>)
 80005d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005da:	61d3      	str	r3, [r2, #28]
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <HAL_I2C_MspInit+0x74>)
 80005de:	69db      	ldr	r3, [r3, #28]
 80005e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80005e8:	bf00      	nop
 80005ea:	3720      	adds	r7, #32
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40005400 	.word	0x40005400
 80005f4:	40021000 	.word	0x40021000
 80005f8:	40010c00 	.word	0x40010c00

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f000 f976 	bl	80008f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f80d 	bl	8000622 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f7ff ff04 	bl	8000414 <MX_GPIO_Init>
  MX_ADC1_Init();
 800060c:	f7ff fd9e 	bl	800014c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000610:	f7ff fdda 	bl	80001c8 <MX_ADC2_Init>
  MX_CAN_Init();
 8000614:	f7ff fe7e 	bl	8000314 <MX_CAN_Init>
  MX_I2C1_Init();
 8000618:	f7ff ff84 	bl	8000524 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800061c:	f000 f8cc 	bl	80007b8 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000620:	e7fe      	b.n	8000620 <main+0x24>

08000622 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	b094      	sub	sp, #80	; 0x50
 8000626:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000628:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800062c:	2228      	movs	r2, #40	; 0x28
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f002 fcd9 	bl	8002fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000652:	2301      	movs	r3, #1
 8000654:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000656:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000664:	2302      	movs	r3, #2
 8000666:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800066e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000672:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000678:	4618      	mov	r0, r3
 800067a:	f001 fc8f 	bl	8001f9c <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000684:	f000 f828 	bl	80006d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2302      	movs	r3, #2
 800068e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000698:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	2102      	movs	r1, #2
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 ffe7 	bl	8002678 <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006b0:	f000 f812 	bl	80006d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006b4:	2302      	movs	r3, #2
 80006b6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80006b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006bc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 fa0d 	bl	8002ae0 <HAL_RCCEx_PeriphCLKConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006cc:	f000 f804 	bl	80006d8 <Error_Handler>
  }
}
 80006d0:	bf00      	nop
 80006d2:	3750      	adds	r7, #80	; 0x50
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006dc:	b672      	cpsid	i
}
 80006de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <Error_Handler+0x8>

080006e2 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80006e2:	b480      	push	{r7}
 80006e4:	b083      	sub	sp, #12
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
 80006ea:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
	...

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <HAL_MspInit+0x5c>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	4a14      	ldr	r2, [pc, #80]	; (8000754 <HAL_MspInit+0x5c>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6193      	str	r3, [r2, #24]
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <HAL_MspInit+0x5c>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <HAL_MspInit+0x5c>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	4a0e      	ldr	r2, [pc, #56]	; (8000754 <HAL_MspInit+0x5c>)
 800071c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000720:	61d3      	str	r3, [r2, #28]
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <HAL_MspInit+0x5c>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800072e:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <HAL_MspInit+0x60>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <HAL_MspInit+0x60>)
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074a:	bf00      	nop
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	40021000 	.word	0x40021000
 8000758:	40010000 	.word	0x40010000

0800075c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000760:	e7fe      	b.n	8000760 <NMI_Handler+0x4>

08000762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000766:	e7fe      	b.n	8000766 <HardFault_Handler+0x4>

08000768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800076c:	e7fe      	b.n	800076c <MemManage_Handler+0x4>

0800076e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000772:	e7fe      	b.n	8000772 <BusFault_Handler+0x4>

08000774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <UsageFault_Handler+0x4>

0800077a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr

08000786 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr

08000792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr

0800079e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a2:	f000 f8eb 	bl	800097c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}

080007aa <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
	...

080007b8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_USART1_UART_Init+0x4c>)
 80007be:	4a12      	ldr	r2, [pc, #72]	; (8000808 <MX_USART1_UART_Init+0x50>)
 80007c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_USART1_UART_Init+0x4c>)
 80007c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_USART1_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_USART1_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_USART1_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_USART1_UART_Init+0x4c>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_USART1_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_USART1_UART_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_USART1_UART_Init+0x4c>)
 80007f0:	f002 fa80 	bl	8002cf4 <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007fa:	f7ff ff6d 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000104 	.word	0x20000104
 8000808:	40013800 	.word	0x40013800

0800080c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a1c      	ldr	r2, [pc, #112]	; (8000898 <HAL_UART_MspInit+0x8c>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d131      	bne.n	8000890 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <HAL_UART_MspInit+0x90>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a1a      	ldr	r2, [pc, #104]	; (800089c <HAL_UART_MspInit+0x90>)
 8000832:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <HAL_UART_MspInit+0x90>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000844:	4b15      	ldr	r3, [pc, #84]	; (800089c <HAL_UART_MspInit+0x90>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a14      	ldr	r2, [pc, #80]	; (800089c <HAL_UART_MspInit+0x90>)
 800084a:	f043 0304 	orr.w	r3, r3, #4
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <HAL_UART_MspInit+0x90>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f003 0304 	and.w	r3, r3, #4
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800085c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000860:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000866:	2303      	movs	r3, #3
 8000868:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	f107 0310 	add.w	r3, r7, #16
 800086e:	4619      	mov	r1, r3
 8000870:	480b      	ldr	r0, [pc, #44]	; (80008a0 <HAL_UART_MspInit+0x94>)
 8000872:	f000 ff2f 	bl	80016d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800087a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	4619      	mov	r1, r3
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <HAL_UART_MspInit+0x94>)
 800088c:	f000 ff22 	bl	80016d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000890:	bf00      	nop
 8000892:	3720      	adds	r7, #32
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40013800 	.word	0x40013800
 800089c:	40021000 	.word	0x40021000
 80008a0:	40010800 	.word	0x40010800

080008a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008a4:	f7ff ff81 	bl	80007aa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a8:	480b      	ldr	r0, [pc, #44]	; (80008d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008aa:	490c      	ldr	r1, [pc, #48]	; (80008dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008ac:	4a0c      	ldr	r2, [pc, #48]	; (80008e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b0:	e002      	b.n	80008b8 <LoopCopyDataInit>

080008b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b6:	3304      	adds	r3, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008bc:	d3f9      	bcc.n	80008b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008be:	4a09      	ldr	r2, [pc, #36]	; (80008e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008c0:	4c09      	ldr	r4, [pc, #36]	; (80008e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c4:	e001      	b.n	80008ca <LoopFillZerobss>

080008c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c8:	3204      	adds	r2, #4

080008ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008cc:	d3fb      	bcc.n	80008c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ce:	f002 fb93 	bl	8002ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008d2:	f7ff fe93 	bl	80005fc <main>
  bx lr
 80008d6:	4770      	bx	lr
  ldr r0, =_sdata
 80008d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008e0:	0800341c 	.word	0x0800341c
  ldr r2, =_sbss
 80008e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008e8:	20000150 	.word	0x20000150

080008ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008ec:	e7fe      	b.n	80008ec <ADC1_2_IRQHandler>
	...

080008f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <HAL_Init+0x28>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a07      	ldr	r2, [pc, #28]	; (8000918 <HAL_Init+0x28>)
 80008fa:	f043 0310 	orr.w	r3, r3, #16
 80008fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000900:	2003      	movs	r0, #3
 8000902:	f000 fe8f 	bl	8001624 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000906:	200f      	movs	r0, #15
 8000908:	f000 f808 	bl	800091c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800090c:	f7ff fef4 	bl	80006f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40022000 	.word	0x40022000

0800091c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <HAL_InitTick+0x54>)
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <HAL_InitTick+0x58>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4619      	mov	r1, r3
 800092e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000932:	fbb3 f3f1 	udiv	r3, r3, r1
 8000936:	fbb2 f3f3 	udiv	r3, r2, r3
 800093a:	4618      	mov	r0, r3
 800093c:	f000 febe 	bl	80016bc <HAL_SYSTICK_Config>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
 8000948:	e00e      	b.n	8000968 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b0f      	cmp	r3, #15
 800094e:	d80a      	bhi.n	8000966 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000950:	2200      	movs	r2, #0
 8000952:	6879      	ldr	r1, [r7, #4]
 8000954:	f04f 30ff 	mov.w	r0, #4294967295
 8000958:	f000 fe84 	bl	8001664 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800095c:	4a06      	ldr	r2, [pc, #24]	; (8000978 <HAL_InitTick+0x5c>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000962:	2300      	movs	r3, #0
 8000964:	e000      	b.n	8000968 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
}
 8000968:	4618      	mov	r0, r3
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000000 	.word	0x20000000
 8000974:	20000008 	.word	0x20000008
 8000978:	20000004 	.word	0x20000004

0800097c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <HAL_IncTick+0x1c>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	4b05      	ldr	r3, [pc, #20]	; (800099c <HAL_IncTick+0x20>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4413      	add	r3, r2
 800098c:	4a03      	ldr	r2, [pc, #12]	; (800099c <HAL_IncTick+0x20>)
 800098e:	6013      	str	r3, [r2, #0]
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	20000008 	.word	0x20000008
 800099c:	2000014c 	.word	0x2000014c

080009a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return uwTick;
 80009a4:	4b02      	ldr	r3, [pc, #8]	; (80009b0 <HAL_GetTick+0x10>)
 80009a6:	681b      	ldr	r3, [r3, #0]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	2000014c 	.word	0x2000014c

080009b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009bc:	2300      	movs	r3, #0
 80009be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009c0:	2300      	movs	r3, #0
 80009c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d101      	bne.n	80009d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e154      	b.n	8000c80 <HAL_ADC_Init+0x2cc>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a97      	ldr	r2, [pc, #604]	; (8000c38 <HAL_ADC_Init+0x284>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d009      	beq.n	80009f4 <HAL_ADC_Init+0x40>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a95      	ldr	r2, [pc, #596]	; (8000c3c <HAL_ADC_Init+0x288>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d004      	beq.n	80009f4 <HAL_ADC_Init+0x40>
 80009ea:	f240 11a9 	movw	r1, #425	; 0x1a9
 80009ee:	4894      	ldr	r0, [pc, #592]	; (8000c40 <HAL_ADC_Init+0x28c>)
 80009f0:	f7ff fe77 	bl	80006e2 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d009      	beq.n	8000a10 <HAL_ADC_Init+0x5c>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a04:	d004      	beq.n	8000a10 <HAL_ADC_Init+0x5c>
 8000a06:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000a0a:	488d      	ldr	r0, [pc, #564]	; (8000c40 <HAL_ADC_Init+0x28c>)
 8000a0c:	f7ff fe69 	bl	80006e2 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d009      	beq.n	8000a2c <HAL_ADC_Init+0x78>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a20:	d004      	beq.n	8000a2c <HAL_ADC_Init+0x78>
 8000a22:	f240 11ab 	movw	r1, #427	; 0x1ab
 8000a26:	4886      	ldr	r0, [pc, #536]	; (8000c40 <HAL_ADC_Init+0x28c>)
 8000a28:	f7ff fe5b 	bl	80006e2 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	7b1b      	ldrb	r3, [r3, #12]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d008      	beq.n	8000a46 <HAL_ADC_Init+0x92>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	7b1b      	ldrb	r3, [r3, #12]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d004      	beq.n	8000a46 <HAL_ADC_Init+0x92>
 8000a3c:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8000a40:	487f      	ldr	r0, [pc, #508]	; (8000c40 <HAL_ADC_Init+0x28c>)
 8000a42:	f7ff fe4e 	bl	80006e2 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d022      	beq.n	8000a94 <HAL_ADC_Init+0xe0>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000a56:	d01d      	beq.n	8000a94 <HAL_ADC_Init+0xe0>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	69db      	ldr	r3, [r3, #28]
 8000a5c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8000a60:	d018      	beq.n	8000a94 <HAL_ADC_Init+0xe0>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000a6a:	d013      	beq.n	8000a94 <HAL_ADC_Init+0xe0>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	69db      	ldr	r3, [r3, #28]
 8000a70:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8000a74:	d00e      	beq.n	8000a94 <HAL_ADC_Init+0xe0>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000a7e:	d009      	beq.n	8000a94 <HAL_ADC_Init+0xe0>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	69db      	ldr	r3, [r3, #28]
 8000a84:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000a88:	d004      	beq.n	8000a94 <HAL_ADC_Init+0xe0>
 8000a8a:	f240 11ad 	movw	r1, #429	; 0x1ad
 8000a8e:	486c      	ldr	r0, [pc, #432]	; (8000c40 <HAL_ADC_Init+0x28c>)
 8000a90:	f7ff fe27 	bl	80006e2 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d02a      	beq.n	8000af2 <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	691b      	ldr	r3, [r3, #16]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d003      	beq.n	8000aac <HAL_ADC_Init+0xf8>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	691b      	ldr	r3, [r3, #16]
 8000aa8:	2b10      	cmp	r3, #16
 8000aaa:	d904      	bls.n	8000ab6 <HAL_ADC_Init+0x102>
 8000aac:	f240 11b1 	movw	r1, #433	; 0x1b1
 8000ab0:	4863      	ldr	r0, [pc, #396]	; (8000c40 <HAL_ADC_Init+0x28c>)
 8000ab2:	f7ff fe16 	bl	80006e2 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	7d1b      	ldrb	r3, [r3, #20]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d008      	beq.n	8000ad0 <HAL_ADC_Init+0x11c>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	7d1b      	ldrb	r3, [r3, #20]
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d004      	beq.n	8000ad0 <HAL_ADC_Init+0x11c>
 8000ac6:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
 8000aca:	485d      	ldr	r0, [pc, #372]	; (8000c40 <HAL_ADC_Init+0x28c>)
 8000acc:	f7ff fe09 	bl	80006e2 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	7d1b      	ldrb	r3, [r3, #20]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d00c      	beq.n	8000af2 <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d003      	beq.n	8000ae8 <HAL_ADC_Init+0x134>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	2b08      	cmp	r3, #8
 8000ae6:	d904      	bls.n	8000af2 <HAL_ADC_Init+0x13e>
 8000ae8:	f240 11b5 	movw	r1, #437	; 0x1b5
 8000aec:	4854      	ldr	r0, [pc, #336]	; (8000c40 <HAL_ADC_Init+0x28c>)
 8000aee:	f7ff fdf8 	bl	80006e2 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d109      	bne.n	8000b0e <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2200      	movs	r2, #0
 8000afe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2200      	movs	r2, #0
 8000b04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff fb9b 	bl	8000244 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f000 fa7e 	bl	8001010 <ADC_ConversionStop_Disable>
 8000b14:	4603      	mov	r3, r0
 8000b16:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b1c:	f003 0310 	and.w	r3, r3, #16
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	f040 80a4 	bne.w	8000c6e <HAL_ADC_Init+0x2ba>
 8000b26:	7dfb      	ldrb	r3, [r7, #23]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	f040 80a0 	bne.w	8000c6e <HAL_ADC_Init+0x2ba>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b32:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b36:	f023 0302 	bic.w	r3, r3, #2
 8000b3a:	f043 0202 	orr.w	r2, r3, #2
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b4a:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	7b1b      	ldrb	r3, [r3, #12]
 8000b50:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b52:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b54:	68ba      	ldr	r2, [r7, #8]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b62:	d003      	beq.n	8000b6c <HAL_ADC_Init+0x1b8>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d102      	bne.n	8000b72 <HAL_ADC_Init+0x1be>
 8000b6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b70:	e000      	b.n	8000b74 <HAL_ADC_Init+0x1c0>
 8000b72:	2300      	movs	r3, #0
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	7d1b      	ldrb	r3, [r3, #20]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d119      	bne.n	8000bb6 <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	7b1b      	ldrb	r3, [r3, #12]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d109      	bne.n	8000b9e <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	035a      	lsls	r2, r3, #13
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	e00b      	b.n	8000bb6 <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba2:	f043 0220 	orr.w	r2, r3, #32
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bae:	f043 0201 	orr.w	r2, r3, #1
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	689a      	ldr	r2, [r3, #8]
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <HAL_ADC_Init+0x290>)
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	6812      	ldr	r2, [r2, #0]
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	430b      	orrs	r3, r1
 8000bdc:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000be6:	d003      	beq.n	8000bf0 <HAL_ADC_Init+0x23c>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d104      	bne.n	8000bfa <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	691b      	ldr	r3, [r3, #16]
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	051b      	lsls	r3, r3, #20
 8000bf8:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c00:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	68fa      	ldr	r2, [r7, #12]
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	689a      	ldr	r2, [r3, #8]
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_ADC_Init+0x294>)
 8000c16:	4013      	ands	r3, r2
 8000c18:	68ba      	ldr	r2, [r7, #8]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d116      	bne.n	8000c4c <HAL_ADC_Init+0x298>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2200      	movs	r2, #0
 8000c22:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c28:	f023 0303 	bic.w	r3, r3, #3
 8000c2c:	f043 0201 	orr.w	r2, r3, #1
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c34:	e023      	b.n	8000c7e <HAL_ADC_Init+0x2ca>
 8000c36:	bf00      	nop
 8000c38:	40012400 	.word	0x40012400
 8000c3c:	40012800 	.word	0x40012800
 8000c40:	08003058 	.word	0x08003058
 8000c44:	ffe1f7fd 	.word	0xffe1f7fd
 8000c48:	ff1f0efe 	.word	0xff1f0efe
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c50:	f023 0312 	bic.w	r3, r3, #18
 8000c54:	f043 0210 	orr.w	r2, r3, #16
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c60:	f043 0201 	orr.w	r2, r3, #1
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c6c:	e007      	b.n	8000c7e <HAL_ADC_Init+0x2ca>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c72:	f043 0210 	orr.w	r2, r3, #16
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c92:	2300      	movs	r3, #0
 8000c94:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c96:	2300      	movs	r3, #0
 8000c98:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a88      	ldr	r2, [pc, #544]	; (8000ec0 <HAL_ADC_ConfigChannel+0x238>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d009      	beq.n	8000cb8 <HAL_ADC_ConfigChannel+0x30>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a86      	ldr	r2, [pc, #536]	; (8000ec4 <HAL_ADC_ConfigChannel+0x23c>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d004      	beq.n	8000cb8 <HAL_ADC_ConfigChannel+0x30>
 8000cae:	f240 71d6 	movw	r1, #2006	; 0x7d6
 8000cb2:	4885      	ldr	r0, [pc, #532]	; (8000ec8 <HAL_ADC_ConfigChannel+0x240>)
 8000cb4:	f7ff fd15 	bl	80006e2 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d048      	beq.n	8000d52 <HAL_ADC_ConfigChannel+0xca>
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d044      	beq.n	8000d52 <HAL_ADC_ConfigChannel+0xca>
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d040      	beq.n	8000d52 <HAL_ADC_ConfigChannel+0xca>
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b03      	cmp	r3, #3
 8000cd6:	d03c      	beq.n	8000d52 <HAL_ADC_ConfigChannel+0xca>
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b04      	cmp	r3, #4
 8000cde:	d038      	beq.n	8000d52 <HAL_ADC_ConfigChannel+0xca>
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b05      	cmp	r3, #5
 8000ce6:	d034      	beq.n	8000d52 <HAL_ADC_ConfigChannel+0xca>
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b06      	cmp	r3, #6
 8000cee:	d030      	beq.n	8000d52 <HAL_ADC_ConfigChannel+0xca>
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b07      	cmp	r3, #7
 8000cf6:	d02c      	beq.n	8000d52 <HAL_ADC_ConfigChannel+0xca>
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b08      	cmp	r3, #8
 8000cfe:	d028      	beq.n	8000d52 <HAL_ADC_ConfigChannel+0xca>
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b09      	cmp	r3, #9
 8000d06:	d024      	beq.n	8000d52 <HAL_ADC_ConfigChannel+0xca>
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b0a      	cmp	r3, #10
 8000d0e:	d020      	beq.n	8000d52 <HAL_ADC_ConfigChannel+0xca>
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b0b      	cmp	r3, #11
 8000d16:	d01c      	beq.n	8000d52 <HAL_ADC_ConfigChannel+0xca>
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b0c      	cmp	r3, #12
 8000d1e:	d018      	beq.n	8000d52 <HAL_ADC_ConfigChannel+0xca>
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b0d      	cmp	r3, #13
 8000d26:	d014      	beq.n	8000d52 <HAL_ADC_ConfigChannel+0xca>
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b0e      	cmp	r3, #14
 8000d2e:	d010      	beq.n	8000d52 <HAL_ADC_ConfigChannel+0xca>
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b0f      	cmp	r3, #15
 8000d36:	d00c      	beq.n	8000d52 <HAL_ADC_ConfigChannel+0xca>
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b10      	cmp	r3, #16
 8000d3e:	d008      	beq.n	8000d52 <HAL_ADC_ConfigChannel+0xca>
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b11      	cmp	r3, #17
 8000d46:	d004      	beq.n	8000d52 <HAL_ADC_ConfigChannel+0xca>
 8000d48:	f240 71d7 	movw	r1, #2007	; 0x7d7
 8000d4c:	485e      	ldr	r0, [pc, #376]	; (8000ec8 <HAL_ADC_ConfigChannel+0x240>)
 8000d4e:	f7ff fcc8 	bl	80006e2 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d040      	beq.n	8000ddc <HAL_ADC_ConfigChannel+0x154>
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d03c      	beq.n	8000ddc <HAL_ADC_ConfigChannel+0x154>
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	d038      	beq.n	8000ddc <HAL_ADC_ConfigChannel+0x154>
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	d034      	beq.n	8000ddc <HAL_ADC_ConfigChannel+0x154>
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b05      	cmp	r3, #5
 8000d78:	d030      	beq.n	8000ddc <HAL_ADC_ConfigChannel+0x154>
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2b06      	cmp	r3, #6
 8000d80:	d02c      	beq.n	8000ddc <HAL_ADC_ConfigChannel+0x154>
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2b07      	cmp	r3, #7
 8000d88:	d028      	beq.n	8000ddc <HAL_ADC_ConfigChannel+0x154>
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	2b08      	cmp	r3, #8
 8000d90:	d024      	beq.n	8000ddc <HAL_ADC_ConfigChannel+0x154>
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2b09      	cmp	r3, #9
 8000d98:	d020      	beq.n	8000ddc <HAL_ADC_ConfigChannel+0x154>
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	2b0a      	cmp	r3, #10
 8000da0:	d01c      	beq.n	8000ddc <HAL_ADC_ConfigChannel+0x154>
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2b0b      	cmp	r3, #11
 8000da8:	d018      	beq.n	8000ddc <HAL_ADC_ConfigChannel+0x154>
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b0c      	cmp	r3, #12
 8000db0:	d014      	beq.n	8000ddc <HAL_ADC_ConfigChannel+0x154>
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2b0d      	cmp	r3, #13
 8000db8:	d010      	beq.n	8000ddc <HAL_ADC_ConfigChannel+0x154>
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b0e      	cmp	r3, #14
 8000dc0:	d00c      	beq.n	8000ddc <HAL_ADC_ConfigChannel+0x154>
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2b0f      	cmp	r3, #15
 8000dc8:	d008      	beq.n	8000ddc <HAL_ADC_ConfigChannel+0x154>
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2b10      	cmp	r3, #16
 8000dd0:	d004      	beq.n	8000ddc <HAL_ADC_ConfigChannel+0x154>
 8000dd2:	f44f 61fb 	mov.w	r1, #2008	; 0x7d8
 8000dd6:	483c      	ldr	r0, [pc, #240]	; (8000ec8 <HAL_ADC_ConfigChannel+0x240>)
 8000dd8:	f7ff fc83 	bl	80006e2 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d020      	beq.n	8000e26 <HAL_ADC_ConfigChannel+0x19e>
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d01c      	beq.n	8000e26 <HAL_ADC_ConfigChannel+0x19e>
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d018      	beq.n	8000e26 <HAL_ADC_ConfigChannel+0x19e>
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	2b03      	cmp	r3, #3
 8000dfa:	d014      	beq.n	8000e26 <HAL_ADC_ConfigChannel+0x19e>
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	2b04      	cmp	r3, #4
 8000e02:	d010      	beq.n	8000e26 <HAL_ADC_ConfigChannel+0x19e>
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	2b05      	cmp	r3, #5
 8000e0a:	d00c      	beq.n	8000e26 <HAL_ADC_ConfigChannel+0x19e>
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	2b06      	cmp	r3, #6
 8000e12:	d008      	beq.n	8000e26 <HAL_ADC_ConfigChannel+0x19e>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	2b07      	cmp	r3, #7
 8000e1a:	d004      	beq.n	8000e26 <HAL_ADC_ConfigChannel+0x19e>
 8000e1c:	f240 71d9 	movw	r1, #2009	; 0x7d9
 8000e20:	4829      	ldr	r0, [pc, #164]	; (8000ec8 <HAL_ADC_ConfigChannel+0x240>)
 8000e22:	f7ff fc5e 	bl	80006e2 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d101      	bne.n	8000e34 <HAL_ADC_ConfigChannel+0x1ac>
 8000e30:	2302      	movs	r3, #2
 8000e32:	e0e2      	b.n	8000ffa <HAL_ADC_ConfigChannel+0x372>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2201      	movs	r2, #1
 8000e38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2b06      	cmp	r3, #6
 8000e42:	d81c      	bhi.n	8000e7e <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	3b05      	subs	r3, #5
 8000e56:	221f      	movs	r2, #31
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	4019      	ands	r1, r3
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	6818      	ldr	r0, [r3, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685a      	ldr	r2, [r3, #4]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	4413      	add	r3, r2
 8000e6e:	3b05      	subs	r3, #5
 8000e70:	fa00 f203 	lsl.w	r2, r0, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e7c:	e042      	b.n	8000f04 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b0c      	cmp	r3, #12
 8000e84:	d822      	bhi.n	8000ecc <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685a      	ldr	r2, [r3, #4]
 8000e90:	4613      	mov	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	3b23      	subs	r3, #35	; 0x23
 8000e98:	221f      	movs	r2, #31
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	4019      	ands	r1, r3
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	6818      	ldr	r0, [r3, #0]
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	4413      	add	r3, r2
 8000eb0:	3b23      	subs	r3, #35	; 0x23
 8000eb2:	fa00 f203 	lsl.w	r2, r0, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	631a      	str	r2, [r3, #48]	; 0x30
 8000ebe:	e021      	b.n	8000f04 <HAL_ADC_ConfigChannel+0x27c>
 8000ec0:	40012400 	.word	0x40012400
 8000ec4:	40012800 	.word	0x40012800
 8000ec8:	08003058 	.word	0x08003058
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	4413      	add	r3, r2
 8000edc:	3b41      	subs	r3, #65	; 0x41
 8000ede:	221f      	movs	r2, #31
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	4019      	ands	r1, r3
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	6818      	ldr	r0, [r3, #0]
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	3b41      	subs	r3, #65	; 0x41
 8000ef8:	fa00 f203 	lsl.w	r2, r0, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	430a      	orrs	r2, r1
 8000f02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b09      	cmp	r3, #9
 8000f0a:	d91c      	bls.n	8000f46 <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	68d9      	ldr	r1, [r3, #12]
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	4613      	mov	r3, r2
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	4413      	add	r3, r2
 8000f1c:	3b1e      	subs	r3, #30
 8000f1e:	2207      	movs	r2, #7
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	4019      	ands	r1, r3
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	6898      	ldr	r0, [r3, #8]
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4613      	mov	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4413      	add	r3, r2
 8000f36:	3b1e      	subs	r3, #30
 8000f38:	fa00 f203 	lsl.w	r2, r0, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	430a      	orrs	r2, r1
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	e019      	b.n	8000f7a <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6919      	ldr	r1, [r3, #16]
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4613      	mov	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	4413      	add	r3, r2
 8000f56:	2207      	movs	r2, #7
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	4019      	ands	r1, r3
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	6898      	ldr	r0, [r3, #8]
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	4413      	add	r3, r2
 8000f6e:	fa00 f203 	lsl.w	r2, r0, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	430a      	orrs	r2, r1
 8000f78:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b10      	cmp	r3, #16
 8000f80:	d003      	beq.n	8000f8a <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f86:	2b11      	cmp	r3, #17
 8000f88:	d132      	bne.n	8000ff0 <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a1d      	ldr	r2, [pc, #116]	; (8001004 <HAL_ADC_ConfigChannel+0x37c>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d125      	bne.n	8000fe0 <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d126      	bne.n	8000ff0 <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000fb0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b10      	cmp	r3, #16
 8000fb8:	d11a      	bne.n	8000ff0 <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_ADC_ConfigChannel+0x380>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a13      	ldr	r2, [pc, #76]	; (800100c <HAL_ADC_ConfigChannel+0x384>)
 8000fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc4:	0c9a      	lsrs	r2, r3, #18
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fd0:	e002      	b.n	8000fd8 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1f9      	bne.n	8000fd2 <HAL_ADC_ConfigChannel+0x34a>
 8000fde:	e007      	b.n	8000ff0 <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe4:	f043 0220 	orr.w	r2, r3, #32
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40012400 	.word	0x40012400
 8001008:	20000000 	.word	0x20000000
 800100c:	431bde83 	.word	0x431bde83

08001010 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	2b01      	cmp	r3, #1
 8001028:	d12e      	bne.n	8001088 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f022 0201 	bic.w	r2, r2, #1
 8001038:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800103a:	f7ff fcb1 	bl	80009a0 <HAL_GetTick>
 800103e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001040:	e01b      	b.n	800107a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001042:	f7ff fcad 	bl	80009a0 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d914      	bls.n	800107a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	2b01      	cmp	r3, #1
 800105c:	d10d      	bne.n	800107a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001062:	f043 0210 	orr.w	r2, r3, #16
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106e:	f043 0201 	orr.w	r2, r3, #1
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e007      	b.n	800108a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	2b01      	cmp	r3, #1
 8001086:	d0dc      	beq.n	8001042 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e209      	b.n	80014ba <HAL_CAN_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a8f      	ldr	r2, [pc, #572]	; (80012e8 <HAL_CAN_Init+0x254>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d004      	beq.n	80010ba <HAL_CAN_Init+0x26>
 80010b0:	f240 111d 	movw	r1, #285	; 0x11d
 80010b4:	488d      	ldr	r0, [pc, #564]	; (80012ec <HAL_CAN_Init+0x258>)
 80010b6:	f7ff fb14 	bl	80006e2 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	7e1b      	ldrb	r3, [r3, #24]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d008      	beq.n	80010d4 <HAL_CAN_Init+0x40>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	7e1b      	ldrb	r3, [r3, #24]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d004      	beq.n	80010d4 <HAL_CAN_Init+0x40>
 80010ca:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80010ce:	4887      	ldr	r0, [pc, #540]	; (80012ec <HAL_CAN_Init+0x258>)
 80010d0:	f7ff fb07 	bl	80006e2 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	7e5b      	ldrb	r3, [r3, #25]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d008      	beq.n	80010ee <HAL_CAN_Init+0x5a>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	7e5b      	ldrb	r3, [r3, #25]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d004      	beq.n	80010ee <HAL_CAN_Init+0x5a>
 80010e4:	f240 111f 	movw	r1, #287	; 0x11f
 80010e8:	4880      	ldr	r0, [pc, #512]	; (80012ec <HAL_CAN_Init+0x258>)
 80010ea:	f7ff fafa 	bl	80006e2 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	7e9b      	ldrb	r3, [r3, #26]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d008      	beq.n	8001108 <HAL_CAN_Init+0x74>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	7e9b      	ldrb	r3, [r3, #26]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d004      	beq.n	8001108 <HAL_CAN_Init+0x74>
 80010fe:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001102:	487a      	ldr	r0, [pc, #488]	; (80012ec <HAL_CAN_Init+0x258>)
 8001104:	f7ff faed 	bl	80006e2 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	7edb      	ldrb	r3, [r3, #27]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d008      	beq.n	8001122 <HAL_CAN_Init+0x8e>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7edb      	ldrb	r3, [r3, #27]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d004      	beq.n	8001122 <HAL_CAN_Init+0x8e>
 8001118:	f240 1121 	movw	r1, #289	; 0x121
 800111c:	4873      	ldr	r0, [pc, #460]	; (80012ec <HAL_CAN_Init+0x258>)
 800111e:	f7ff fae0 	bl	80006e2 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	7f1b      	ldrb	r3, [r3, #28]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d008      	beq.n	800113c <HAL_CAN_Init+0xa8>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	7f1b      	ldrb	r3, [r3, #28]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d004      	beq.n	800113c <HAL_CAN_Init+0xa8>
 8001132:	f44f 7191 	mov.w	r1, #290	; 0x122
 8001136:	486d      	ldr	r0, [pc, #436]	; (80012ec <HAL_CAN_Init+0x258>)
 8001138:	f7ff fad3 	bl	80006e2 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	7f5b      	ldrb	r3, [r3, #29]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d008      	beq.n	8001156 <HAL_CAN_Init+0xc2>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	7f5b      	ldrb	r3, [r3, #29]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d004      	beq.n	8001156 <HAL_CAN_Init+0xc2>
 800114c:	f240 1123 	movw	r1, #291	; 0x123
 8001150:	4866      	ldr	r0, [pc, #408]	; (80012ec <HAL_CAN_Init+0x258>)
 8001152:	f7ff fac6 	bl	80006e2 <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d013      	beq.n	8001186 <HAL_CAN_Init+0xf2>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001166:	d00e      	beq.n	8001186 <HAL_CAN_Init+0xf2>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001170:	d009      	beq.n	8001186 <HAL_CAN_Init+0xf2>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800117a:	d004      	beq.n	8001186 <HAL_CAN_Init+0xf2>
 800117c:	f44f 7192 	mov.w	r1, #292	; 0x124
 8001180:	485a      	ldr	r0, [pc, #360]	; (80012ec <HAL_CAN_Init+0x258>)
 8001182:	f7ff faae 	bl	80006e2 <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d013      	beq.n	80011b6 <HAL_CAN_Init+0x122>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001196:	d00e      	beq.n	80011b6 <HAL_CAN_Init+0x122>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80011a0:	d009      	beq.n	80011b6 <HAL_CAN_Init+0x122>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80011aa:	d004      	beq.n	80011b6 <HAL_CAN_Init+0x122>
 80011ac:	f240 1125 	movw	r1, #293	; 0x125
 80011b0:	484e      	ldr	r0, [pc, #312]	; (80012ec <HAL_CAN_Init+0x258>)
 80011b2:	f7ff fa96 	bl	80006e2 <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d04f      	beq.n	800125e <HAL_CAN_Init+0x1ca>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c6:	d04a      	beq.n	800125e <HAL_CAN_Init+0x1ca>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011d0:	d045      	beq.n	800125e <HAL_CAN_Init+0x1ca>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80011da:	d040      	beq.n	800125e <HAL_CAN_Init+0x1ca>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80011e4:	d03b      	beq.n	800125e <HAL_CAN_Init+0x1ca>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ee:	d036      	beq.n	800125e <HAL_CAN_Init+0x1ca>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80011f8:	d031      	beq.n	800125e <HAL_CAN_Init+0x1ca>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8001202:	d02c      	beq.n	800125e <HAL_CAN_Init+0x1ca>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800120c:	d027      	beq.n	800125e <HAL_CAN_Init+0x1ca>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 8001216:	d022      	beq.n	800125e <HAL_CAN_Init+0x1ca>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	691b      	ldr	r3, [r3, #16]
 800121c:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8001220:	d01d      	beq.n	800125e <HAL_CAN_Init+0x1ca>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 800122a:	d018      	beq.n	800125e <HAL_CAN_Init+0x1ca>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001234:	d013      	beq.n	800125e <HAL_CAN_Init+0x1ca>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 800123e:	d00e      	beq.n	800125e <HAL_CAN_Init+0x1ca>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001248:	d009      	beq.n	800125e <HAL_CAN_Init+0x1ca>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8001252:	d004      	beq.n	800125e <HAL_CAN_Init+0x1ca>
 8001254:	f44f 7193 	mov.w	r1, #294	; 0x126
 8001258:	4824      	ldr	r0, [pc, #144]	; (80012ec <HAL_CAN_Init+0x258>)
 800125a:	f7ff fa42 	bl	80006e2 <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d027      	beq.n	80012b6 <HAL_CAN_Init+0x222>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800126e:	d022      	beq.n	80012b6 <HAL_CAN_Init+0x222>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001278:	d01d      	beq.n	80012b6 <HAL_CAN_Init+0x222>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001282:	d018      	beq.n	80012b6 <HAL_CAN_Init+0x222>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800128c:	d013      	beq.n	80012b6 <HAL_CAN_Init+0x222>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8001296:	d00e      	beq.n	80012b6 <HAL_CAN_Init+0x222>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80012a0:	d009      	beq.n	80012b6 <HAL_CAN_Init+0x222>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 80012aa:	d004      	beq.n	80012b6 <HAL_CAN_Init+0x222>
 80012ac:	f240 1127 	movw	r1, #295	; 0x127
 80012b0:	480e      	ldr	r0, [pc, #56]	; (80012ec <HAL_CAN_Init+0x258>)
 80012b2:	f7ff fa16 	bl	80006e2 <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d004      	beq.n	80012c8 <HAL_CAN_Init+0x234>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012c6:	d904      	bls.n	80012d2 <HAL_CAN_Init+0x23e>
 80012c8:	f44f 7194 	mov.w	r1, #296	; 0x128
 80012cc:	4807      	ldr	r0, [pc, #28]	; (80012ec <HAL_CAN_Init+0x258>)
 80012ce:	f7ff fa08 	bl	80006e2 <assert_failed>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d108      	bne.n	80012f0 <HAL_CAN_Init+0x25c>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff f84c 	bl	800037c <HAL_CAN_MspInit>
 80012e4:	e004      	b.n	80012f0 <HAL_CAN_Init+0x25c>
 80012e6:	bf00      	nop
 80012e8:	40006400 	.word	0x40006400
 80012ec:	080030c8 	.word	0x080030c8
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 0201 	orr.w	r2, r2, #1
 80012fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001300:	f7ff fb4e 	bl	80009a0 <HAL_GetTick>
 8001304:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001306:	e012      	b.n	800132e <HAL_CAN_Init+0x29a>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001308:	f7ff fb4a 	bl	80009a0 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b0a      	cmp	r3, #10
 8001314:	d90b      	bls.n	800132e <HAL_CAN_Init+0x29a>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2205      	movs	r2, #5
 8001326:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e0c5      	b.n	80014ba <HAL_CAN_Init+0x426>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0e5      	beq.n	8001308 <HAL_CAN_Init+0x274>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0202 	bic.w	r2, r2, #2
 800134a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800134c:	f7ff fb28 	bl	80009a0 <HAL_GetTick>
 8001350:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001352:	e012      	b.n	800137a <HAL_CAN_Init+0x2e6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001354:	f7ff fb24 	bl	80009a0 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b0a      	cmp	r3, #10
 8001360:	d90b      	bls.n	800137a <HAL_CAN_Init+0x2e6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001366:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2205      	movs	r2, #5
 8001372:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e09f      	b.n	80014ba <HAL_CAN_Init+0x426>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1e5      	bne.n	8001354 <HAL_CAN_Init+0x2c0>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	7e1b      	ldrb	r3, [r3, #24]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d108      	bne.n	80013a2 <HAL_CAN_Init+0x30e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	e007      	b.n	80013b2 <HAL_CAN_Init+0x31e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	7e5b      	ldrb	r3, [r3, #25]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d108      	bne.n	80013cc <HAL_CAN_Init+0x338>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	e007      	b.n	80013dc <HAL_CAN_Init+0x348>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7e9b      	ldrb	r3, [r3, #26]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d108      	bne.n	80013f6 <HAL_CAN_Init+0x362>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 0220 	orr.w	r2, r2, #32
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	e007      	b.n	8001406 <HAL_CAN_Init+0x372>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 0220 	bic.w	r2, r2, #32
 8001404:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	7edb      	ldrb	r3, [r3, #27]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d108      	bne.n	8001420 <HAL_CAN_Init+0x38c>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f022 0210 	bic.w	r2, r2, #16
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	e007      	b.n	8001430 <HAL_CAN_Init+0x39c>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 0210 	orr.w	r2, r2, #16
 800142e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	7f1b      	ldrb	r3, [r3, #28]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d108      	bne.n	800144a <HAL_CAN_Init+0x3b6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f042 0208 	orr.w	r2, r2, #8
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	e007      	b.n	800145a <HAL_CAN_Init+0x3c6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 0208 	bic.w	r2, r2, #8
 8001458:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	7f5b      	ldrb	r3, [r3, #29]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d108      	bne.n	8001474 <HAL_CAN_Init+0x3e0>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f042 0204 	orr.w	r2, r2, #4
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	e007      	b.n	8001484 <HAL_CAN_Init+0x3f0>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0204 	bic.w	r2, r2, #4
 8001482:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	431a      	orrs	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	431a      	orrs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	ea42 0103 	orr.w	r1, r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	1e5a      	subs	r2, r3, #1
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	430a      	orrs	r2, r1
 80014a8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop

080014c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e0:	4013      	ands	r3, r2
 80014e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f6:	4a04      	ldr	r2, [pc, #16]	; (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	60d3      	str	r3, [r2, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <__NVIC_GetPriorityGrouping+0x18>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	0a1b      	lsrs	r3, r3, #8
 8001516:	f003 0307 	and.w	r3, r3, #7
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	6039      	str	r1, [r7, #0]
 8001532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	2b00      	cmp	r3, #0
 800153a:	db0a      	blt.n	8001552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	b2da      	uxtb	r2, r3
 8001540:	490c      	ldr	r1, [pc, #48]	; (8001574 <__NVIC_SetPriority+0x4c>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	0112      	lsls	r2, r2, #4
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	440b      	add	r3, r1
 800154c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001550:	e00a      	b.n	8001568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4908      	ldr	r1, [pc, #32]	; (8001578 <__NVIC_SetPriority+0x50>)
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	3b04      	subs	r3, #4
 8001560:	0112      	lsls	r2, r2, #4
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	440b      	add	r3, r1
 8001566:	761a      	strb	r2, [r3, #24]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000e100 	.word	0xe000e100
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157c:	b480      	push	{r7}
 800157e:	b089      	sub	sp, #36	; 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f1c3 0307 	rsb	r3, r3, #7
 8001596:	2b04      	cmp	r3, #4
 8001598:	bf28      	it	cs
 800159a:	2304      	movcs	r3, #4
 800159c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3304      	adds	r3, #4
 80015a2:	2b06      	cmp	r3, #6
 80015a4:	d902      	bls.n	80015ac <NVIC_EncodePriority+0x30>
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3b03      	subs	r3, #3
 80015aa:	e000      	b.n	80015ae <NVIC_EncodePriority+0x32>
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	f04f 32ff 	mov.w	r2, #4294967295
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43da      	mvns	r2, r3
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	401a      	ands	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c4:	f04f 31ff 	mov.w	r1, #4294967295
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	43d9      	mvns	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	4313      	orrs	r3, r2
         );
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3724      	adds	r7, #36	; 0x24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr

080015e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f0:	d301      	bcc.n	80015f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00f      	b.n	8001616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f6:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <SysTick_Config+0x40>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fe:	210f      	movs	r1, #15
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	f7ff ff90 	bl	8001528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <SysTick_Config+0x40>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160e:	4b04      	ldr	r3, [pc, #16]	; (8001620 <SysTick_Config+0x40>)
 8001610:	2207      	movs	r2, #7
 8001612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	e000e010 	.word	0xe000e010

08001624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b07      	cmp	r3, #7
 8001630:	d00f      	beq.n	8001652 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b06      	cmp	r3, #6
 8001636:	d00c      	beq.n	8001652 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b05      	cmp	r3, #5
 800163c:	d009      	beq.n	8001652 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b04      	cmp	r3, #4
 8001642:	d006      	beq.n	8001652 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b03      	cmp	r3, #3
 8001648:	d003      	beq.n	8001652 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800164a:	2191      	movs	r1, #145	; 0x91
 800164c:	4804      	ldr	r0, [pc, #16]	; (8001660 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800164e:	f7ff f848 	bl	80006e2 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff ff36 	bl	80014c4 <__NVIC_SetPriorityGrouping>
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	08003138 	.word	0x08003138

08001664 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b0f      	cmp	r3, #15
 800167a:	d903      	bls.n	8001684 <HAL_NVIC_SetPriority+0x20>
 800167c:	21a9      	movs	r1, #169	; 0xa9
 800167e:	480e      	ldr	r0, [pc, #56]	; (80016b8 <HAL_NVIC_SetPriority+0x54>)
 8001680:	f7ff f82f 	bl	80006e2 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	2b0f      	cmp	r3, #15
 8001688:	d903      	bls.n	8001692 <HAL_NVIC_SetPriority+0x2e>
 800168a:	21aa      	movs	r1, #170	; 0xaa
 800168c:	480a      	ldr	r0, [pc, #40]	; (80016b8 <HAL_NVIC_SetPriority+0x54>)
 800168e:	f7ff f828 	bl	80006e2 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001692:	f7ff ff3b 	bl	800150c <__NVIC_GetPriorityGrouping>
 8001696:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	68b9      	ldr	r1, [r7, #8]
 800169c:	6978      	ldr	r0, [r7, #20]
 800169e:	f7ff ff6d 	bl	800157c <NVIC_EncodePriority>
 80016a2:	4602      	mov	r2, r0
 80016a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a8:	4611      	mov	r1, r2
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff ff3c 	bl	8001528 <__NVIC_SetPriority>
}
 80016b0:	bf00      	nop
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	08003138 	.word	0x08003138

080016bc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ff8b 	bl	80015e0 <SysTick_Config>
 80016ca:	4603      	mov	r3, r0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	; 0x28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a96      	ldr	r2, [pc, #600]	; (8001944 <HAL_GPIO_Init+0x270>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d013      	beq.n	8001716 <HAL_GPIO_Init+0x42>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a95      	ldr	r2, [pc, #596]	; (8001948 <HAL_GPIO_Init+0x274>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d00f      	beq.n	8001716 <HAL_GPIO_Init+0x42>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a94      	ldr	r2, [pc, #592]	; (800194c <HAL_GPIO_Init+0x278>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d00b      	beq.n	8001716 <HAL_GPIO_Init+0x42>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a93      	ldr	r2, [pc, #588]	; (8001950 <HAL_GPIO_Init+0x27c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d007      	beq.n	8001716 <HAL_GPIO_Init+0x42>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a92      	ldr	r2, [pc, #584]	; (8001954 <HAL_GPIO_Init+0x280>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x42>
 800170e:	21bd      	movs	r1, #189	; 0xbd
 8001710:	4891      	ldr	r0, [pc, #580]	; (8001958 <HAL_GPIO_Init+0x284>)
 8001712:	f7fe ffe6 	bl	80006e2 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	b29b      	uxth	r3, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <HAL_GPIO_Init+0x58>
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	0c1b      	lsrs	r3, r3, #16
 8001726:	041b      	lsls	r3, r3, #16
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <HAL_GPIO_Init+0x60>
 800172c:	21be      	movs	r1, #190	; 0xbe
 800172e:	488a      	ldr	r0, [pc, #552]	; (8001958 <HAL_GPIO_Init+0x284>)
 8001730:	f7fe ffd7 	bl	80006e2 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 821c 	beq.w	8001b76 <HAL_GPIO_Init+0x4a2>
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b01      	cmp	r3, #1
 8001744:	f000 8217 	beq.w	8001b76 <HAL_GPIO_Init+0x4a2>
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b11      	cmp	r3, #17
 800174e:	f000 8212 	beq.w	8001b76 <HAL_GPIO_Init+0x4a2>
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b02      	cmp	r3, #2
 8001758:	f000 820d 	beq.w	8001b76 <HAL_GPIO_Init+0x4a2>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b12      	cmp	r3, #18
 8001762:	f000 8208 	beq.w	8001b76 <HAL_GPIO_Init+0x4a2>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	4a7c      	ldr	r2, [pc, #496]	; (800195c <HAL_GPIO_Init+0x288>)
 800176c:	4293      	cmp	r3, r2
 800176e:	f000 8202 	beq.w	8001b76 <HAL_GPIO_Init+0x4a2>
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	4a7a      	ldr	r2, [pc, #488]	; (8001960 <HAL_GPIO_Init+0x28c>)
 8001778:	4293      	cmp	r3, r2
 800177a:	f000 81fc 	beq.w	8001b76 <HAL_GPIO_Init+0x4a2>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	4a78      	ldr	r2, [pc, #480]	; (8001964 <HAL_GPIO_Init+0x290>)
 8001784:	4293      	cmp	r3, r2
 8001786:	f000 81f6 	beq.w	8001b76 <HAL_GPIO_Init+0x4a2>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	4a76      	ldr	r2, [pc, #472]	; (8001968 <HAL_GPIO_Init+0x294>)
 8001790:	4293      	cmp	r3, r2
 8001792:	f000 81f0 	beq.w	8001b76 <HAL_GPIO_Init+0x4a2>
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	4a74      	ldr	r2, [pc, #464]	; (800196c <HAL_GPIO_Init+0x298>)
 800179c:	4293      	cmp	r3, r2
 800179e:	f000 81ea 	beq.w	8001b76 <HAL_GPIO_Init+0x4a2>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4a72      	ldr	r2, [pc, #456]	; (8001970 <HAL_GPIO_Init+0x29c>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	f000 81e4 	beq.w	8001b76 <HAL_GPIO_Init+0x4a2>
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	f000 81df 	beq.w	8001b76 <HAL_GPIO_Init+0x4a2>
 80017b8:	21bf      	movs	r1, #191	; 0xbf
 80017ba:	4867      	ldr	r0, [pc, #412]	; (8001958 <HAL_GPIO_Init+0x284>)
 80017bc:	f7fe ff91 	bl	80006e2 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c0:	e1d9      	b.n	8001b76 <HAL_GPIO_Init+0x4a2>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017c2:	2201      	movs	r2, #1
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	69fa      	ldr	r2, [r7, #28]
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	429a      	cmp	r2, r3
 80017dc:	f040 81c8 	bne.w	8001b70 <HAL_GPIO_Init+0x49c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a58      	ldr	r2, [pc, #352]	; (8001944 <HAL_GPIO_Init+0x270>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d013      	beq.n	8001810 <HAL_GPIO_Init+0x13c>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a57      	ldr	r2, [pc, #348]	; (8001948 <HAL_GPIO_Init+0x274>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d00f      	beq.n	8001810 <HAL_GPIO_Init+0x13c>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a56      	ldr	r2, [pc, #344]	; (800194c <HAL_GPIO_Init+0x278>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d00b      	beq.n	8001810 <HAL_GPIO_Init+0x13c>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a55      	ldr	r2, [pc, #340]	; (8001950 <HAL_GPIO_Init+0x27c>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d007      	beq.n	8001810 <HAL_GPIO_Init+0x13c>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a54      	ldr	r2, [pc, #336]	; (8001954 <HAL_GPIO_Init+0x280>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x13c>
 8001808:	21cd      	movs	r1, #205	; 0xcd
 800180a:	4853      	ldr	r0, [pc, #332]	; (8001958 <HAL_GPIO_Init+0x284>)
 800180c:	f7fe ff69 	bl	80006e2 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4a56      	ldr	r2, [pc, #344]	; (8001970 <HAL_GPIO_Init+0x29c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	f000 80c1 	beq.w	800199e <HAL_GPIO_Init+0x2ca>
 800181c:	4a54      	ldr	r2, [pc, #336]	; (8001970 <HAL_GPIO_Init+0x29c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	f200 80e7 	bhi.w	80019f2 <HAL_GPIO_Init+0x31e>
 8001824:	4a4f      	ldr	r2, [pc, #316]	; (8001964 <HAL_GPIO_Init+0x290>)
 8001826:	4293      	cmp	r3, r2
 8001828:	f000 80b9 	beq.w	800199e <HAL_GPIO_Init+0x2ca>
 800182c:	4a4d      	ldr	r2, [pc, #308]	; (8001964 <HAL_GPIO_Init+0x290>)
 800182e:	4293      	cmp	r3, r2
 8001830:	f200 80df 	bhi.w	80019f2 <HAL_GPIO_Init+0x31e>
 8001834:	4a4d      	ldr	r2, [pc, #308]	; (800196c <HAL_GPIO_Init+0x298>)
 8001836:	4293      	cmp	r3, r2
 8001838:	f000 80b1 	beq.w	800199e <HAL_GPIO_Init+0x2ca>
 800183c:	4a4b      	ldr	r2, [pc, #300]	; (800196c <HAL_GPIO_Init+0x298>)
 800183e:	4293      	cmp	r3, r2
 8001840:	f200 80d7 	bhi.w	80019f2 <HAL_GPIO_Init+0x31e>
 8001844:	4a46      	ldr	r2, [pc, #280]	; (8001960 <HAL_GPIO_Init+0x28c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	f000 80a9 	beq.w	800199e <HAL_GPIO_Init+0x2ca>
 800184c:	4a44      	ldr	r2, [pc, #272]	; (8001960 <HAL_GPIO_Init+0x28c>)
 800184e:	4293      	cmp	r3, r2
 8001850:	f200 80cf 	bhi.w	80019f2 <HAL_GPIO_Init+0x31e>
 8001854:	4a44      	ldr	r2, [pc, #272]	; (8001968 <HAL_GPIO_Init+0x294>)
 8001856:	4293      	cmp	r3, r2
 8001858:	f000 80a1 	beq.w	800199e <HAL_GPIO_Init+0x2ca>
 800185c:	4a42      	ldr	r2, [pc, #264]	; (8001968 <HAL_GPIO_Init+0x294>)
 800185e:	4293      	cmp	r3, r2
 8001860:	f200 80c7 	bhi.w	80019f2 <HAL_GPIO_Init+0x31e>
 8001864:	2b12      	cmp	r3, #18
 8001866:	d82b      	bhi.n	80018c0 <HAL_GPIO_Init+0x1ec>
 8001868:	2b12      	cmp	r3, #18
 800186a:	f200 80c2 	bhi.w	80019f2 <HAL_GPIO_Init+0x31e>
 800186e:	a201      	add	r2, pc, #4	; (adr r2, 8001874 <HAL_GPIO_Init+0x1a0>)
 8001870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001874:	0800199f 	.word	0x0800199f
 8001878:	080018c9 	.word	0x080018c9
 800187c:	0800191b 	.word	0x0800191b
 8001880:	080019ed 	.word	0x080019ed
 8001884:	080019f3 	.word	0x080019f3
 8001888:	080019f3 	.word	0x080019f3
 800188c:	080019f3 	.word	0x080019f3
 8001890:	080019f3 	.word	0x080019f3
 8001894:	080019f3 	.word	0x080019f3
 8001898:	080019f3 	.word	0x080019f3
 800189c:	080019f3 	.word	0x080019f3
 80018a0:	080019f3 	.word	0x080019f3
 80018a4:	080019f3 	.word	0x080019f3
 80018a8:	080019f3 	.word	0x080019f3
 80018ac:	080019f3 	.word	0x080019f3
 80018b0:	080019f3 	.word	0x080019f3
 80018b4:	080019f3 	.word	0x080019f3
 80018b8:	080018f1 	.word	0x080018f1
 80018bc:	08001975 	.word	0x08001975
 80018c0:	4a26      	ldr	r2, [pc, #152]	; (800195c <HAL_GPIO_Init+0x288>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d06b      	beq.n	800199e <HAL_GPIO_Init+0x2ca>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018c6:	e094      	b.n	80019f2 <HAL_GPIO_Init+0x31e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d00b      	beq.n	80018e8 <HAL_GPIO_Init+0x214>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d007      	beq.n	80018e8 <HAL_GPIO_Init+0x214>
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x214>
 80018e0:	21d5      	movs	r1, #213	; 0xd5
 80018e2:	481d      	ldr	r0, [pc, #116]	; (8001958 <HAL_GPIO_Init+0x284>)
 80018e4:	f7fe fefd 	bl	80006e2 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	623b      	str	r3, [r7, #32]
          break;
 80018ee:	e081      	b.n	80019f4 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d00b      	beq.n	8001910 <HAL_GPIO_Init+0x23c>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d007      	beq.n	8001910 <HAL_GPIO_Init+0x23c>
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d003      	beq.n	8001910 <HAL_GPIO_Init+0x23c>
 8001908:	21dc      	movs	r1, #220	; 0xdc
 800190a:	4813      	ldr	r0, [pc, #76]	; (8001958 <HAL_GPIO_Init+0x284>)
 800190c:	f7fe fee9 	bl	80006e2 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	3304      	adds	r3, #4
 8001916:	623b      	str	r3, [r7, #32]
          break;
 8001918:	e06c      	b.n	80019f4 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d00b      	beq.n	800193a <HAL_GPIO_Init+0x266>
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d007      	beq.n	800193a <HAL_GPIO_Init+0x266>
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	2b03      	cmp	r3, #3
 8001930:	d003      	beq.n	800193a <HAL_GPIO_Init+0x266>
 8001932:	21e3      	movs	r1, #227	; 0xe3
 8001934:	4808      	ldr	r0, [pc, #32]	; (8001958 <HAL_GPIO_Init+0x284>)
 8001936:	f7fe fed4 	bl	80006e2 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	3308      	adds	r3, #8
 8001940:	623b      	str	r3, [r7, #32]
          break;
 8001942:	e057      	b.n	80019f4 <HAL_GPIO_Init+0x320>
 8001944:	40010800 	.word	0x40010800
 8001948:	40010c00 	.word	0x40010c00
 800194c:	40011000 	.word	0x40011000
 8001950:	40011400 	.word	0x40011400
 8001954:	40011800 	.word	0x40011800
 8001958:	080031ac 	.word	0x080031ac
 800195c:	10110000 	.word	0x10110000
 8001960:	10210000 	.word	0x10210000
 8001964:	10310000 	.word	0x10310000
 8001968:	10120000 	.word	0x10120000
 800196c:	10220000 	.word	0x10220000
 8001970:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d00b      	beq.n	8001994 <HAL_GPIO_Init+0x2c0>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d007      	beq.n	8001994 <HAL_GPIO_Init+0x2c0>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	2b03      	cmp	r3, #3
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x2c0>
 800198c:	21ea      	movs	r1, #234	; 0xea
 800198e:	4880      	ldr	r0, [pc, #512]	; (8001b90 <HAL_GPIO_Init+0x4bc>)
 8001990:	f7fe fea7 	bl	80006e2 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	330c      	adds	r3, #12
 800199a:	623b      	str	r3, [r7, #32]
          break;
 800199c:	e02a      	b.n	80019f4 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00b      	beq.n	80019be <HAL_GPIO_Init+0x2ea>
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d007      	beq.n	80019be <HAL_GPIO_Init+0x2ea>
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0x2ea>
 80019b6:	21f7      	movs	r1, #247	; 0xf7
 80019b8:	4875      	ldr	r0, [pc, #468]	; (8001b90 <HAL_GPIO_Init+0x4bc>)
 80019ba:	f7fe fe92 	bl	80006e2 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d102      	bne.n	80019cc <HAL_GPIO_Init+0x2f8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019c6:	2304      	movs	r3, #4
 80019c8:	623b      	str	r3, [r7, #32]
          break;
 80019ca:	e013      	b.n	80019f4 <HAL_GPIO_Init+0x320>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d105      	bne.n	80019e0 <HAL_GPIO_Init+0x30c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d4:	2308      	movs	r3, #8
 80019d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69fa      	ldr	r2, [r7, #28]
 80019dc:	611a      	str	r2, [r3, #16]
          break;
 80019de:	e009      	b.n	80019f4 <HAL_GPIO_Init+0x320>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019e0:	2308      	movs	r3, #8
 80019e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	615a      	str	r2, [r3, #20]
          break;
 80019ea:	e003      	b.n	80019f4 <HAL_GPIO_Init+0x320>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019ec:	2300      	movs	r3, #0
 80019ee:	623b      	str	r3, [r7, #32]
          break;
 80019f0:	e000      	b.n	80019f4 <HAL_GPIO_Init+0x320>
          break;
 80019f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	2bff      	cmp	r3, #255	; 0xff
 80019f8:	d801      	bhi.n	80019fe <HAL_GPIO_Init+0x32a>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	e001      	b.n	8001a02 <HAL_GPIO_Init+0x32e>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3304      	adds	r3, #4
 8001a02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	2bff      	cmp	r3, #255	; 0xff
 8001a08:	d802      	bhi.n	8001a10 <HAL_GPIO_Init+0x33c>
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	e002      	b.n	8001a16 <HAL_GPIO_Init+0x342>
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	3b08      	subs	r3, #8
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	210f      	movs	r1, #15
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	fa01 f303 	lsl.w	r3, r1, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	401a      	ands	r2, r3
 8001a28:	6a39      	ldr	r1, [r7, #32]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a30:	431a      	orrs	r2, r3
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 8096 	beq.w	8001b70 <HAL_GPIO_Init+0x49c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a44:	4b53      	ldr	r3, [pc, #332]	; (8001b94 <HAL_GPIO_Init+0x4c0>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	4a52      	ldr	r2, [pc, #328]	; (8001b94 <HAL_GPIO_Init+0x4c0>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6193      	str	r3, [r2, #24]
 8001a50:	4b50      	ldr	r3, [pc, #320]	; (8001b94 <HAL_GPIO_Init+0x4c0>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a5c:	4a4e      	ldr	r2, [pc, #312]	; (8001b98 <HAL_GPIO_Init+0x4c4>)
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	089b      	lsrs	r3, r3, #2
 8001a62:	3302      	adds	r3, #2
 8001a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	220f      	movs	r2, #15
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a46      	ldr	r2, [pc, #280]	; (8001b9c <HAL_GPIO_Init+0x4c8>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d013      	beq.n	8001ab0 <HAL_GPIO_Init+0x3dc>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a45      	ldr	r2, [pc, #276]	; (8001ba0 <HAL_GPIO_Init+0x4cc>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d00d      	beq.n	8001aac <HAL_GPIO_Init+0x3d8>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a44      	ldr	r2, [pc, #272]	; (8001ba4 <HAL_GPIO_Init+0x4d0>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d007      	beq.n	8001aa8 <HAL_GPIO_Init+0x3d4>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a43      	ldr	r2, [pc, #268]	; (8001ba8 <HAL_GPIO_Init+0x4d4>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d101      	bne.n	8001aa4 <HAL_GPIO_Init+0x3d0>
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e006      	b.n	8001ab2 <HAL_GPIO_Init+0x3de>
 8001aa4:	2304      	movs	r3, #4
 8001aa6:	e004      	b.n	8001ab2 <HAL_GPIO_Init+0x3de>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	e002      	b.n	8001ab2 <HAL_GPIO_Init+0x3de>
 8001aac:	2301      	movs	r3, #1
 8001aae:	e000      	b.n	8001ab2 <HAL_GPIO_Init+0x3de>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab4:	f002 0203 	and.w	r2, r2, #3
 8001ab8:	0092      	lsls	r2, r2, #2
 8001aba:	4093      	lsls	r3, r2
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ac2:	4935      	ldr	r1, [pc, #212]	; (8001b98 <HAL_GPIO_Init+0x4c4>)
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	089b      	lsrs	r3, r3, #2
 8001ac8:	3302      	adds	r3, #2
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d006      	beq.n	8001aea <HAL_GPIO_Init+0x416>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001adc:	4b33      	ldr	r3, [pc, #204]	; (8001bac <HAL_GPIO_Init+0x4d8>)
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	4932      	ldr	r1, [pc, #200]	; (8001bac <HAL_GPIO_Init+0x4d8>)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	608b      	str	r3, [r1, #8]
 8001ae8:	e006      	b.n	8001af8 <HAL_GPIO_Init+0x424>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aea:	4b30      	ldr	r3, [pc, #192]	; (8001bac <HAL_GPIO_Init+0x4d8>)
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	492e      	ldr	r1, [pc, #184]	; (8001bac <HAL_GPIO_Init+0x4d8>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d006      	beq.n	8001b12 <HAL_GPIO_Init+0x43e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b04:	4b29      	ldr	r3, [pc, #164]	; (8001bac <HAL_GPIO_Init+0x4d8>)
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	4928      	ldr	r1, [pc, #160]	; (8001bac <HAL_GPIO_Init+0x4d8>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	60cb      	str	r3, [r1, #12]
 8001b10:	e006      	b.n	8001b20 <HAL_GPIO_Init+0x44c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b12:	4b26      	ldr	r3, [pc, #152]	; (8001bac <HAL_GPIO_Init+0x4d8>)
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	4924      	ldr	r1, [pc, #144]	; (8001bac <HAL_GPIO_Init+0x4d8>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d006      	beq.n	8001b3a <HAL_GPIO_Init+0x466>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b2c:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <HAL_GPIO_Init+0x4d8>)
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	491e      	ldr	r1, [pc, #120]	; (8001bac <HAL_GPIO_Init+0x4d8>)
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	604b      	str	r3, [r1, #4]
 8001b38:	e006      	b.n	8001b48 <HAL_GPIO_Init+0x474>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <HAL_GPIO_Init+0x4d8>)
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	491a      	ldr	r1, [pc, #104]	; (8001bac <HAL_GPIO_Init+0x4d8>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d006      	beq.n	8001b62 <HAL_GPIO_Init+0x48e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b54:	4b15      	ldr	r3, [pc, #84]	; (8001bac <HAL_GPIO_Init+0x4d8>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4914      	ldr	r1, [pc, #80]	; (8001bac <HAL_GPIO_Init+0x4d8>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	600b      	str	r3, [r1, #0]
 8001b60:	e006      	b.n	8001b70 <HAL_GPIO_Init+0x49c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b62:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_GPIO_Init+0x4d8>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	4910      	ldr	r1, [pc, #64]	; (8001bac <HAL_GPIO_Init+0x4d8>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	3301      	adds	r3, #1
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f47f ae1e 	bne.w	80017c2 <HAL_GPIO_Init+0xee>
  }
}
 8001b86:	bf00      	nop
 8001b88:	bf00      	nop
 8001b8a:	3728      	adds	r7, #40	; 0x28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	080031ac 	.word	0x080031ac
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40010000 	.word	0x40010000
 8001b9c:	40010800 	.word	0x40010800
 8001ba0:	40010c00 	.word	0x40010c00
 8001ba4:	40011000 	.word	0x40011000
 8001ba8:	40011400 	.word	0x40011400
 8001bac:	40010400 	.word	0x40010400

08001bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	807b      	strh	r3, [r7, #2]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001bc0:	887b      	ldrh	r3, [r7, #2]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d004      	beq.n	8001bd0 <HAL_GPIO_WritePin+0x20>
 8001bc6:	887b      	ldrh	r3, [r7, #2]
 8001bc8:	0c1b      	lsrs	r3, r3, #16
 8001bca:	041b      	lsls	r3, r3, #16
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d004      	beq.n	8001bda <HAL_GPIO_WritePin+0x2a>
 8001bd0:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8001bd4:	480e      	ldr	r0, [pc, #56]	; (8001c10 <HAL_GPIO_WritePin+0x60>)
 8001bd6:	f7fe fd84 	bl	80006e2 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001bda:	787b      	ldrb	r3, [r7, #1]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d007      	beq.n	8001bf0 <HAL_GPIO_WritePin+0x40>
 8001be0:	787b      	ldrb	r3, [r7, #1]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d004      	beq.n	8001bf0 <HAL_GPIO_WritePin+0x40>
 8001be6:	f240 11d5 	movw	r1, #469	; 0x1d5
 8001bea:	4809      	ldr	r0, [pc, #36]	; (8001c10 <HAL_GPIO_WritePin+0x60>)
 8001bec:	f7fe fd79 	bl	80006e2 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8001bf0:	787b      	ldrb	r3, [r7, #1]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bf6:	887a      	ldrh	r2, [r7, #2]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bfc:	e003      	b.n	8001c06 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bfe:	887b      	ldrh	r3, [r7, #2]
 8001c00:	041a      	lsls	r2, r3, #16
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	611a      	str	r2, [r3, #16]
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	080031ac 	.word	0x080031ac

08001c14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e1b6      	b.n	8001f94 <HAL_I2C_Init+0x380>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a9c      	ldr	r2, [pc, #624]	; (8001e9c <HAL_I2C_Init+0x288>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d009      	beq.n	8001c44 <HAL_I2C_Init+0x30>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a9a      	ldr	r2, [pc, #616]	; (8001ea0 <HAL_I2C_Init+0x28c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d004      	beq.n	8001c44 <HAL_I2C_Init+0x30>
 8001c3a:	f240 11db 	movw	r1, #475	; 0x1db
 8001c3e:	4899      	ldr	r0, [pc, #612]	; (8001ea4 <HAL_I2C_Init+0x290>)
 8001c40:	f7fe fd4f 	bl	80006e2 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d004      	beq.n	8001c56 <HAL_I2C_Init+0x42>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	4a95      	ldr	r2, [pc, #596]	; (8001ea8 <HAL_I2C_Init+0x294>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d904      	bls.n	8001c60 <HAL_I2C_Init+0x4c>
 8001c56:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8001c5a:	4892      	ldr	r0, [pc, #584]	; (8001ea4 <HAL_I2C_Init+0x290>)
 8001c5c:	f7fe fd41 	bl	80006e2 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d009      	beq.n	8001c7c <HAL_I2C_Init+0x68>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c70:	d004      	beq.n	8001c7c <HAL_I2C_Init+0x68>
 8001c72:	f240 11dd 	movw	r1, #477	; 0x1dd
 8001c76:	488b      	ldr	r0, [pc, #556]	; (8001ea4 <HAL_I2C_Init+0x290>)
 8001c78:	f7fe fd33 	bl	80006e2 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c84:	f023 0303 	bic.w	r3, r3, #3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d004      	beq.n	8001c96 <HAL_I2C_Init+0x82>
 8001c8c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8001c90:	4884      	ldr	r0, [pc, #528]	; (8001ea4 <HAL_I2C_Init+0x290>)
 8001c92:	f7fe fd26 	bl	80006e2 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c9e:	d009      	beq.n	8001cb4 <HAL_I2C_Init+0xa0>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001ca8:	d004      	beq.n	8001cb4 <HAL_I2C_Init+0xa0>
 8001caa:	f240 11df 	movw	r1, #479	; 0x1df
 8001cae:	487d      	ldr	r0, [pc, #500]	; (8001ea4 <HAL_I2C_Init+0x290>)
 8001cb0:	f7fe fd17 	bl	80006e2 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d008      	beq.n	8001cce <HAL_I2C_Init+0xba>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d004      	beq.n	8001cce <HAL_I2C_Init+0xba>
 8001cc4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001cc8:	4876      	ldr	r0, [pc, #472]	; (8001ea4 <HAL_I2C_Init+0x290>)
 8001cca:	f7fe fd0a 	bl	80006e2 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d004      	beq.n	8001ce4 <HAL_I2C_Init+0xd0>
 8001cda:	f240 11e1 	movw	r1, #481	; 0x1e1
 8001cde:	4871      	ldr	r0, [pc, #452]	; (8001ea4 <HAL_I2C_Init+0x290>)
 8001ce0:	f7fe fcff 	bl	80006e2 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d008      	beq.n	8001cfe <HAL_I2C_Init+0xea>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	2b40      	cmp	r3, #64	; 0x40
 8001cf2:	d004      	beq.n	8001cfe <HAL_I2C_Init+0xea>
 8001cf4:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8001cf8:	486a      	ldr	r0, [pc, #424]	; (8001ea4 <HAL_I2C_Init+0x290>)
 8001cfa:	f7fe fcf2 	bl	80006e2 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d008      	beq.n	8001d18 <HAL_I2C_Init+0x104>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	2b80      	cmp	r3, #128	; 0x80
 8001d0c:	d004      	beq.n	8001d18 <HAL_I2C_Init+0x104>
 8001d0e:	f240 11e3 	movw	r1, #483	; 0x1e3
 8001d12:	4864      	ldr	r0, [pc, #400]	; (8001ea4 <HAL_I2C_Init+0x290>)
 8001d14:	f7fe fce5 	bl	80006e2 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d106      	bne.n	8001d32 <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7fe fc27 	bl	8000580 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2224      	movs	r2, #36	; 0x24
 8001d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0201 	bic.w	r2, r2, #1
 8001d48:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d58:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d68:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d6a:	f000 fe73 	bl	8002a54 <HAL_RCC_GetPCLK1Freq>
 8001d6e:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	4a4d      	ldr	r2, [pc, #308]	; (8001eac <HAL_I2C_Init+0x298>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d807      	bhi.n	8001d8a <HAL_I2C_Init+0x176>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4a4c      	ldr	r2, [pc, #304]	; (8001eb0 <HAL_I2C_Init+0x29c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	bf94      	ite	ls
 8001d82:	2301      	movls	r3, #1
 8001d84:	2300      	movhi	r3, #0
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	e006      	b.n	8001d98 <HAL_I2C_Init+0x184>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4a49      	ldr	r2, [pc, #292]	; (8001eb4 <HAL_I2C_Init+0x2a0>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	bf94      	ite	ls
 8001d92:	2301      	movls	r3, #1
 8001d94:	2300      	movhi	r3, #0
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_I2C_Init+0x18c>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0f9      	b.n	8001f94 <HAL_I2C_Init+0x380>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4a45      	ldr	r2, [pc, #276]	; (8001eb8 <HAL_I2C_Init+0x2a4>)
 8001da4:	fba2 2303 	umull	r2, r3, r2, r3
 8001da8:	0c9b      	lsrs	r3, r3, #18
 8001daa:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	4a37      	ldr	r2, [pc, #220]	; (8001eac <HAL_I2C_Init+0x298>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d802      	bhi.n	8001dda <HAL_I2C_Init+0x1c6>
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	e009      	b.n	8001dee <HAL_I2C_Init+0x1da>
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001de0:	fb02 f303 	mul.w	r3, r2, r3
 8001de4:	4a35      	ldr	r2, [pc, #212]	; (8001ebc <HAL_I2C_Init+0x2a8>)
 8001de6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dea:	099b      	lsrs	r3, r3, #6
 8001dec:	3301      	adds	r3, #1
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	6812      	ldr	r2, [r2, #0]
 8001df2:	430b      	orrs	r3, r1
 8001df4:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e00:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	4928      	ldr	r1, [pc, #160]	; (8001eac <HAL_I2C_Init+0x298>)
 8001e0a:	428b      	cmp	r3, r1
 8001e0c:	d819      	bhi.n	8001e42 <HAL_I2C_Init+0x22e>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1e59      	subs	r1, r3, #1
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e1c:	1c59      	adds	r1, r3, #1
 8001e1e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e22:	400b      	ands	r3, r1
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00a      	beq.n	8001e3e <HAL_I2C_Init+0x22a>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	1e59      	subs	r1, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e36:	3301      	adds	r3, #1
 8001e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e3c:	e063      	b.n	8001f06 <HAL_I2C_Init+0x2f2>
 8001e3e:	2304      	movs	r3, #4
 8001e40:	e061      	b.n	8001f06 <HAL_I2C_Init+0x2f2>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d111      	bne.n	8001e6e <HAL_I2C_Init+0x25a>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	1e58      	subs	r0, r3, #1
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6859      	ldr	r1, [r3, #4]
 8001e52:	460b      	mov	r3, r1
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	440b      	add	r3, r1
 8001e58:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	bf0c      	ite	eq
 8001e66:	2301      	moveq	r3, #1
 8001e68:	2300      	movne	r3, #0
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	e012      	b.n	8001e94 <HAL_I2C_Init+0x280>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1e58      	subs	r0, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6859      	ldr	r1, [r3, #4]
 8001e76:	460b      	mov	r3, r1
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	440b      	add	r3, r1
 8001e7c:	0099      	lsls	r1, r3, #2
 8001e7e:	440b      	add	r3, r1
 8001e80:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e84:	3301      	adds	r3, #1
 8001e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	bf0c      	ite	eq
 8001e8e:	2301      	moveq	r3, #1
 8001e90:	2300      	movne	r3, #0
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d013      	beq.n	8001ec0 <HAL_I2C_Init+0x2ac>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e034      	b.n	8001f06 <HAL_I2C_Init+0x2f2>
 8001e9c:	40005400 	.word	0x40005400
 8001ea0:	40005800 	.word	0x40005800
 8001ea4:	08003220 	.word	0x08003220
 8001ea8:	00061a80 	.word	0x00061a80
 8001eac:	000186a0 	.word	0x000186a0
 8001eb0:	001e847f 	.word	0x001e847f
 8001eb4:	003d08ff 	.word	0x003d08ff
 8001eb8:	431bde83 	.word	0x431bde83
 8001ebc:	10624dd3 	.word	0x10624dd3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10e      	bne.n	8001ee6 <HAL_I2C_Init+0x2d2>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	1e58      	subs	r0, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6859      	ldr	r1, [r3, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	440b      	add	r3, r1
 8001ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eda:	3301      	adds	r3, #1
 8001edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ee4:	e00f      	b.n	8001f06 <HAL_I2C_Init+0x2f2>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	1e58      	subs	r0, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6859      	ldr	r1, [r3, #4]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	0099      	lsls	r1, r3, #2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efc:	3301      	adds	r3, #1
 8001efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	6809      	ldr	r1, [r1, #0]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69da      	ldr	r2, [r3, #28]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f34:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6911      	ldr	r1, [r2, #16]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	68d2      	ldr	r2, [r2, #12]
 8001f40:	4311      	orrs	r1, r2
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6812      	ldr	r2, [r2, #0]
 8001f46:	430b      	orrs	r3, r1
 8001f48:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	695a      	ldr	r2, [r3, #20]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 0201 	orr.w	r2, r2, #1
 8001f74:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e35a      	b.n	8002664 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d01c      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x54>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d116      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x54>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d110      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x54>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10a      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x54>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d104      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x54>
 8001fe6:	f240 1165 	movw	r1, #357	; 0x165
 8001fea:	488f      	ldr	r0, [pc, #572]	; (8002228 <HAL_RCC_OscConfig+0x28c>)
 8001fec:	f7fe fb79 	bl	80006e2 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 809a 	beq.w	8002132 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00e      	beq.n	8002024 <HAL_RCC_OscConfig+0x88>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200e:	d009      	beq.n	8002024 <HAL_RCC_OscConfig+0x88>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002018:	d004      	beq.n	8002024 <HAL_RCC_OscConfig+0x88>
 800201a:	f240 116b 	movw	r1, #363	; 0x16b
 800201e:	4882      	ldr	r0, [pc, #520]	; (8002228 <HAL_RCC_OscConfig+0x28c>)
 8002020:	f7fe fb5f 	bl	80006e2 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002024:	4b81      	ldr	r3, [pc, #516]	; (800222c <HAL_RCC_OscConfig+0x290>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 030c 	and.w	r3, r3, #12
 800202c:	2b04      	cmp	r3, #4
 800202e:	d00c      	beq.n	800204a <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002030:	4b7e      	ldr	r3, [pc, #504]	; (800222c <HAL_RCC_OscConfig+0x290>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 030c 	and.w	r3, r3, #12
 8002038:	2b08      	cmp	r3, #8
 800203a:	d112      	bne.n	8002062 <HAL_RCC_OscConfig+0xc6>
 800203c:	4b7b      	ldr	r3, [pc, #492]	; (800222c <HAL_RCC_OscConfig+0x290>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002048:	d10b      	bne.n	8002062 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204a:	4b78      	ldr	r3, [pc, #480]	; (800222c <HAL_RCC_OscConfig+0x290>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d06c      	beq.n	8002130 <HAL_RCC_OscConfig+0x194>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d168      	bne.n	8002130 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e300      	b.n	8002664 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206a:	d106      	bne.n	800207a <HAL_RCC_OscConfig+0xde>
 800206c:	4b6f      	ldr	r3, [pc, #444]	; (800222c <HAL_RCC_OscConfig+0x290>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a6e      	ldr	r2, [pc, #440]	; (800222c <HAL_RCC_OscConfig+0x290>)
 8002072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	e02e      	b.n	80020d8 <HAL_RCC_OscConfig+0x13c>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10c      	bne.n	800209c <HAL_RCC_OscConfig+0x100>
 8002082:	4b6a      	ldr	r3, [pc, #424]	; (800222c <HAL_RCC_OscConfig+0x290>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a69      	ldr	r2, [pc, #420]	; (800222c <HAL_RCC_OscConfig+0x290>)
 8002088:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	4b67      	ldr	r3, [pc, #412]	; (800222c <HAL_RCC_OscConfig+0x290>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a66      	ldr	r2, [pc, #408]	; (800222c <HAL_RCC_OscConfig+0x290>)
 8002094:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	e01d      	b.n	80020d8 <HAL_RCC_OscConfig+0x13c>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x124>
 80020a6:	4b61      	ldr	r3, [pc, #388]	; (800222c <HAL_RCC_OscConfig+0x290>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a60      	ldr	r2, [pc, #384]	; (800222c <HAL_RCC_OscConfig+0x290>)
 80020ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	4b5e      	ldr	r3, [pc, #376]	; (800222c <HAL_RCC_OscConfig+0x290>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a5d      	ldr	r2, [pc, #372]	; (800222c <HAL_RCC_OscConfig+0x290>)
 80020b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e00b      	b.n	80020d8 <HAL_RCC_OscConfig+0x13c>
 80020c0:	4b5a      	ldr	r3, [pc, #360]	; (800222c <HAL_RCC_OscConfig+0x290>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a59      	ldr	r2, [pc, #356]	; (800222c <HAL_RCC_OscConfig+0x290>)
 80020c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	4b57      	ldr	r3, [pc, #348]	; (800222c <HAL_RCC_OscConfig+0x290>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a56      	ldr	r2, [pc, #344]	; (800222c <HAL_RCC_OscConfig+0x290>)
 80020d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d013      	beq.n	8002108 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7fe fc5e 	bl	80009a0 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e8:	f7fe fc5a 	bl	80009a0 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	; 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e2b4      	b.n	8002664 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fa:	4b4c      	ldr	r3, [pc, #304]	; (800222c <HAL_RCC_OscConfig+0x290>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0x14c>
 8002106:	e014      	b.n	8002132 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7fe fc4a 	bl	80009a0 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002110:	f7fe fc46 	bl	80009a0 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	; 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e2a0      	b.n	8002664 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002122:	4b42      	ldr	r3, [pc, #264]	; (800222c <HAL_RCC_OscConfig+0x290>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0x174>
 800212e:	e000      	b.n	8002132 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 8080 	beq.w	8002240 <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d008      	beq.n	800215a <HAL_RCC_OscConfig+0x1be>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d004      	beq.n	800215a <HAL_RCC_OscConfig+0x1be>
 8002150:	f240 119f 	movw	r1, #415	; 0x19f
 8002154:	4834      	ldr	r0, [pc, #208]	; (8002228 <HAL_RCC_OscConfig+0x28c>)
 8002156:	f7fe fac4 	bl	80006e2 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	2b1f      	cmp	r3, #31
 8002160:	d904      	bls.n	800216c <HAL_RCC_OscConfig+0x1d0>
 8002162:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8002166:	4830      	ldr	r0, [pc, #192]	; (8002228 <HAL_RCC_OscConfig+0x28c>)
 8002168:	f7fe fabb 	bl	80006e2 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800216c:	4b2f      	ldr	r3, [pc, #188]	; (800222c <HAL_RCC_OscConfig+0x290>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 030c 	and.w	r3, r3, #12
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00b      	beq.n	8002190 <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002178:	4b2c      	ldr	r3, [pc, #176]	; (800222c <HAL_RCC_OscConfig+0x290>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 030c 	and.w	r3, r3, #12
 8002180:	2b08      	cmp	r3, #8
 8002182:	d11c      	bne.n	80021be <HAL_RCC_OscConfig+0x222>
 8002184:	4b29      	ldr	r3, [pc, #164]	; (800222c <HAL_RCC_OscConfig+0x290>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d116      	bne.n	80021be <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002190:	4b26      	ldr	r3, [pc, #152]	; (800222c <HAL_RCC_OscConfig+0x290>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_RCC_OscConfig+0x20c>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e25d      	b.n	8002664 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a8:	4b20      	ldr	r3, [pc, #128]	; (800222c <HAL_RCC_OscConfig+0x290>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	491d      	ldr	r1, [pc, #116]	; (800222c <HAL_RCC_OscConfig+0x290>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021bc:	e040      	b.n	8002240 <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d020      	beq.n	8002208 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021c6:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <HAL_RCC_OscConfig+0x294>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7fe fbe8 	bl	80009a0 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d4:	f7fe fbe4 	bl	80009a0 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e23e      	b.n	8002664 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_RCC_OscConfig+0x290>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f2:	4b0e      	ldr	r3, [pc, #56]	; (800222c <HAL_RCC_OscConfig+0x290>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	490a      	ldr	r1, [pc, #40]	; (800222c <HAL_RCC_OscConfig+0x290>)
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]
 8002206:	e01b      	b.n	8002240 <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002208:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_RCC_OscConfig+0x294>)
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220e:	f7fe fbc7 	bl	80009a0 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002214:	e00e      	b.n	8002234 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002216:	f7fe fbc3 	bl	80009a0 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d907      	bls.n	8002234 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e21d      	b.n	8002664 <HAL_RCC_OscConfig+0x6c8>
 8002228:	08003290 	.word	0x08003290
 800222c:	40021000 	.word	0x40021000
 8002230:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002234:	4b7d      	ldr	r3, [pc, #500]	; (800242c <HAL_RCC_OscConfig+0x490>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1ea      	bne.n	8002216 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d040      	beq.n	80022ce <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d008      	beq.n	8002266 <HAL_RCC_OscConfig+0x2ca>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d004      	beq.n	8002266 <HAL_RCC_OscConfig+0x2ca>
 800225c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002260:	4873      	ldr	r0, [pc, #460]	; (8002430 <HAL_RCC_OscConfig+0x494>)
 8002262:	f7fe fa3e 	bl	80006e2 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d019      	beq.n	80022a2 <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800226e:	4b71      	ldr	r3, [pc, #452]	; (8002434 <HAL_RCC_OscConfig+0x498>)
 8002270:	2201      	movs	r2, #1
 8002272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002274:	f7fe fb94 	bl	80009a0 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800227c:	f7fe fb90 	bl	80009a0 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e1ea      	b.n	8002664 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800228e:	4b67      	ldr	r3, [pc, #412]	; (800242c <HAL_RCC_OscConfig+0x490>)
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800229a:	2001      	movs	r0, #1
 800229c:	f000 fc02 	bl	8002aa4 <RCC_Delay>
 80022a0:	e015      	b.n	80022ce <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022a2:	4b64      	ldr	r3, [pc, #400]	; (8002434 <HAL_RCC_OscConfig+0x498>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a8:	f7fe fb7a 	bl	80009a0 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b0:	f7fe fb76 	bl	80009a0 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e1d0      	b.n	8002664 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c2:	4b5a      	ldr	r3, [pc, #360]	; (800242c <HAL_RCC_OscConfig+0x490>)
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 80bf 	beq.w	800245a <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022dc:	2300      	movs	r3, #0
 80022de:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00c      	beq.n	8002302 <HAL_RCC_OscConfig+0x366>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d008      	beq.n	8002302 <HAL_RCC_OscConfig+0x366>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	2b05      	cmp	r3, #5
 80022f6:	d004      	beq.n	8002302 <HAL_RCC_OscConfig+0x366>
 80022f8:	f240 210f 	movw	r1, #527	; 0x20f
 80022fc:	484c      	ldr	r0, [pc, #304]	; (8002430 <HAL_RCC_OscConfig+0x494>)
 80022fe:	f7fe f9f0 	bl	80006e2 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002302:	4b4a      	ldr	r3, [pc, #296]	; (800242c <HAL_RCC_OscConfig+0x490>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10d      	bne.n	800232a <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230e:	4b47      	ldr	r3, [pc, #284]	; (800242c <HAL_RCC_OscConfig+0x490>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	4a46      	ldr	r2, [pc, #280]	; (800242c <HAL_RCC_OscConfig+0x490>)
 8002314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002318:	61d3      	str	r3, [r2, #28]
 800231a:	4b44      	ldr	r3, [pc, #272]	; (800242c <HAL_RCC_OscConfig+0x490>)
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002326:	2301      	movs	r3, #1
 8002328:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232a:	4b43      	ldr	r3, [pc, #268]	; (8002438 <HAL_RCC_OscConfig+0x49c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002332:	2b00      	cmp	r3, #0
 8002334:	d118      	bne.n	8002368 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002336:	4b40      	ldr	r3, [pc, #256]	; (8002438 <HAL_RCC_OscConfig+0x49c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a3f      	ldr	r2, [pc, #252]	; (8002438 <HAL_RCC_OscConfig+0x49c>)
 800233c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002342:	f7fe fb2d 	bl	80009a0 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800234a:	f7fe fb29 	bl	80009a0 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b64      	cmp	r3, #100	; 0x64
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e183      	b.n	8002664 <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235c:	4b36      	ldr	r3, [pc, #216]	; (8002438 <HAL_RCC_OscConfig+0x49c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0f0      	beq.n	800234a <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d106      	bne.n	800237e <HAL_RCC_OscConfig+0x3e2>
 8002370:	4b2e      	ldr	r3, [pc, #184]	; (800242c <HAL_RCC_OscConfig+0x490>)
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	4a2d      	ldr	r2, [pc, #180]	; (800242c <HAL_RCC_OscConfig+0x490>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	6213      	str	r3, [r2, #32]
 800237c:	e02d      	b.n	80023da <HAL_RCC_OscConfig+0x43e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10c      	bne.n	80023a0 <HAL_RCC_OscConfig+0x404>
 8002386:	4b29      	ldr	r3, [pc, #164]	; (800242c <HAL_RCC_OscConfig+0x490>)
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	4a28      	ldr	r2, [pc, #160]	; (800242c <HAL_RCC_OscConfig+0x490>)
 800238c:	f023 0301 	bic.w	r3, r3, #1
 8002390:	6213      	str	r3, [r2, #32]
 8002392:	4b26      	ldr	r3, [pc, #152]	; (800242c <HAL_RCC_OscConfig+0x490>)
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	4a25      	ldr	r2, [pc, #148]	; (800242c <HAL_RCC_OscConfig+0x490>)
 8002398:	f023 0304 	bic.w	r3, r3, #4
 800239c:	6213      	str	r3, [r2, #32]
 800239e:	e01c      	b.n	80023da <HAL_RCC_OscConfig+0x43e>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	2b05      	cmp	r3, #5
 80023a6:	d10c      	bne.n	80023c2 <HAL_RCC_OscConfig+0x426>
 80023a8:	4b20      	ldr	r3, [pc, #128]	; (800242c <HAL_RCC_OscConfig+0x490>)
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	4a1f      	ldr	r2, [pc, #124]	; (800242c <HAL_RCC_OscConfig+0x490>)
 80023ae:	f043 0304 	orr.w	r3, r3, #4
 80023b2:	6213      	str	r3, [r2, #32]
 80023b4:	4b1d      	ldr	r3, [pc, #116]	; (800242c <HAL_RCC_OscConfig+0x490>)
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4a1c      	ldr	r2, [pc, #112]	; (800242c <HAL_RCC_OscConfig+0x490>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	6213      	str	r3, [r2, #32]
 80023c0:	e00b      	b.n	80023da <HAL_RCC_OscConfig+0x43e>
 80023c2:	4b1a      	ldr	r3, [pc, #104]	; (800242c <HAL_RCC_OscConfig+0x490>)
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	4a19      	ldr	r2, [pc, #100]	; (800242c <HAL_RCC_OscConfig+0x490>)
 80023c8:	f023 0301 	bic.w	r3, r3, #1
 80023cc:	6213      	str	r3, [r2, #32]
 80023ce:	4b17      	ldr	r3, [pc, #92]	; (800242c <HAL_RCC_OscConfig+0x490>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	4a16      	ldr	r2, [pc, #88]	; (800242c <HAL_RCC_OscConfig+0x490>)
 80023d4:	f023 0304 	bic.w	r3, r3, #4
 80023d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d015      	beq.n	800240e <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e2:	f7fe fadd 	bl	80009a0 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e8:	e00a      	b.n	8002400 <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ea:	f7fe fad9 	bl	80009a0 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e131      	b.n	8002664 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002400:	4b0a      	ldr	r3, [pc, #40]	; (800242c <HAL_RCC_OscConfig+0x490>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0ee      	beq.n	80023ea <HAL_RCC_OscConfig+0x44e>
 800240c:	e01c      	b.n	8002448 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240e:	f7fe fac7 	bl	80009a0 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002414:	e012      	b.n	800243c <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002416:	f7fe fac3 	bl	80009a0 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	f241 3288 	movw	r2, #5000	; 0x1388
 8002424:	4293      	cmp	r3, r2
 8002426:	d909      	bls.n	800243c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e11b      	b.n	8002664 <HAL_RCC_OscConfig+0x6c8>
 800242c:	40021000 	.word	0x40021000
 8002430:	08003290 	.word	0x08003290
 8002434:	42420480 	.word	0x42420480
 8002438:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243c:	4b8b      	ldr	r3, [pc, #556]	; (800266c <HAL_RCC_OscConfig+0x6d0>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1e6      	bne.n	8002416 <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002448:	7dfb      	ldrb	r3, [r7, #23]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d105      	bne.n	800245a <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244e:	4b87      	ldr	r3, [pc, #540]	; (800266c <HAL_RCC_OscConfig+0x6d0>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	4a86      	ldr	r2, [pc, #536]	; (800266c <HAL_RCC_OscConfig+0x6d0>)
 8002454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002458:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00c      	beq.n	800247c <HAL_RCC_OscConfig+0x4e0>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d008      	beq.n	800247c <HAL_RCC_OscConfig+0x4e0>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d004      	beq.n	800247c <HAL_RCC_OscConfig+0x4e0>
 8002472:	f240 21ad 	movw	r1, #685	; 0x2ad
 8002476:	487e      	ldr	r0, [pc, #504]	; (8002670 <HAL_RCC_OscConfig+0x6d4>)
 8002478:	f7fe f933 	bl	80006e2 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 80ee 	beq.w	8002662 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002486:	4b79      	ldr	r3, [pc, #484]	; (800266c <HAL_RCC_OscConfig+0x6d0>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	2b08      	cmp	r3, #8
 8002490:	f000 80ce 	beq.w	8002630 <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	2b02      	cmp	r3, #2
 800249a:	f040 80b2 	bne.w	8002602 <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d009      	beq.n	80024ba <HAL_RCC_OscConfig+0x51e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ae:	d004      	beq.n	80024ba <HAL_RCC_OscConfig+0x51e>
 80024b0:	f240 21b6 	movw	r1, #694	; 0x2b6
 80024b4:	486e      	ldr	r0, [pc, #440]	; (8002670 <HAL_RCC_OscConfig+0x6d4>)
 80024b6:	f7fe f914 	bl	80006e2 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d04a      	beq.n	8002558 <HAL_RCC_OscConfig+0x5bc>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024ca:	d045      	beq.n	8002558 <HAL_RCC_OscConfig+0x5bc>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80024d4:	d040      	beq.n	8002558 <HAL_RCC_OscConfig+0x5bc>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80024de:	d03b      	beq.n	8002558 <HAL_RCC_OscConfig+0x5bc>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024e8:	d036      	beq.n	8002558 <HAL_RCC_OscConfig+0x5bc>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80024f2:	d031      	beq.n	8002558 <HAL_RCC_OscConfig+0x5bc>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80024fc:	d02c      	beq.n	8002558 <HAL_RCC_OscConfig+0x5bc>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002506:	d027      	beq.n	8002558 <HAL_RCC_OscConfig+0x5bc>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002510:	d022      	beq.n	8002558 <HAL_RCC_OscConfig+0x5bc>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800251a:	d01d      	beq.n	8002558 <HAL_RCC_OscConfig+0x5bc>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002524:	d018      	beq.n	8002558 <HAL_RCC_OscConfig+0x5bc>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800252e:	d013      	beq.n	8002558 <HAL_RCC_OscConfig+0x5bc>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002538:	d00e      	beq.n	8002558 <HAL_RCC_OscConfig+0x5bc>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8002542:	d009      	beq.n	8002558 <HAL_RCC_OscConfig+0x5bc>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800254c:	d004      	beq.n	8002558 <HAL_RCC_OscConfig+0x5bc>
 800254e:	f240 21b7 	movw	r1, #695	; 0x2b7
 8002552:	4847      	ldr	r0, [pc, #284]	; (8002670 <HAL_RCC_OscConfig+0x6d4>)
 8002554:	f7fe f8c5 	bl	80006e2 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002558:	4b46      	ldr	r3, [pc, #280]	; (8002674 <HAL_RCC_OscConfig+0x6d8>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255e:	f7fe fa1f 	bl	80009a0 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002566:	f7fe fa1b 	bl	80009a0 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e075      	b.n	8002664 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002578:	4b3c      	ldr	r3, [pc, #240]	; (800266c <HAL_RCC_OscConfig+0x6d0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800258c:	d116      	bne.n	80025bc <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d009      	beq.n	80025aa <HAL_RCC_OscConfig+0x60e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800259e:	d004      	beq.n	80025aa <HAL_RCC_OscConfig+0x60e>
 80025a0:	f240 21cd 	movw	r1, #717	; 0x2cd
 80025a4:	4832      	ldr	r0, [pc, #200]	; (8002670 <HAL_RCC_OscConfig+0x6d4>)
 80025a6:	f7fe f89c 	bl	80006e2 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025aa:	4b30      	ldr	r3, [pc, #192]	; (800266c <HAL_RCC_OscConfig+0x6d0>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	492d      	ldr	r1, [pc, #180]	; (800266c <HAL_RCC_OscConfig+0x6d0>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025bc:	4b2b      	ldr	r3, [pc, #172]	; (800266c <HAL_RCC_OscConfig+0x6d0>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a19      	ldr	r1, [r3, #32]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	430b      	orrs	r3, r1
 80025ce:	4927      	ldr	r1, [pc, #156]	; (800266c <HAL_RCC_OscConfig+0x6d0>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025d4:	4b27      	ldr	r3, [pc, #156]	; (8002674 <HAL_RCC_OscConfig+0x6d8>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025da:	f7fe f9e1 	bl	80009a0 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e2:	f7fe f9dd 	bl	80009a0 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e037      	b.n	8002664 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025f4:	4b1d      	ldr	r3, [pc, #116]	; (800266c <HAL_RCC_OscConfig+0x6d0>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x646>
 8002600:	e02f      	b.n	8002662 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002602:	4b1c      	ldr	r3, [pc, #112]	; (8002674 <HAL_RCC_OscConfig+0x6d8>)
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002608:	f7fe f9ca 	bl	80009a0 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002610:	f7fe f9c6 	bl	80009a0 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e020      	b.n	8002664 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002622:	4b12      	ldr	r3, [pc, #72]	; (800266c <HAL_RCC_OscConfig+0x6d0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0x674>
 800262e:	e018      	b.n	8002662 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e013      	b.n	8002664 <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800263c:	4b0b      	ldr	r3, [pc, #44]	; (800266c <HAL_RCC_OscConfig+0x6d0>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	429a      	cmp	r2, r3
 800264e:	d106      	bne.n	800265e <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265a:	429a      	cmp	r2, r3
 800265c:	d001      	beq.n	8002662 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40021000 	.word	0x40021000
 8002670:	08003290 	.word	0x08003290
 8002674:	42420060 	.word	0x42420060

08002678 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e176      	b.n	800297a <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d116      	bne.n	80026c6 <HAL_RCC_ClockConfig+0x4e>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d110      	bne.n	80026c6 <HAL_RCC_ClockConfig+0x4e>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10a      	bne.n	80026c6 <HAL_RCC_ClockConfig+0x4e>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d104      	bne.n	80026c6 <HAL_RCC_ClockConfig+0x4e>
 80026bc:	f240 3136 	movw	r1, #822	; 0x336
 80026c0:	4874      	ldr	r0, [pc, #464]	; (8002894 <HAL_RCC_ClockConfig+0x21c>)
 80026c2:	f7fe f80e 	bl	80006e2 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x6a>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d007      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x6a>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d004      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x6a>
 80026d8:	f240 3137 	movw	r1, #823	; 0x337
 80026dc:	486d      	ldr	r0, [pc, #436]	; (8002894 <HAL_RCC_ClockConfig+0x21c>)
 80026de:	f7fe f800 	bl	80006e2 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026e2:	4b6d      	ldr	r3, [pc, #436]	; (8002898 <HAL_RCC_ClockConfig+0x220>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d910      	bls.n	8002712 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f0:	4b69      	ldr	r3, [pc, #420]	; (8002898 <HAL_RCC_ClockConfig+0x220>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f023 0207 	bic.w	r2, r3, #7
 80026f8:	4967      	ldr	r1, [pc, #412]	; (8002898 <HAL_RCC_ClockConfig+0x220>)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002700:	4b65      	ldr	r3, [pc, #404]	; (8002898 <HAL_RCC_ClockConfig+0x220>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	429a      	cmp	r2, r3
 800270c:	d001      	beq.n	8002712 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e133      	b.n	800297a <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d049      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	2b00      	cmp	r3, #0
 8002728:	d005      	beq.n	8002736 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800272a:	4b5c      	ldr	r3, [pc, #368]	; (800289c <HAL_RCC_ClockConfig+0x224>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4a5b      	ldr	r2, [pc, #364]	; (800289c <HAL_RCC_ClockConfig+0x224>)
 8002730:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002734:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d005      	beq.n	800274e <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002742:	4b56      	ldr	r3, [pc, #344]	; (800289c <HAL_RCC_ClockConfig+0x224>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4a55      	ldr	r2, [pc, #340]	; (800289c <HAL_RCC_ClockConfig+0x224>)
 8002748:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800274c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d024      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x128>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b80      	cmp	r3, #128	; 0x80
 800275c:	d020      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x128>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b90      	cmp	r3, #144	; 0x90
 8002764:	d01c      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x128>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2ba0      	cmp	r3, #160	; 0xa0
 800276c:	d018      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x128>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2bb0      	cmp	r3, #176	; 0xb0
 8002774:	d014      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x128>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2bc0      	cmp	r3, #192	; 0xc0
 800277c:	d010      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x128>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2bd0      	cmp	r3, #208	; 0xd0
 8002784:	d00c      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x128>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2be0      	cmp	r3, #224	; 0xe0
 800278c:	d008      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x128>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2bf0      	cmp	r3, #240	; 0xf0
 8002794:	d004      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x128>
 8002796:	f240 315d 	movw	r1, #861	; 0x35d
 800279a:	483e      	ldr	r0, [pc, #248]	; (8002894 <HAL_RCC_ClockConfig+0x21c>)
 800279c:	f7fd ffa1 	bl	80006e2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a0:	4b3e      	ldr	r3, [pc, #248]	; (800289c <HAL_RCC_ClockConfig+0x224>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	493b      	ldr	r1, [pc, #236]	; (800289c <HAL_RCC_ClockConfig+0x224>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d051      	beq.n	8002862 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00c      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x168>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d008      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x168>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d004      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x168>
 80027d6:	f44f 7159 	mov.w	r1, #868	; 0x364
 80027da:	482e      	ldr	r0, [pc, #184]	; (8002894 <HAL_RCC_ClockConfig+0x21c>)
 80027dc:	f7fd ff81 	bl	80006e2 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d107      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e8:	4b2c      	ldr	r3, [pc, #176]	; (800289c <HAL_RCC_ClockConfig+0x224>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d115      	bne.n	8002820 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0c0      	b.n	800297a <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d107      	bne.n	8002810 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002800:	4b26      	ldr	r3, [pc, #152]	; (800289c <HAL_RCC_ClockConfig+0x224>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d109      	bne.n	8002820 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0b4      	b.n	800297a <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002810:	4b22      	ldr	r3, [pc, #136]	; (800289c <HAL_RCC_ClockConfig+0x224>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0ac      	b.n	800297a <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002820:	4b1e      	ldr	r3, [pc, #120]	; (800289c <HAL_RCC_ClockConfig+0x224>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f023 0203 	bic.w	r2, r3, #3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	491b      	ldr	r1, [pc, #108]	; (800289c <HAL_RCC_ClockConfig+0x224>)
 800282e:	4313      	orrs	r3, r2
 8002830:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002832:	f7fe f8b5 	bl	80009a0 <HAL_GetTick>
 8002836:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002838:	e00a      	b.n	8002850 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800283a:	f7fe f8b1 	bl	80009a0 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	f241 3288 	movw	r2, #5000	; 0x1388
 8002848:	4293      	cmp	r3, r2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e094      	b.n	800297a <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002850:	4b12      	ldr	r3, [pc, #72]	; (800289c <HAL_RCC_ClockConfig+0x224>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 020c 	and.w	r2, r3, #12
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	429a      	cmp	r2, r3
 8002860:	d1eb      	bne.n	800283a <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002862:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <HAL_RCC_ClockConfig+0x220>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d217      	bcs.n	80028a0 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002870:	4b09      	ldr	r3, [pc, #36]	; (8002898 <HAL_RCC_ClockConfig+0x220>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f023 0207 	bic.w	r2, r3, #7
 8002878:	4907      	ldr	r1, [pc, #28]	; (8002898 <HAL_RCC_ClockConfig+0x220>)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	4313      	orrs	r3, r2
 800287e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002880:	4b05      	ldr	r3, [pc, #20]	; (8002898 <HAL_RCC_ClockConfig+0x220>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d008      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e073      	b.n	800297a <HAL_RCC_ClockConfig+0x302>
 8002892:	bf00      	nop
 8002894:	08003290 	.word	0x08003290
 8002898:	40022000 	.word	0x40022000
 800289c:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d025      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d018      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x26e>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028bc:	d013      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x26e>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80028c6:	d00e      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x26e>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80028d0:	d009      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x26e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028da:	d004      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x26e>
 80028dc:	f240 31a2 	movw	r1, #930	; 0x3a2
 80028e0:	4828      	ldr	r0, [pc, #160]	; (8002984 <HAL_RCC_ClockConfig+0x30c>)
 80028e2:	f7fd fefe 	bl	80006e2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e6:	4b28      	ldr	r3, [pc, #160]	; (8002988 <HAL_RCC_ClockConfig+0x310>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	4925      	ldr	r1, [pc, #148]	; (8002988 <HAL_RCC_ClockConfig+0x310>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d026      	beq.n	8002952 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d018      	beq.n	800293e <HAL_RCC_ClockConfig+0x2c6>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002914:	d013      	beq.n	800293e <HAL_RCC_ClockConfig+0x2c6>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800291e:	d00e      	beq.n	800293e <HAL_RCC_ClockConfig+0x2c6>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002928:	d009      	beq.n	800293e <HAL_RCC_ClockConfig+0x2c6>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002932:	d004      	beq.n	800293e <HAL_RCC_ClockConfig+0x2c6>
 8002934:	f240 31a9 	movw	r1, #937	; 0x3a9
 8002938:	4812      	ldr	r0, [pc, #72]	; (8002984 <HAL_RCC_ClockConfig+0x30c>)
 800293a:	f7fd fed2 	bl	80006e2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800293e:	4b12      	ldr	r3, [pc, #72]	; (8002988 <HAL_RCC_ClockConfig+0x310>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	490e      	ldr	r1, [pc, #56]	; (8002988 <HAL_RCC_ClockConfig+0x310>)
 800294e:	4313      	orrs	r3, r2
 8002950:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002952:	f000 f821 	bl	8002998 <HAL_RCC_GetSysClockFreq>
 8002956:	4602      	mov	r2, r0
 8002958:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <HAL_RCC_ClockConfig+0x310>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	091b      	lsrs	r3, r3, #4
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	490a      	ldr	r1, [pc, #40]	; (800298c <HAL_RCC_ClockConfig+0x314>)
 8002964:	5ccb      	ldrb	r3, [r1, r3]
 8002966:	fa22 f303 	lsr.w	r3, r2, r3
 800296a:	4a09      	ldr	r2, [pc, #36]	; (8002990 <HAL_RCC_ClockConfig+0x318>)
 800296c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800296e:	4b09      	ldr	r3, [pc, #36]	; (8002994 <HAL_RCC_ClockConfig+0x31c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f7fd ffd2 	bl	800091c <HAL_InitTick>

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	08003290 	.word	0x08003290
 8002988:	40021000 	.word	0x40021000
 800298c:	080033e8 	.word	0x080033e8
 8002990:	20000000 	.word	0x20000000
 8002994:	20000004 	.word	0x20000004

08002998 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	2300      	movs	r3, #0
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	2300      	movs	r3, #0
 80029ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029b2:	4b1e      	ldr	r3, [pc, #120]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x94>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d002      	beq.n	80029c8 <HAL_RCC_GetSysClockFreq+0x30>
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d003      	beq.n	80029ce <HAL_RCC_GetSysClockFreq+0x36>
 80029c6:	e027      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029c8:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x98>)
 80029ca:	613b      	str	r3, [r7, #16]
      break;
 80029cc:	e027      	b.n	8002a1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	0c9b      	lsrs	r3, r3, #18
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	4a17      	ldr	r2, [pc, #92]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029d8:	5cd3      	ldrb	r3, [r2, r3]
 80029da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d010      	beq.n	8002a08 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029e6:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x94>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	0c5b      	lsrs	r3, r3, #17
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	4a11      	ldr	r2, [pc, #68]	; (8002a38 <HAL_RCC_GetSysClockFreq+0xa0>)
 80029f2:	5cd3      	ldrb	r3, [r2, r3]
 80029f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a0d      	ldr	r2, [pc, #52]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x98>)
 80029fa:	fb03 f202 	mul.w	r2, r3, r2
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	e004      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a0c      	ldr	r2, [pc, #48]	; (8002a3c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a0c:	fb02 f303 	mul.w	r3, r2, r3
 8002a10:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	613b      	str	r3, [r7, #16]
      break;
 8002a16:	e002      	b.n	8002a1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a18:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a1a:	613b      	str	r3, [r7, #16]
      break;
 8002a1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a1e:	693b      	ldr	r3, [r7, #16]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	371c      	adds	r7, #28
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	007a1200 	.word	0x007a1200
 8002a34:	08003400 	.word	0x08003400
 8002a38:	08003410 	.word	0x08003410
 8002a3c:	003d0900 	.word	0x003d0900

08002a40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a44:	4b02      	ldr	r3, [pc, #8]	; (8002a50 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a46:	681b      	ldr	r3, [r3, #0]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr
 8002a50:	20000000 	.word	0x20000000

08002a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a58:	f7ff fff2 	bl	8002a40 <HAL_RCC_GetHCLKFreq>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	0a1b      	lsrs	r3, r3, #8
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	4903      	ldr	r1, [pc, #12]	; (8002a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a6a:	5ccb      	ldrb	r3, [r1, r3]
 8002a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40021000 	.word	0x40021000
 8002a78:	080033f8 	.word	0x080033f8

08002a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a80:	f7ff ffde 	bl	8002a40 <HAL_RCC_GetHCLKFreq>
 8002a84:	4602      	mov	r2, r0
 8002a86:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	0adb      	lsrs	r3, r3, #11
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	4903      	ldr	r1, [pc, #12]	; (8002aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a92:	5ccb      	ldrb	r3, [r1, r3]
 8002a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	080033f8 	.word	0x080033f8

08002aa4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002aac:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <RCC_Delay+0x34>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a0a      	ldr	r2, [pc, #40]	; (8002adc <RCC_Delay+0x38>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	0a5b      	lsrs	r3, r3, #9
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	fb02 f303 	mul.w	r3, r2, r3
 8002abe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ac0:	bf00      	nop
  }
  while (Delay --);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1e5a      	subs	r2, r3, #1
 8002ac6:	60fa      	str	r2, [r7, #12]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1f9      	bne.n	8002ac0 <RCC_Delay+0x1c>
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr
 8002ad8:	20000000 	.word	0x20000000
 8002adc:	10624dd3 	.word	0x10624dd3

08002ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10f      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d109      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0310 	and.w	r3, r3, #16
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d103      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8002b14:	216a      	movs	r1, #106	; 0x6a
 8002b16:	4873      	ldr	r0, [pc, #460]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002b18:	f7fd fde3 	bl	80006e2 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 8095 	beq.w	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d012      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b3e:	d00d      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b48:	d008      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b52:	d003      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b54:	2172      	movs	r1, #114	; 0x72
 8002b56:	4863      	ldr	r0, [pc, #396]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002b58:	f7fd fdc3 	bl	80006e2 <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b5c:	4b62      	ldr	r3, [pc, #392]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10d      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b68:	4b5f      	ldr	r3, [pc, #380]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	4a5e      	ldr	r2, [pc, #376]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b72:	61d3      	str	r3, [r2, #28]
 8002b74:	4b5c      	ldr	r3, [pc, #368]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7c:	60bb      	str	r3, [r7, #8]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b80:	2301      	movs	r3, #1
 8002b82:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b84:	4b59      	ldr	r3, [pc, #356]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d118      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b90:	4b56      	ldr	r3, [pc, #344]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a55      	ldr	r2, [pc, #340]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b9c:	f7fd ff00 	bl	80009a0 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba4:	f7fd fefc 	bl	80009a0 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b64      	cmp	r3, #100	; 0x64
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e092      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb6:	4b4d      	ldr	r3, [pc, #308]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bc2:	4b49      	ldr	r3, [pc, #292]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d02e      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d027      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002be0:	4b41      	ldr	r3, [pc, #260]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002be8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bea:	4b41      	ldr	r3, [pc, #260]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bf0:	4b3f      	ldr	r3, [pc, #252]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bf6:	4a3c      	ldr	r2, [pc, #240]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d014      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c06:	f7fd fecb 	bl	80009a0 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0c:	e00a      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0e:	f7fd fec7 	bl	80009a0 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e05b      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c24:	4b30      	ldr	r3, [pc, #192]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0ee      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c30:	4b2d      	ldr	r3, [pc, #180]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	492a      	ldr	r1, [pc, #168]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c42:	7dfb      	ldrb	r3, [r7, #23]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d105      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c48:	4b27      	ldr	r3, [pc, #156]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	4a26      	ldr	r2, [pc, #152]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d01f      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d012      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c70:	d00d      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c7a:	d008      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002c84:	d003      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8002c86:	21b7      	movs	r1, #183	; 0xb7
 8002c88:	4816      	ldr	r0, [pc, #88]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002c8a:	f7fd fd2a 	bl	80006e2 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c8e:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	4913      	ldr	r1, [pc, #76]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d016      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cb4:	d008      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d004      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002cbe:	f240 1113 	movw	r1, #275	; 0x113
 8002cc2:	4808      	ldr	r0, [pc, #32]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8002cc4:	f7fd fd0d 	bl	80006e2 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cc8:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4904      	ldr	r1, [pc, #16]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	08003300 	.word	0x08003300
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40007000 	.word	0x40007000
 8002cf0:	42420440 	.word	0x42420440

08002cf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e095      	b.n	8002e32 <HAL_UART_Init+0x13e>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d02c      	beq.n	8002d68 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a4a      	ldr	r2, [pc, #296]	; (8002e3c <HAL_UART_Init+0x148>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d00e      	beq.n	8002d36 <HAL_UART_Init+0x42>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a48      	ldr	r2, [pc, #288]	; (8002e40 <HAL_UART_Init+0x14c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d009      	beq.n	8002d36 <HAL_UART_Init+0x42>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a47      	ldr	r2, [pc, #284]	; (8002e44 <HAL_UART_Init+0x150>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d004      	beq.n	8002d36 <HAL_UART_Init+0x42>
 8002d2c:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8002d30:	4845      	ldr	r0, [pc, #276]	; (8002e48 <HAL_UART_Init+0x154>)
 8002d32:	f7fd fcd6 	bl	80006e2 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d028      	beq.n	8002d90 <HAL_UART_Init+0x9c>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d46:	d023      	beq.n	8002d90 <HAL_UART_Init+0x9c>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d50:	d01e      	beq.n	8002d90 <HAL_UART_Init+0x9c>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d5a:	d019      	beq.n	8002d90 <HAL_UART_Init+0x9c>
 8002d5c:	f240 116f 	movw	r1, #367	; 0x16f
 8002d60:	4839      	ldr	r0, [pc, #228]	; (8002e48 <HAL_UART_Init+0x154>)
 8002d62:	f7fd fcbe 	bl	80006e2 <assert_failed>
 8002d66:	e013      	b.n	8002d90 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a33      	ldr	r2, [pc, #204]	; (8002e3c <HAL_UART_Init+0x148>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d00e      	beq.n	8002d90 <HAL_UART_Init+0x9c>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a32      	ldr	r2, [pc, #200]	; (8002e40 <HAL_UART_Init+0x14c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d009      	beq.n	8002d90 <HAL_UART_Init+0x9c>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a30      	ldr	r2, [pc, #192]	; (8002e44 <HAL_UART_Init+0x150>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d004      	beq.n	8002d90 <HAL_UART_Init+0x9c>
 8002d86:	f240 1173 	movw	r1, #371	; 0x173
 8002d8a:	482f      	ldr	r0, [pc, #188]	; (8002e48 <HAL_UART_Init+0x154>)
 8002d8c:	f7fd fca9 	bl	80006e2 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d009      	beq.n	8002dac <HAL_UART_Init+0xb8>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da0:	d004      	beq.n	8002dac <HAL_UART_Init+0xb8>
 8002da2:	f240 1175 	movw	r1, #373	; 0x175
 8002da6:	4828      	ldr	r0, [pc, #160]	; (8002e48 <HAL_UART_Init+0x154>)
 8002da8:	f7fd fc9b 	bl	80006e2 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d106      	bne.n	8002dc6 <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7fd fd23 	bl	800080c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2224      	movs	r2, #36	; 0x24
 8002dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ddc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f834 	bl	8002e4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691a      	ldr	r2, [r3, #16]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002df2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	695a      	ldr	r2, [r3, #20]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e02:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e12:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2220      	movs	r2, #32
 8002e26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40013800 	.word	0x40013800
 8002e40:	40004400 	.word	0x40004400
 8002e44:	40004800 	.word	0x40004800
 8002e48:	08003374 	.word	0x08003374

08002e4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4a5f      	ldr	r2, [pc, #380]	; (8002fd8 <UART_SetConfig+0x18c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d904      	bls.n	8002e68 <UART_SetConfig+0x1c>
 8002e5e:	f640 6166 	movw	r1, #3686	; 0xe66
 8002e62:	485e      	ldr	r0, [pc, #376]	; (8002fdc <UART_SetConfig+0x190>)
 8002e64:	f7fd fc3d 	bl	80006e2 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d009      	beq.n	8002e84 <UART_SetConfig+0x38>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e78:	d004      	beq.n	8002e84 <UART_SetConfig+0x38>
 8002e7a:	f640 6167 	movw	r1, #3687	; 0xe67
 8002e7e:	4857      	ldr	r0, [pc, #348]	; (8002fdc <UART_SetConfig+0x190>)
 8002e80:	f7fd fc2f 	bl	80006e2 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00e      	beq.n	8002eaa <UART_SetConfig+0x5e>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e94:	d009      	beq.n	8002eaa <UART_SetConfig+0x5e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002e9e:	d004      	beq.n	8002eaa <UART_SetConfig+0x5e>
 8002ea0:	f640 6168 	movw	r1, #3688	; 0xe68
 8002ea4:	484d      	ldr	r0, [pc, #308]	; (8002fdc <UART_SetConfig+0x190>)
 8002ea6:	f7fd fc1c 	bl	80006e2 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d103      	bne.n	8002ec0 <UART_SetConfig+0x74>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d104      	bne.n	8002eca <UART_SetConfig+0x7e>
 8002ec0:	f640 6169 	movw	r1, #3689	; 0xe69
 8002ec4:	4845      	ldr	r0, [pc, #276]	; (8002fdc <UART_SetConfig+0x190>)
 8002ec6:	f7fd fc0c 	bl	80006e2 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002efc:	f023 030c 	bic.w	r3, r3, #12
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	68b9      	ldr	r1, [r7, #8]
 8002f06:	430b      	orrs	r3, r1
 8002f08:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699a      	ldr	r2, [r3, #24]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a2e      	ldr	r2, [pc, #184]	; (8002fe0 <UART_SetConfig+0x194>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d103      	bne.n	8002f32 <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f2a:	f7ff fda7 	bl	8002a7c <HAL_RCC_GetPCLK2Freq>
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	e002      	b.n	8002f38 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f32:	f7ff fd8f 	bl	8002a54 <HAL_RCC_GetPCLK1Freq>
 8002f36:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	009a      	lsls	r2, r3, #2
 8002f42:	441a      	add	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4e:	4a25      	ldr	r2, [pc, #148]	; (8002fe4 <UART_SetConfig+0x198>)
 8002f50:	fba2 2303 	umull	r2, r3, r2, r3
 8002f54:	095b      	lsrs	r3, r3, #5
 8002f56:	0119      	lsls	r1, r3, #4
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	009a      	lsls	r2, r3, #2
 8002f62:	441a      	add	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f6e:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <UART_SetConfig+0x198>)
 8002f70:	fba3 0302 	umull	r0, r3, r3, r2
 8002f74:	095b      	lsrs	r3, r3, #5
 8002f76:	2064      	movs	r0, #100	; 0x64
 8002f78:	fb00 f303 	mul.w	r3, r0, r3
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	3332      	adds	r3, #50	; 0x32
 8002f82:	4a18      	ldr	r2, [pc, #96]	; (8002fe4 <UART_SetConfig+0x198>)
 8002f84:	fba2 2303 	umull	r2, r3, r2, r3
 8002f88:	095b      	lsrs	r3, r3, #5
 8002f8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f8e:	4419      	add	r1, r3
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	4613      	mov	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	009a      	lsls	r2, r3, #2
 8002f9a:	441a      	add	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fa6:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <UART_SetConfig+0x198>)
 8002fa8:	fba3 0302 	umull	r0, r3, r3, r2
 8002fac:	095b      	lsrs	r3, r3, #5
 8002fae:	2064      	movs	r0, #100	; 0x64
 8002fb0:	fb00 f303 	mul.w	r3, r0, r3
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	3332      	adds	r3, #50	; 0x32
 8002fba:	4a0a      	ldr	r2, [pc, #40]	; (8002fe4 <UART_SetConfig+0x198>)
 8002fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc0:	095b      	lsrs	r3, r3, #5
 8002fc2:	f003 020f 	and.w	r2, r3, #15
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	440a      	add	r2, r1
 8002fcc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002fce:	bf00      	nop
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	0044aa20 	.word	0x0044aa20
 8002fdc:	08003374 	.word	0x08003374
 8002fe0:	40013800 	.word	0x40013800
 8002fe4:	51eb851f 	.word	0x51eb851f

08002fe8 <memset>:
 8002fe8:	4603      	mov	r3, r0
 8002fea:	4402      	add	r2, r0
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d100      	bne.n	8002ff2 <memset+0xa>
 8002ff0:	4770      	bx	lr
 8002ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ff6:	e7f9      	b.n	8002fec <memset+0x4>

08002ff8 <__libc_init_array>:
 8002ff8:	b570      	push	{r4, r5, r6, lr}
 8002ffa:	2600      	movs	r6, #0
 8002ffc:	4d0c      	ldr	r5, [pc, #48]	; (8003030 <__libc_init_array+0x38>)
 8002ffe:	4c0d      	ldr	r4, [pc, #52]	; (8003034 <__libc_init_array+0x3c>)
 8003000:	1b64      	subs	r4, r4, r5
 8003002:	10a4      	asrs	r4, r4, #2
 8003004:	42a6      	cmp	r6, r4
 8003006:	d109      	bne.n	800301c <__libc_init_array+0x24>
 8003008:	f000 f81a 	bl	8003040 <_init>
 800300c:	2600      	movs	r6, #0
 800300e:	4d0a      	ldr	r5, [pc, #40]	; (8003038 <__libc_init_array+0x40>)
 8003010:	4c0a      	ldr	r4, [pc, #40]	; (800303c <__libc_init_array+0x44>)
 8003012:	1b64      	subs	r4, r4, r5
 8003014:	10a4      	asrs	r4, r4, #2
 8003016:	42a6      	cmp	r6, r4
 8003018:	d105      	bne.n	8003026 <__libc_init_array+0x2e>
 800301a:	bd70      	pop	{r4, r5, r6, pc}
 800301c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003020:	4798      	blx	r3
 8003022:	3601      	adds	r6, #1
 8003024:	e7ee      	b.n	8003004 <__libc_init_array+0xc>
 8003026:	f855 3b04 	ldr.w	r3, [r5], #4
 800302a:	4798      	blx	r3
 800302c:	3601      	adds	r6, #1
 800302e:	e7f2      	b.n	8003016 <__libc_init_array+0x1e>
 8003030:	08003414 	.word	0x08003414
 8003034:	08003414 	.word	0x08003414
 8003038:	08003414 	.word	0x08003414
 800303c:	08003418 	.word	0x08003418

08003040 <_init>:
 8003040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003042:	bf00      	nop
 8003044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003046:	bc08      	pop	{r3}
 8003048:	469e      	mov	lr, r3
 800304a:	4770      	bx	lr

0800304c <_fini>:
 800304c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304e:	bf00      	nop
 8003050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003052:	bc08      	pop	{r3}
 8003054:	469e      	mov	lr, r3
 8003056:	4770      	bx	lr
