
stm32f103c8t6_lcd_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  080028f0  080028f0  000128f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b44  08002b44  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b44  08002b44  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b44  08002b44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b44  08002b44  00012b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b48  08002b48  00012b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  2000000c  08002b58  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08002b58  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008959  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ae3  00000000  00000000  000289d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a0  00000000  00000000  0002a4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000694  00000000  00000000  0002ad58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016627  00000000  00000000  0002b3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bb82  00000000  00000000  00041a13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083c1a  00000000  00000000  0004d595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002150  00000000  00000000  000d11b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000d3300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080028d8 	.word	0x080028d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080028d8 	.word	0x080028d8

0800014c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b3d      	ldr	r3, [pc, #244]	; (8000258 <MX_GPIO_Init+0x10c>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a3c      	ldr	r2, [pc, #240]	; (8000258 <MX_GPIO_Init+0x10c>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b3a      	ldr	r3, [pc, #232]	; (8000258 <MX_GPIO_Init+0x10c>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b37      	ldr	r3, [pc, #220]	; (8000258 <MX_GPIO_Init+0x10c>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a36      	ldr	r2, [pc, #216]	; (8000258 <MX_GPIO_Init+0x10c>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b34      	ldr	r3, [pc, #208]	; (8000258 <MX_GPIO_Init+0x10c>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b31      	ldr	r3, [pc, #196]	; (8000258 <MX_GPIO_Init+0x10c>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a30      	ldr	r2, [pc, #192]	; (8000258 <MX_GPIO_Init+0x10c>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b2e      	ldr	r3, [pc, #184]	; (8000258 <MX_GPIO_Init+0x10c>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b2b      	ldr	r3, [pc, #172]	; (8000258 <MX_GPIO_Init+0x10c>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a2a      	ldr	r2, [pc, #168]	; (8000258 <MX_GPIO_Init+0x10c>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b28      	ldr	r3, [pc, #160]	; (8000258 <MX_GPIO_Init+0x10c>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_RST_Pin|SPI1_DC_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	2158      	movs	r1, #88	; 0x58
 80001c4:	4825      	ldr	r0, [pc, #148]	; (800025c <MX_GPIO_Init+0x110>)
 80001c6:	f001 f895 	bl	80012f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IPS_BLK_GPIO_Port, IPS_BLK_Pin, GPIO_PIN_RESET);
 80001ca:	2200      	movs	r2, #0
 80001cc:	2101      	movs	r1, #1
 80001ce:	4824      	ldr	r0, [pc, #144]	; (8000260 <MX_GPIO_Init+0x114>)
 80001d0:	f001 f890 	bl	80012f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80001d4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80001d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80001da:	2303      	movs	r3, #3
 80001dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001de:	f107 0310 	add.w	r3, r7, #16
 80001e2:	4619      	mov	r1, r3
 80001e4:	481f      	ldr	r0, [pc, #124]	; (8000264 <MX_GPIO_Init+0x118>)
 80001e6:	f000 fe17 	bl	8000e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA8
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_8
 80001ea:	f649 1307 	movw	r3, #39175	; 0x9907
 80001ee:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80001f0:	2303      	movs	r3, #3
 80001f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001f4:	f107 0310 	add.w	r3, r7, #16
 80001f8:	4619      	mov	r1, r3
 80001fa:	4818      	ldr	r0, [pc, #96]	; (800025c <MX_GPIO_Init+0x110>)
 80001fc:	f000 fe0c 	bl	8000e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_RST_Pin|SPI1_DC_Pin|SPI1_CS_Pin;
 8000200:	2358      	movs	r3, #88	; 0x58
 8000202:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000204:	2301      	movs	r3, #1
 8000206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000208:	2300      	movs	r3, #0
 800020a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800020c:	2302      	movs	r3, #2
 800020e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000210:	f107 0310 	add.w	r3, r7, #16
 8000214:	4619      	mov	r1, r3
 8000216:	4811      	ldr	r0, [pc, #68]	; (800025c <MX_GPIO_Init+0x110>)
 8000218:	f000 fdfe 	bl	8000e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IPS_BLK_Pin;
 800021c:	2301      	movs	r3, #1
 800021e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000220:	2301      	movs	r3, #1
 8000222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000224:	2300      	movs	r3, #0
 8000226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000228:	2302      	movs	r3, #2
 800022a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IPS_BLK_GPIO_Port, &GPIO_InitStruct);
 800022c:	f107 0310 	add.w	r3, r7, #16
 8000230:	4619      	mov	r1, r3
 8000232:	480b      	ldr	r0, [pc, #44]	; (8000260 <MX_GPIO_Init+0x114>)
 8000234:	f000 fdf0 	bl	8000e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8000238:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800023c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800023e:	2303      	movs	r3, #3
 8000240:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000242:	f107 0310 	add.w	r3, r7, #16
 8000246:	4619      	mov	r1, r3
 8000248:	4805      	ldr	r0, [pc, #20]	; (8000260 <MX_GPIO_Init+0x114>)
 800024a:	f000 fde5 	bl	8000e18 <HAL_GPIO_Init>

}
 800024e:	bf00      	nop
 8000250:	3720      	adds	r7, #32
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	40021000 	.word	0x40021000
 800025c:	40010800 	.word	0x40010800
 8000260:	40010c00 	.word	0x40010c00
 8000264:	40011000 	.word	0x40011000

08000268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026c:	f000 fc46 	bl	8000afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000270:	f000 f820 	bl	80002b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000274:	f7ff ff6a 	bl	800014c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000278:	f000 f870 	bl	800035c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800027c:	f000 fba2 	bl	80009c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 8000280:	f000 f990 	bl	80005a4 <ST7735_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  ST7735_FillScreen(ST7735_RED);
 8000284:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000288:	f000 fb2a 	bl	80008e0 <ST7735_FillScreen>
	  HAL_Delay(500);
 800028c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000290:	f000 fc96 	bl	8000bc0 <HAL_Delay>
	  ST7735_FillScreen(ST7735_GREEN);
 8000294:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000298:	f000 fb22 	bl	80008e0 <ST7735_FillScreen>
	  HAL_Delay(500);
 800029c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002a0:	f000 fc8e 	bl	8000bc0 <HAL_Delay>
	  ST7735_FillScreen(ST7735_BLUE);
 80002a4:	201f      	movs	r0, #31
 80002a6:	f000 fb1b 	bl	80008e0 <ST7735_FillScreen>
	  HAL_Delay(500);
 80002aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002ae:	f000 fc87 	bl	8000bc0 <HAL_Delay>
	  ST7735_FillScreen(ST7735_RED);
 80002b2:	e7e7      	b.n	8000284 <main+0x1c>

080002b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b090      	sub	sp, #64	; 0x40
 80002b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ba:	f107 0318 	add.w	r3, r7, #24
 80002be:	2228      	movs	r2, #40	; 0x28
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f002 fadc 	bl	8002880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]
 80002d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002d6:	2301      	movs	r3, #1
 80002d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e4:	2301      	movs	r3, #1
 80002e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e8:	2302      	movs	r3, #2
 80002ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002f2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f8:	f107 0318 	add.w	r3, r7, #24
 80002fc:	4618      	mov	r0, r3
 80002fe:	f001 f82b 	bl	8001358 <HAL_RCC_OscConfig>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000308:	f000 f819 	bl	800033e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030c:	230f      	movs	r3, #15
 800030e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000310:	2302      	movs	r3, #2
 8000312:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800031c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2102      	movs	r1, #2
 8000326:	4618      	mov	r0, r3
 8000328:	f001 fb84 	bl	8001a34 <HAL_RCC_ClockConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000332:	f000 f804 	bl	800033e <Error_Handler>
  }
}
 8000336:	bf00      	nop
 8000338:	3740      	adds	r7, #64	; 0x40
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}

0800033e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000342:	b672      	cpsid	i
}
 8000344:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000346:	e7fe      	b.n	8000346 <Error_Handler+0x8>

08000348 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
 8000350:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000352:	bf00      	nop
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr

0800035c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000360:	4b17      	ldr	r3, [pc, #92]	; (80003c0 <MX_SPI1_Init+0x64>)
 8000362:	4a18      	ldr	r2, [pc, #96]	; (80003c4 <MX_SPI1_Init+0x68>)
 8000364:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000366:	4b16      	ldr	r3, [pc, #88]	; (80003c0 <MX_SPI1_Init+0x64>)
 8000368:	f44f 7282 	mov.w	r2, #260	; 0x104
 800036c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800036e:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <MX_SPI1_Init+0x64>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000374:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <MX_SPI1_Init+0x64>)
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800037a:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <MX_SPI1_Init+0x64>)
 800037c:	2200      	movs	r2, #0
 800037e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000380:	4b0f      	ldr	r3, [pc, #60]	; (80003c0 <MX_SPI1_Init+0x64>)
 8000382:	2200      	movs	r2, #0
 8000384:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000386:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <MX_SPI1_Init+0x64>)
 8000388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800038c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800038e:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <MX_SPI1_Init+0x64>)
 8000390:	2210      	movs	r2, #16
 8000392:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000394:	4b0a      	ldr	r3, [pc, #40]	; (80003c0 <MX_SPI1_Init+0x64>)
 8000396:	2200      	movs	r2, #0
 8000398:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800039a:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <MX_SPI1_Init+0x64>)
 800039c:	2200      	movs	r2, #0
 800039e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003a0:	4b07      	ldr	r3, [pc, #28]	; (80003c0 <MX_SPI1_Init+0x64>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003a6:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <MX_SPI1_Init+0x64>)
 80003a8:	220a      	movs	r2, #10
 80003aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003ac:	4804      	ldr	r0, [pc, #16]	; (80003c0 <MX_SPI1_Init+0x64>)
 80003ae:	f001 fd75 	bl	8001e9c <HAL_SPI_Init>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80003b8:	f7ff ffc1 	bl	800033e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	20000028 	.word	0x20000028
 80003c4:	40013000 	.word	0x40013000

080003c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b088      	sub	sp, #32
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d0:	f107 0310 	add.w	r3, r7, #16
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]
 80003dc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4a15      	ldr	r2, [pc, #84]	; (8000438 <HAL_SPI_MspInit+0x70>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d123      	bne.n	8000430 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80003e8:	4b14      	ldr	r3, [pc, #80]	; (800043c <HAL_SPI_MspInit+0x74>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a13      	ldr	r2, [pc, #76]	; (800043c <HAL_SPI_MspInit+0x74>)
 80003ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b11      	ldr	r3, [pc, #68]	; (800043c <HAL_SPI_MspInit+0x74>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003fc:	60fb      	str	r3, [r7, #12]
 80003fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000400:	4b0e      	ldr	r3, [pc, #56]	; (800043c <HAL_SPI_MspInit+0x74>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a0d      	ldr	r2, [pc, #52]	; (800043c <HAL_SPI_MspInit+0x74>)
 8000406:	f043 0304 	orr.w	r3, r3, #4
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b0b      	ldr	r3, [pc, #44]	; (800043c <HAL_SPI_MspInit+0x74>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0304 	and.w	r3, r3, #4
 8000414:	60bb      	str	r3, [r7, #8]
 8000416:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000418:	23a0      	movs	r3, #160	; 0xa0
 800041a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800041c:	2302      	movs	r3, #2
 800041e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000420:	2303      	movs	r3, #3
 8000422:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000424:	f107 0310 	add.w	r3, r7, #16
 8000428:	4619      	mov	r1, r3
 800042a:	4805      	ldr	r0, [pc, #20]	; (8000440 <HAL_SPI_MspInit+0x78>)
 800042c:	f000 fcf4 	bl	8000e18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000430:	bf00      	nop
 8000432:	3720      	adds	r7, #32
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	40013000 	.word	0x40013000
 800043c:	40021000 	.word	0x40021000
 8000440:	40010800 	.word	0x40010800

08000444 <ST7735_Reset>:
#define ST7735_MADCTL_MX  0x40
#define ST7735_MADCTL_MY  0x80
#define ST7735_MADCTL_MV  0x20

void ST7735_Reset(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(ST7735_RST_GPIO_Port, ST7735_RST_Pin, GPIO_PIN_RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	2108      	movs	r1, #8
 800044c:	4807      	ldr	r0, [pc, #28]	; (800046c <ST7735_Reset+0x28>)
 800044e:	f000 ff51 	bl	80012f4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000452:	2064      	movs	r0, #100	; 0x64
 8000454:	f000 fbb4 	bl	8000bc0 <HAL_Delay>
  HAL_GPIO_WritePin(ST7735_RST_GPIO_Port, ST7735_RST_Pin, GPIO_PIN_SET);
 8000458:	2201      	movs	r2, #1
 800045a:	2108      	movs	r1, #8
 800045c:	4803      	ldr	r0, [pc, #12]	; (800046c <ST7735_Reset+0x28>)
 800045e:	f000 ff49 	bl	80012f4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000462:	2064      	movs	r0, #100	; 0x64
 8000464:	f000 fbac 	bl	8000bc0 <HAL_Delay>
}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40010800 	.word	0x40010800

08000470 <ST7735_WriteCommand>:

void ST7735_WriteCommand(uint8_t cmd)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800047a:	2200      	movs	r2, #0
 800047c:	2110      	movs	r1, #16
 800047e:	480c      	ldr	r0, [pc, #48]	; (80004b0 <ST7735_WriteCommand+0x40>)
 8000480:	f000 ff38 	bl	80012f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000484:	2200      	movs	r2, #0
 8000486:	2140      	movs	r1, #64	; 0x40
 8000488:	4809      	ldr	r0, [pc, #36]	; (80004b0 <ST7735_WriteCommand+0x40>)
 800048a:	f000 ff33 	bl	80012f4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&ST7735_SPI_INSTANCE, &cmd, 1, HAL_MAX_DELAY);
 800048e:	1df9      	adds	r1, r7, #7
 8000490:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000494:	2201      	movs	r2, #1
 8000496:	4807      	ldr	r0, [pc, #28]	; (80004b4 <ST7735_WriteCommand+0x44>)
 8000498:	f001 fe7e 	bl	8002198 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 800049c:	2201      	movs	r2, #1
 800049e:	2140      	movs	r1, #64	; 0x40
 80004a0:	4803      	ldr	r0, [pc, #12]	; (80004b0 <ST7735_WriteCommand+0x40>)
 80004a2:	f000 ff27 	bl	80012f4 <HAL_GPIO_WritePin>
}
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40010800 	.word	0x40010800
 80004b4:	20000028 	.word	0x20000028

080004b8 <ST7735_WriteByte>:

void ST7735_WriteByte(uint8_t data)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80004c2:	2201      	movs	r2, #1
 80004c4:	2110      	movs	r1, #16
 80004c6:	480c      	ldr	r0, [pc, #48]	; (80004f8 <ST7735_WriteByte+0x40>)
 80004c8:	f000 ff14 	bl	80012f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	2140      	movs	r1, #64	; 0x40
 80004d0:	4809      	ldr	r0, [pc, #36]	; (80004f8 <ST7735_WriteByte+0x40>)
 80004d2:	f000 ff0f 	bl	80012f4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&ST7735_SPI_INSTANCE, &data, 1, HAL_MAX_DELAY);
 80004d6:	1df9      	adds	r1, r7, #7
 80004d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004dc:	2201      	movs	r2, #1
 80004de:	4807      	ldr	r0, [pc, #28]	; (80004fc <ST7735_WriteByte+0x44>)
 80004e0:	f001 fe5a 	bl	8002198 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80004e4:	2201      	movs	r2, #1
 80004e6:	2140      	movs	r1, #64	; 0x40
 80004e8:	4803      	ldr	r0, [pc, #12]	; (80004f8 <ST7735_WriteByte+0x40>)
 80004ea:	f000 ff03 	bl	80012f4 <HAL_GPIO_WritePin>
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40010800 	.word	0x40010800
 80004fc:	20000028 	.word	0x20000028

08000500 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t *data, size_t data_size)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
  HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800050a:	2201      	movs	r2, #1
 800050c:	2110      	movs	r1, #16
 800050e:	480c      	ldr	r0, [pc, #48]	; (8000540 <ST7735_WriteData+0x40>)
 8000510:	f000 fef0 	bl	80012f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	2140      	movs	r1, #64	; 0x40
 8000518:	4809      	ldr	r0, [pc, #36]	; (8000540 <ST7735_WriteData+0x40>)
 800051a:	f000 feeb 	bl	80012f4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&ST7735_SPI_INSTANCE, data, data_size, HAL_MAX_DELAY);
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	b29a      	uxth	r2, r3
 8000522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000526:	6879      	ldr	r1, [r7, #4]
 8000528:	4806      	ldr	r0, [pc, #24]	; (8000544 <ST7735_WriteData+0x44>)
 800052a:	f001 fe35 	bl	8002198 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 800052e:	2201      	movs	r2, #1
 8000530:	2140      	movs	r1, #64	; 0x40
 8000532:	4803      	ldr	r0, [pc, #12]	; (8000540 <ST7735_WriteData+0x40>)
 8000534:	f000 fede 	bl	80012f4 <HAL_GPIO_WritePin>
}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40010800 	.word	0x40010800
 8000544:	20000028 	.word	0x20000028

08000548 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t rotation)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]
  uint8_t madctl = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	73fb      	strb	r3, [r7, #15]

  switch (rotation)
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	2b03      	cmp	r3, #3
 800055a:	d817      	bhi.n	800058c <ST7735_SetRotation+0x44>
 800055c:	a201      	add	r2, pc, #4	; (adr r2, 8000564 <ST7735_SetRotation+0x1c>)
 800055e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000562:	bf00      	nop
 8000564:	08000575 	.word	0x08000575
 8000568:	0800057b 	.word	0x0800057b
 800056c:	08000581 	.word	0x08000581
 8000570:	08000587 	.word	0x08000587
  {
    case 0:
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_MODE;
 8000574:	23c0      	movs	r3, #192	; 0xc0
 8000576:	73fb      	strb	r3, [r7, #15]
      break;
 8000578:	e008      	b.n	800058c <ST7735_SetRotation+0x44>
    case 1:
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_MODE;
 800057a:	23a0      	movs	r3, #160	; 0xa0
 800057c:	73fb      	strb	r3, [r7, #15]
      break;
 800057e:	e005      	b.n	800058c <ST7735_SetRotation+0x44>
    case 2:
      madctl = ST7735_MADCTL_MODE;
 8000580:	2300      	movs	r3, #0
 8000582:	73fb      	strb	r3, [r7, #15]
      break;
 8000584:	e002      	b.n	800058c <ST7735_SetRotation+0x44>
    case 3:
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_MODE;
 8000586:	2360      	movs	r3, #96	; 0x60
 8000588:	73fb      	strb	r3, [r7, #15]
      break;
 800058a:	bf00      	nop
  }

  ST7735_WriteCommand(ST7735_MADCTL);
 800058c:	2036      	movs	r0, #54	; 0x36
 800058e:	f7ff ff6f 	bl	8000470 <ST7735_WriteCommand>
  ST7735_WriteByte(madctl);
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff ff8f 	bl	80004b8 <ST7735_WriteByte>
}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop

080005a4 <ST7735_Init>:

void ST7735_Init(void) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  // Initialize the display
  ST7735_Reset();
 80005a8:	f7ff ff4c 	bl	8000444 <ST7735_Reset>
  ST7735_WriteCommand(ST7735_SLPOUT);
 80005ac:	2011      	movs	r0, #17
 80005ae:	f7ff ff5f 	bl	8000470 <ST7735_WriteCommand>
  HAL_Delay(120);
 80005b2:	2078      	movs	r0, #120	; 0x78
 80005b4:	f000 fb04 	bl	8000bc0 <HAL_Delay>
  ST7735_WriteCommand(ST7735_FRMCTR1);
 80005b8:	20b1      	movs	r0, #177	; 0xb1
 80005ba:	f7ff ff59 	bl	8000470 <ST7735_WriteCommand>
  ST7735_WriteByte(0x01);
 80005be:	2001      	movs	r0, #1
 80005c0:	f7ff ff7a 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x2C);
 80005c4:	202c      	movs	r0, #44	; 0x2c
 80005c6:	f7ff ff77 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x2D);
 80005ca:	202d      	movs	r0, #45	; 0x2d
 80005cc:	f7ff ff74 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_FRMCTR2);
 80005d0:	20b2      	movs	r0, #178	; 0xb2
 80005d2:	f7ff ff4d 	bl	8000470 <ST7735_WriteCommand>
  ST7735_WriteByte(0x01);
 80005d6:	2001      	movs	r0, #1
 80005d8:	f7ff ff6e 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x2C);
 80005dc:	202c      	movs	r0, #44	; 0x2c
 80005de:	f7ff ff6b 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x2D);
 80005e2:	202d      	movs	r0, #45	; 0x2d
 80005e4:	f7ff ff68 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_FRMCTR3);
 80005e8:	20b3      	movs	r0, #179	; 0xb3
 80005ea:	f7ff ff41 	bl	8000470 <ST7735_WriteCommand>
  ST7735_WriteByte(0x01);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f7ff ff62 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x2C);
 80005f4:	202c      	movs	r0, #44	; 0x2c
 80005f6:	f7ff ff5f 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x2D);
 80005fa:	202d      	movs	r0, #45	; 0x2d
 80005fc:	f7ff ff5c 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x01);
 8000600:	2001      	movs	r0, #1
 8000602:	f7ff ff59 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x2C);
 8000606:	202c      	movs	r0, #44	; 0x2c
 8000608:	f7ff ff56 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x2D);
 800060c:	202d      	movs	r0, #45	; 0x2d
 800060e:	f7ff ff53 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_INVCTR);
 8000612:	20b4      	movs	r0, #180	; 0xb4
 8000614:	f7ff ff2c 	bl	8000470 <ST7735_WriteCommand>
  ST7735_WriteByte(0x07);
 8000618:	2007      	movs	r0, #7
 800061a:	f7ff ff4d 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_PWCTR1);
 800061e:	20c0      	movs	r0, #192	; 0xc0
 8000620:	f7ff ff26 	bl	8000470 <ST7735_WriteCommand>
  ST7735_WriteByte(0xA2);
 8000624:	20a2      	movs	r0, #162	; 0xa2
 8000626:	f7ff ff47 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x02);
 800062a:	2002      	movs	r0, #2
 800062c:	f7ff ff44 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x84);
 8000630:	2084      	movs	r0, #132	; 0x84
 8000632:	f7ff ff41 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_PWCTR2);
 8000636:	20c1      	movs	r0, #193	; 0xc1
 8000638:	f7ff ff1a 	bl	8000470 <ST7735_WriteCommand>
  ST7735_WriteByte(0xC5);
 800063c:	20c5      	movs	r0, #197	; 0xc5
 800063e:	f7ff ff3b 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_PWCTR3);
 8000642:	20c2      	movs	r0, #194	; 0xc2
 8000644:	f7ff ff14 	bl	8000470 <ST7735_WriteCommand>
  ST7735_WriteByte(0x0A);
 8000648:	200a      	movs	r0, #10
 800064a:	f7ff ff35 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x00);
 800064e:	2000      	movs	r0, #0
 8000650:	f7ff ff32 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_PWCTR4);
 8000654:	20c3      	movs	r0, #195	; 0xc3
 8000656:	f7ff ff0b 	bl	8000470 <ST7735_WriteCommand>
  ST7735_WriteByte(0x8A);
 800065a:	208a      	movs	r0, #138	; 0x8a
 800065c:	f7ff ff2c 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x2A);
 8000660:	202a      	movs	r0, #42	; 0x2a
 8000662:	f7ff ff29 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_PWCTR5);
 8000666:	20c4      	movs	r0, #196	; 0xc4
 8000668:	f7ff ff02 	bl	8000470 <ST7735_WriteCommand>
  ST7735_WriteByte(0x8A);
 800066c:	208a      	movs	r0, #138	; 0x8a
 800066e:	f7ff ff23 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0xEE);
 8000672:	20ee      	movs	r0, #238	; 0xee
 8000674:	f7ff ff20 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_VMCTR1);
 8000678:	20c5      	movs	r0, #197	; 0xc5
 800067a:	f7ff fef9 	bl	8000470 <ST7735_WriteCommand>
  ST7735_WriteByte(0x0E);
 800067e:	200e      	movs	r0, #14
 8000680:	f7ff ff1a 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_INVERSE ? ST7735_INVON : ST7735_INVOFF);
 8000684:	2020      	movs	r0, #32
 8000686:	f7ff fef3 	bl	8000470 <ST7735_WriteCommand>
  ST7735_WriteCommand(ST7735_COLMOD);
 800068a:	203a      	movs	r0, #58	; 0x3a
 800068c:	f7ff fef0 	bl	8000470 <ST7735_WriteCommand>
  ST7735_WriteByte(0x05);
 8000690:	2005      	movs	r0, #5
 8000692:	f7ff ff11 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_CASET);
 8000696:	202a      	movs	r0, #42	; 0x2a
 8000698:	f7ff feea 	bl	8000470 <ST7735_WriteCommand>
  ST7735_WriteByte(0x00);
 800069c:	2000      	movs	r0, #0
 800069e:	f7ff ff0b 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x00);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f7ff ff08 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x00);
 80006a8:	2000      	movs	r0, #0
 80006aa:	f7ff ff05 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x7F);
 80006ae:	207f      	movs	r0, #127	; 0x7f
 80006b0:	f7ff ff02 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_RASET);
 80006b4:	202b      	movs	r0, #43	; 0x2b
 80006b6:	f7ff fedb 	bl	8000470 <ST7735_WriteCommand>
  ST7735_WriteByte(0x00);
 80006ba:	2000      	movs	r0, #0
 80006bc:	f7ff fefc 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x00);
 80006c0:	2000      	movs	r0, #0
 80006c2:	f7ff fef9 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x00);
 80006c6:	2000      	movs	r0, #0
 80006c8:	f7ff fef6 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x9F);
 80006cc:	209f      	movs	r0, #159	; 0x9f
 80006ce:	f7ff fef3 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_GMCTRP1);
 80006d2:	20e0      	movs	r0, #224	; 0xe0
 80006d4:	f7ff fecc 	bl	8000470 <ST7735_WriteCommand>
  ST7735_WriteByte(0x02);
 80006d8:	2002      	movs	r0, #2
 80006da:	f7ff feed 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x1C);
 80006de:	201c      	movs	r0, #28
 80006e0:	f7ff feea 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x07);
 80006e4:	2007      	movs	r0, #7
 80006e6:	f7ff fee7 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x12);
 80006ea:	2012      	movs	r0, #18
 80006ec:	f7ff fee4 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x37);
 80006f0:	2037      	movs	r0, #55	; 0x37
 80006f2:	f7ff fee1 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x32);
 80006f6:	2032      	movs	r0, #50	; 0x32
 80006f8:	f7ff fede 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x29);
 80006fc:	2029      	movs	r0, #41	; 0x29
 80006fe:	f7ff fedb 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x2D);
 8000702:	202d      	movs	r0, #45	; 0x2d
 8000704:	f7ff fed8 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x29);
 8000708:	2029      	movs	r0, #41	; 0x29
 800070a:	f7ff fed5 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x25);
 800070e:	2025      	movs	r0, #37	; 0x25
 8000710:	f7ff fed2 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x2B);
 8000714:	202b      	movs	r0, #43	; 0x2b
 8000716:	f7ff fecf 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x39);
 800071a:	2039      	movs	r0, #57	; 0x39
 800071c:	f7ff fecc 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x00);
 8000720:	2000      	movs	r0, #0
 8000722:	f7ff fec9 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x01);
 8000726:	2001      	movs	r0, #1
 8000728:	f7ff fec6 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x03);
 800072c:	2003      	movs	r0, #3
 800072e:	f7ff fec3 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x10);
 8000732:	2010      	movs	r0, #16
 8000734:	f7ff fec0 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_GMCTRN1);
 8000738:	20e1      	movs	r0, #225	; 0xe1
 800073a:	f7ff fe99 	bl	8000470 <ST7735_WriteCommand>
  ST7735_WriteByte(0x03);
 800073e:	2003      	movs	r0, #3
 8000740:	f7ff feba 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x1D);
 8000744:	201d      	movs	r0, #29
 8000746:	f7ff feb7 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x07);
 800074a:	2007      	movs	r0, #7
 800074c:	f7ff feb4 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x06);
 8000750:	2006      	movs	r0, #6
 8000752:	f7ff feb1 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x2E);
 8000756:	202e      	movs	r0, #46	; 0x2e
 8000758:	f7ff feae 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x2C);
 800075c:	202c      	movs	r0, #44	; 0x2c
 800075e:	f7ff feab 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x29);
 8000762:	2029      	movs	r0, #41	; 0x29
 8000764:	f7ff fea8 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x2D);
 8000768:	202d      	movs	r0, #45	; 0x2d
 800076a:	f7ff fea5 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x2E);
 800076e:	202e      	movs	r0, #46	; 0x2e
 8000770:	f7ff fea2 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x2E);
 8000774:	202e      	movs	r0, #46	; 0x2e
 8000776:	f7ff fe9f 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x37);
 800077a:	2037      	movs	r0, #55	; 0x37
 800077c:	f7ff fe9c 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x3F);
 8000780:	203f      	movs	r0, #63	; 0x3f
 8000782:	f7ff fe99 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x00);
 8000786:	2000      	movs	r0, #0
 8000788:	f7ff fe96 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x00);
 800078c:	2000      	movs	r0, #0
 800078e:	f7ff fe93 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x02);
 8000792:	2002      	movs	r0, #2
 8000794:	f7ff fe90 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteByte(0x10);
 8000798:	2010      	movs	r0, #16
 800079a:	f7ff fe8d 	bl	80004b8 <ST7735_WriteByte>
  ST7735_WriteCommand(ST7735_NORON);
 800079e:	2013      	movs	r0, #19
 80007a0:	f7ff fe66 	bl	8000470 <ST7735_WriteCommand>
  HAL_Delay(10);
 80007a4:	200a      	movs	r0, #10
 80007a6:	f000 fa0b 	bl	8000bc0 <HAL_Delay>
  ST7735_WriteCommand(ST7735_DISPON);
 80007aa:	2029      	movs	r0, #41	; 0x29
 80007ac:	f7ff fe60 	bl	8000470 <ST7735_WriteCommand>
  HAL_Delay(10);
 80007b0:	200a      	movs	r0, #10
 80007b2:	f000 fa05 	bl	8000bc0 <HAL_Delay>

  ST7735_SetRotation(ST7735_ROTATION);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f7ff fec6 	bl	8000548 <ST7735_SetRotation>
  ST7735_FillScreen(ST7735_BLACK);
 80007bc:	2000      	movs	r0, #0
 80007be:	f000 f88f 	bl	80008e0 <ST7735_FillScreen>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80007c6:	b590      	push	{r4, r7, lr}
 80007c8:	b085      	sub	sp, #20
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	4604      	mov	r4, r0
 80007ce:	4608      	mov	r0, r1
 80007d0:	4611      	mov	r1, r2
 80007d2:	461a      	mov	r2, r3
 80007d4:	4623      	mov	r3, r4
 80007d6:	71fb      	strb	r3, [r7, #7]
 80007d8:	4603      	mov	r3, r0
 80007da:	71bb      	strb	r3, [r7, #6]
 80007dc:	460b      	mov	r3, r1
 80007de:	717b      	strb	r3, [r7, #5]
 80007e0:	4613      	mov	r3, r2
 80007e2:	713b      	strb	r3, [r7, #4]
  y0 += ST7735_YSTART;

  x1 += ST7735_XSTART;
  y1 += ST7735_YSTART;

  ST7735_WriteCommand(ST7735_CASET);
 80007e4:	202a      	movs	r0, #42	; 0x2a
 80007e6:	f7ff fe43 	bl	8000470 <ST7735_WriteCommand>
  uint8_t data[] = { 0x00, x0, 0x00, x1};
 80007ea:	2300      	movs	r3, #0
 80007ec:	733b      	strb	r3, [r7, #12]
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	737b      	strb	r3, [r7, #13]
 80007f2:	2300      	movs	r3, #0
 80007f4:	73bb      	strb	r3, [r7, #14]
 80007f6:	797b      	ldrb	r3, [r7, #5]
 80007f8:	73fb      	strb	r3, [r7, #15]
  ST7735_WriteData(data, sizeof(data));
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	2104      	movs	r1, #4
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fe7d 	bl	8000500 <ST7735_WriteData>

  ST7735_WriteCommand(ST7735_RASET);
 8000806:	202b      	movs	r0, #43	; 0x2b
 8000808:	f7ff fe32 	bl	8000470 <ST7735_WriteCommand>
  data[1] = y0;
 800080c:	79bb      	ldrb	r3, [r7, #6]
 800080e:	737b      	strb	r3, [r7, #13]
  data[3] = y1;
 8000810:	793b      	ldrb	r3, [r7, #4]
 8000812:	73fb      	strb	r3, [r7, #15]
  ST7735_WriteData(data, sizeof(data));
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2104      	movs	r1, #4
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff fe70 	bl	8000500 <ST7735_WriteData>
}
 8000820:	bf00      	nop
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	bd90      	pop	{r4, r7, pc}

08000828 <ST7735_DrawRectangle>:

void ST7735_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	4604      	mov	r4, r0
 8000830:	4608      	mov	r0, r1
 8000832:	4611      	mov	r1, r2
 8000834:	461a      	mov	r2, r3
 8000836:	4623      	mov	r3, r4
 8000838:	80fb      	strh	r3, [r7, #6]
 800083a:	4603      	mov	r3, r0
 800083c:	80bb      	strh	r3, [r7, #4]
 800083e:	460b      	mov	r3, r1
 8000840:	807b      	strh	r3, [r7, #2]
 8000842:	4613      	mov	r3, r2
 8000844:	803b      	strh	r3, [r7, #0]
  static uint8_t buff[ST7735_WIDTH * 2];
  uint16_t i = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	81fb      	strh	r3, [r7, #14]

  for (i = 0; i < width; i++) {
 800084a:	2300      	movs	r3, #0
 800084c:	81fb      	strh	r3, [r7, #14]
 800084e:	e011      	b.n	8000874 <ST7735_DrawRectangle+0x4c>
    buff[i * 2] = color >> 8;
 8000850:	8c3b      	ldrh	r3, [r7, #32]
 8000852:	0a1b      	lsrs	r3, r3, #8
 8000854:	b29a      	uxth	r2, r3
 8000856:	89fb      	ldrh	r3, [r7, #14]
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	b2d1      	uxtb	r1, r2
 800085c:	4a1f      	ldr	r2, [pc, #124]	; (80008dc <ST7735_DrawRectangle+0xb4>)
 800085e:	54d1      	strb	r1, [r2, r3]
    buff[i * 2 + 1] = color & 0xFF;
 8000860:	89fb      	ldrh	r3, [r7, #14]
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	3301      	adds	r3, #1
 8000866:	8c3a      	ldrh	r2, [r7, #32]
 8000868:	b2d1      	uxtb	r1, r2
 800086a:	4a1c      	ldr	r2, [pc, #112]	; (80008dc <ST7735_DrawRectangle+0xb4>)
 800086c:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < width; i++) {
 800086e:	89fb      	ldrh	r3, [r7, #14]
 8000870:	3301      	adds	r3, #1
 8000872:	81fb      	strh	r3, [r7, #14]
 8000874:	89fa      	ldrh	r2, [r7, #14]
 8000876:	887b      	ldrh	r3, [r7, #2]
 8000878:	429a      	cmp	r2, r3
 800087a:	d3e9      	bcc.n	8000850 <ST7735_DrawRectangle+0x28>
  }

  ST7735_SetAddressWindow(x, y, x + width - 1, y + height - 1);
 800087c:	88fb      	ldrh	r3, [r7, #6]
 800087e:	b2d8      	uxtb	r0, r3
 8000880:	88bb      	ldrh	r3, [r7, #4]
 8000882:	b2d9      	uxtb	r1, r3
 8000884:	88fb      	ldrh	r3, [r7, #6]
 8000886:	b2da      	uxtb	r2, r3
 8000888:	887b      	ldrh	r3, [r7, #2]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	4413      	add	r3, r2
 800088e:	b2db      	uxtb	r3, r3
 8000890:	3b01      	subs	r3, #1
 8000892:	b2dc      	uxtb	r4, r3
 8000894:	88bb      	ldrh	r3, [r7, #4]
 8000896:	b2da      	uxtb	r2, r3
 8000898:	883b      	ldrh	r3, [r7, #0]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	4413      	add	r3, r2
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	3b01      	subs	r3, #1
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	4622      	mov	r2, r4
 80008a6:	f7ff ff8e 	bl	80007c6 <ST7735_SetAddressWindow>
  ST7735_WriteCommand(ST7735_RAMWR);
 80008aa:	202c      	movs	r0, #44	; 0x2c
 80008ac:	f7ff fde0 	bl	8000470 <ST7735_WriteCommand>
  // Write the color data
  for (i = 0; i < height; i++) {
 80008b0:	2300      	movs	r3, #0
 80008b2:	81fb      	strh	r3, [r7, #14]
 80008b4:	e008      	b.n	80008c8 <ST7735_DrawRectangle+0xa0>
    ST7735_WriteData(buff, sizeof(uint16_t) * width);
 80008b6:	887b      	ldrh	r3, [r7, #2]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	4619      	mov	r1, r3
 80008bc:	4807      	ldr	r0, [pc, #28]	; (80008dc <ST7735_DrawRectangle+0xb4>)
 80008be:	f7ff fe1f 	bl	8000500 <ST7735_WriteData>
  for (i = 0; i < height; i++) {
 80008c2:	89fb      	ldrh	r3, [r7, #14]
 80008c4:	3301      	adds	r3, #1
 80008c6:	81fb      	strh	r3, [r7, #14]
 80008c8:	89fa      	ldrh	r2, [r7, #14]
 80008ca:	883b      	ldrh	r3, [r7, #0]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d3f2      	bcc.n	80008b6 <ST7735_DrawRectangle+0x8e>
  }
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd90      	pop	{r4, r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000080 	.word	0x20000080

080008e0 <ST7735_FillScreen>:
    str++;
  }
}

void ST7735_FillScreen(uint16_t color)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af02      	add	r7, sp, #8
 80008e6:	4603      	mov	r3, r0
 80008e8:	80fb      	strh	r3, [r7, #6]
  ST7735_DrawRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80008ea:	88fb      	ldrh	r3, [r7, #6]
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	23a0      	movs	r3, #160	; 0xa0
 80008f0:	2280      	movs	r2, #128	; 0x80
 80008f2:	2100      	movs	r1, #0
 80008f4:	2000      	movs	r0, #0
 80008f6:	f7ff ff97 	bl	8000828 <ST7735_DrawRectangle>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <HAL_MspInit+0x5c>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	4a14      	ldr	r2, [pc, #80]	; (8000960 <HAL_MspInit+0x5c>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6193      	str	r3, [r2, #24]
 8000916:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_MspInit+0x5c>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <HAL_MspInit+0x5c>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <HAL_MspInit+0x5c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	61d3      	str	r3, [r2, #28]
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <HAL_MspInit+0x5c>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <HAL_MspInit+0x60>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <HAL_MspInit+0x60>)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000956:	bf00      	nop
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	40021000 	.word	0x40021000
 8000964:	40010000 	.word	0x40010000

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800096c:	e7fe      	b.n	800096c <NMI_Handler+0x4>

0800096e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <HardFault_Handler+0x4>

08000974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <MemManage_Handler+0x4>

0800097a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <BusFault_Handler+0x4>

08000980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <UsageFault_Handler+0x4>

08000986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr

08000992 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr

0800099e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr

080009aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ae:	f000 f8eb 	bl	8000b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
	...

080009c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009ca:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <MX_USART1_UART_Init+0x50>)
 80009cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_USART1_UART_Init+0x4c>)
 80009fc:	f001 fdc6 	bl	800258c <HAL_UART_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a06:	f7ff fc9a 	bl	800033e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000180 	.word	0x20000180
 8000a14:	40013800 	.word	0x40013800

08000a18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a1c      	ldr	r2, [pc, #112]	; (8000aa4 <HAL_UART_MspInit+0x8c>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d131      	bne.n	8000a9c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a38:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <HAL_UART_MspInit+0x90>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a1a      	ldr	r2, [pc, #104]	; (8000aa8 <HAL_UART_MspInit+0x90>)
 8000a3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a42:	6193      	str	r3, [r2, #24]
 8000a44:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <HAL_UART_MspInit+0x90>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <HAL_UART_MspInit+0x90>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <HAL_UART_MspInit+0x90>)
 8000a56:	f043 0304 	orr.w	r3, r3, #4
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_UART_MspInit+0x90>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f003 0304 	and.w	r3, r3, #4
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	f107 0310 	add.w	r3, r7, #16
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480b      	ldr	r0, [pc, #44]	; (8000aac <HAL_UART_MspInit+0x94>)
 8000a7e:	f000 f9cb 	bl	8000e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	4619      	mov	r1, r3
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <HAL_UART_MspInit+0x94>)
 8000a98:	f000 f9be 	bl	8000e18 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	3720      	adds	r7, #32
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40013800 	.word	0x40013800
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40010800 	.word	0x40010800

08000ab0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ab0:	f7ff ff81 	bl	80009b6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab4:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ab6:	490c      	ldr	r1, [pc, #48]	; (8000ae8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ab8:	4a0c      	ldr	r2, [pc, #48]	; (8000aec <LoopFillZerobss+0x16>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000abc:	e002      	b.n	8000ac4 <LoopCopyDataInit>

08000abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac2:	3304      	adds	r3, #4

08000ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac8:	d3f9      	bcc.n	8000abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aca:	4a09      	ldr	r2, [pc, #36]	; (8000af0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000acc:	4c09      	ldr	r4, [pc, #36]	; (8000af4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad0:	e001      	b.n	8000ad6 <LoopFillZerobss>

08000ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad4:	3204      	adds	r2, #4

08000ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad8:	d3fb      	bcc.n	8000ad2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ada:	f001 fed9 	bl	8002890 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ade:	f7ff fbc3 	bl	8000268 <main>
  bx lr
 8000ae2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000aec:	08002b4c 	.word	0x08002b4c
  ldr r2, =_sbss
 8000af0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000af4:	200001cc 	.word	0x200001cc

08000af8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af8:	e7fe      	b.n	8000af8 <ADC1_2_IRQHandler>
	...

08000afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <HAL_Init+0x28>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <HAL_Init+0x28>)
 8000b06:	f043 0310 	orr.w	r3, r3, #16
 8000b0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	f000 f92b 	bl	8000d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b12:	200f      	movs	r0, #15
 8000b14:	f000 f808 	bl	8000b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b18:	f7ff fef4 	bl	8000904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40022000 	.word	0x40022000

08000b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_InitTick+0x54>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_InitTick+0x58>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 f95a 	bl	8000e00 <HAL_SYSTICK_Config>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e00e      	b.n	8000b74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2b0f      	cmp	r3, #15
 8000b5a:	d80a      	bhi.n	8000b72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b64:	f000 f920 	bl	8000da8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b68:	4a06      	ldr	r2, [pc, #24]	; (8000b84 <HAL_InitTick+0x5c>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	e000      	b.n	8000b74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000000 	.word	0x20000000
 8000b80:	20000008 	.word	0x20000008
 8000b84:	20000004 	.word	0x20000004

08000b88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <HAL_IncTick+0x1c>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <HAL_IncTick+0x20>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	4a03      	ldr	r2, [pc, #12]	; (8000ba8 <HAL_IncTick+0x20>)
 8000b9a:	6013      	str	r3, [r2, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	200001c8 	.word	0x200001c8

08000bac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb0:	4b02      	ldr	r3, [pc, #8]	; (8000bbc <HAL_GetTick+0x10>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	200001c8 	.word	0x200001c8

08000bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc8:	f7ff fff0 	bl	8000bac <HAL_GetTick>
 8000bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bd8:	d005      	beq.n	8000be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <HAL_Delay+0x44>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	4413      	add	r3, r2
 8000be4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000be6:	bf00      	nop
 8000be8:	f7ff ffe0 	bl	8000bac <HAL_GetTick>
 8000bec:	4602      	mov	r2, r0
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d8f7      	bhi.n	8000be8 <HAL_Delay+0x28>
  {
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000008 	.word	0x20000008

08000c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c24:	4013      	ands	r3, r2
 8000c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3a:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	60d3      	str	r3, [r2, #12]
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <__NVIC_GetPriorityGrouping+0x18>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	f003 0307 	and.w	r3, r3, #7
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db0a      	blt.n	8000c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	490c      	ldr	r1, [pc, #48]	; (8000cb8 <__NVIC_SetPriority+0x4c>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	0112      	lsls	r2, r2, #4
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	440b      	add	r3, r1
 8000c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c94:	e00a      	b.n	8000cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4908      	ldr	r1, [pc, #32]	; (8000cbc <__NVIC_SetPriority+0x50>)
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	f003 030f 	and.w	r3, r3, #15
 8000ca2:	3b04      	subs	r3, #4
 8000ca4:	0112      	lsls	r2, r2, #4
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	440b      	add	r3, r1
 8000caa:	761a      	strb	r2, [r3, #24]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000e100 	.word	0xe000e100
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f1c3 0307 	rsb	r3, r3, #7
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	bf28      	it	cs
 8000cde:	2304      	movcs	r3, #4
 8000ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	2b06      	cmp	r3, #6
 8000ce8:	d902      	bls.n	8000cf0 <NVIC_EncodePriority+0x30>
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3b03      	subs	r3, #3
 8000cee:	e000      	b.n	8000cf2 <NVIC_EncodePriority+0x32>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	401a      	ands	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d12:	43d9      	mvns	r1, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	4313      	orrs	r3, r2
         );
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3724      	adds	r7, #36	; 0x24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr

08000d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d34:	d301      	bcc.n	8000d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d36:	2301      	movs	r3, #1
 8000d38:	e00f      	b.n	8000d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <SysTick_Config+0x40>)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d42:	210f      	movs	r1, #15
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d48:	f7ff ff90 	bl	8000c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <SysTick_Config+0x40>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d52:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <SysTick_Config+0x40>)
 8000d54:	2207      	movs	r2, #7
 8000d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	e000e010 	.word	0xe000e010

08000d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b07      	cmp	r3, #7
 8000d74:	d00f      	beq.n	8000d96 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b06      	cmp	r3, #6
 8000d7a:	d00c      	beq.n	8000d96 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b05      	cmp	r3, #5
 8000d80:	d009      	beq.n	8000d96 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b04      	cmp	r3, #4
 8000d86:	d006      	beq.n	8000d96 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b03      	cmp	r3, #3
 8000d8c:	d003      	beq.n	8000d96 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d8e:	2191      	movs	r1, #145	; 0x91
 8000d90:	4804      	ldr	r0, [pc, #16]	; (8000da4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000d92:	f7ff fad9 	bl	8000348 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ff36 	bl	8000c08 <__NVIC_SetPriorityGrouping>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	080028f0 	.word	0x080028f0

08000da8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b0f      	cmp	r3, #15
 8000dbe:	d903      	bls.n	8000dc8 <HAL_NVIC_SetPriority+0x20>
 8000dc0:	21a9      	movs	r1, #169	; 0xa9
 8000dc2:	480e      	ldr	r0, [pc, #56]	; (8000dfc <HAL_NVIC_SetPriority+0x54>)
 8000dc4:	f7ff fac0 	bl	8000348 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	2b0f      	cmp	r3, #15
 8000dcc:	d903      	bls.n	8000dd6 <HAL_NVIC_SetPriority+0x2e>
 8000dce:	21aa      	movs	r1, #170	; 0xaa
 8000dd0:	480a      	ldr	r0, [pc, #40]	; (8000dfc <HAL_NVIC_SetPriority+0x54>)
 8000dd2:	f7ff fab9 	bl	8000348 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd6:	f7ff ff3b 	bl	8000c50 <__NVIC_GetPriorityGrouping>
 8000dda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	68b9      	ldr	r1, [r7, #8]
 8000de0:	6978      	ldr	r0, [r7, #20]
 8000de2:	f7ff ff6d 	bl	8000cc0 <NVIC_EncodePriority>
 8000de6:	4602      	mov	r2, r0
 8000de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dec:	4611      	mov	r1, r2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ff3c 	bl	8000c6c <__NVIC_SetPriority>
}
 8000df4:	bf00      	nop
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	080028f0 	.word	0x080028f0

08000e00 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff ff8b 	bl	8000d24 <SysTick_Config>
 8000e0e:	4603      	mov	r3, r0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a96      	ldr	r2, [pc, #600]	; (8001088 <HAL_GPIO_Init+0x270>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d013      	beq.n	8000e5a <HAL_GPIO_Init+0x42>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a95      	ldr	r2, [pc, #596]	; (800108c <HAL_GPIO_Init+0x274>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d00f      	beq.n	8000e5a <HAL_GPIO_Init+0x42>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a94      	ldr	r2, [pc, #592]	; (8001090 <HAL_GPIO_Init+0x278>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d00b      	beq.n	8000e5a <HAL_GPIO_Init+0x42>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a93      	ldr	r2, [pc, #588]	; (8001094 <HAL_GPIO_Init+0x27c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d007      	beq.n	8000e5a <HAL_GPIO_Init+0x42>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a92      	ldr	r2, [pc, #584]	; (8001098 <HAL_GPIO_Init+0x280>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d003      	beq.n	8000e5a <HAL_GPIO_Init+0x42>
 8000e52:	21bd      	movs	r1, #189	; 0xbd
 8000e54:	4891      	ldr	r0, [pc, #580]	; (800109c <HAL_GPIO_Init+0x284>)
 8000e56:	f7ff fa77 	bl	8000348 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d005      	beq.n	8000e70 <HAL_GPIO_Init+0x58>
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	0c1b      	lsrs	r3, r3, #16
 8000e6a:	041b      	lsls	r3, r3, #16
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d003      	beq.n	8000e78 <HAL_GPIO_Init+0x60>
 8000e70:	21be      	movs	r1, #190	; 0xbe
 8000e72:	488a      	ldr	r0, [pc, #552]	; (800109c <HAL_GPIO_Init+0x284>)
 8000e74:	f7ff fa68 	bl	8000348 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	f000 821c 	beq.w	80012ba <HAL_GPIO_Init+0x4a2>
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	f000 8217 	beq.w	80012ba <HAL_GPIO_Init+0x4a2>
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b11      	cmp	r3, #17
 8000e92:	f000 8212 	beq.w	80012ba <HAL_GPIO_Init+0x4a2>
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	f000 820d 	beq.w	80012ba <HAL_GPIO_Init+0x4a2>
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	2b12      	cmp	r3, #18
 8000ea6:	f000 8208 	beq.w	80012ba <HAL_GPIO_Init+0x4a2>
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	4a7c      	ldr	r2, [pc, #496]	; (80010a0 <HAL_GPIO_Init+0x288>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	f000 8202 	beq.w	80012ba <HAL_GPIO_Init+0x4a2>
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	4a7a      	ldr	r2, [pc, #488]	; (80010a4 <HAL_GPIO_Init+0x28c>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	f000 81fc 	beq.w	80012ba <HAL_GPIO_Init+0x4a2>
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	4a78      	ldr	r2, [pc, #480]	; (80010a8 <HAL_GPIO_Init+0x290>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	f000 81f6 	beq.w	80012ba <HAL_GPIO_Init+0x4a2>
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	4a76      	ldr	r2, [pc, #472]	; (80010ac <HAL_GPIO_Init+0x294>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	f000 81f0 	beq.w	80012ba <HAL_GPIO_Init+0x4a2>
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	4a74      	ldr	r2, [pc, #464]	; (80010b0 <HAL_GPIO_Init+0x298>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	f000 81ea 	beq.w	80012ba <HAL_GPIO_Init+0x4a2>
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	4a72      	ldr	r2, [pc, #456]	; (80010b4 <HAL_GPIO_Init+0x29c>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	f000 81e4 	beq.w	80012ba <HAL_GPIO_Init+0x4a2>
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	f000 81df 	beq.w	80012ba <HAL_GPIO_Init+0x4a2>
 8000efc:	21bf      	movs	r1, #191	; 0xbf
 8000efe:	4867      	ldr	r0, [pc, #412]	; (800109c <HAL_GPIO_Init+0x284>)
 8000f00:	f7ff fa22 	bl	8000348 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f04:	e1d9      	b.n	80012ba <HAL_GPIO_Init+0x4a2>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f06:	2201      	movs	r2, #1
 8000f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	69fa      	ldr	r2, [r7, #28]
 8000f16:	4013      	ands	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	f040 81c8 	bne.w	80012b4 <HAL_GPIO_Init+0x49c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a58      	ldr	r2, [pc, #352]	; (8001088 <HAL_GPIO_Init+0x270>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d013      	beq.n	8000f54 <HAL_GPIO_Init+0x13c>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a57      	ldr	r2, [pc, #348]	; (800108c <HAL_GPIO_Init+0x274>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d00f      	beq.n	8000f54 <HAL_GPIO_Init+0x13c>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a56      	ldr	r2, [pc, #344]	; (8001090 <HAL_GPIO_Init+0x278>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d00b      	beq.n	8000f54 <HAL_GPIO_Init+0x13c>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a55      	ldr	r2, [pc, #340]	; (8001094 <HAL_GPIO_Init+0x27c>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d007      	beq.n	8000f54 <HAL_GPIO_Init+0x13c>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a54      	ldr	r2, [pc, #336]	; (8001098 <HAL_GPIO_Init+0x280>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0x13c>
 8000f4c:	21cd      	movs	r1, #205	; 0xcd
 8000f4e:	4853      	ldr	r0, [pc, #332]	; (800109c <HAL_GPIO_Init+0x284>)
 8000f50:	f7ff f9fa 	bl	8000348 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	4a56      	ldr	r2, [pc, #344]	; (80010b4 <HAL_GPIO_Init+0x29c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	f000 80c1 	beq.w	80010e2 <HAL_GPIO_Init+0x2ca>
 8000f60:	4a54      	ldr	r2, [pc, #336]	; (80010b4 <HAL_GPIO_Init+0x29c>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	f200 80e7 	bhi.w	8001136 <HAL_GPIO_Init+0x31e>
 8000f68:	4a4f      	ldr	r2, [pc, #316]	; (80010a8 <HAL_GPIO_Init+0x290>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	f000 80b9 	beq.w	80010e2 <HAL_GPIO_Init+0x2ca>
 8000f70:	4a4d      	ldr	r2, [pc, #308]	; (80010a8 <HAL_GPIO_Init+0x290>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	f200 80df 	bhi.w	8001136 <HAL_GPIO_Init+0x31e>
 8000f78:	4a4d      	ldr	r2, [pc, #308]	; (80010b0 <HAL_GPIO_Init+0x298>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	f000 80b1 	beq.w	80010e2 <HAL_GPIO_Init+0x2ca>
 8000f80:	4a4b      	ldr	r2, [pc, #300]	; (80010b0 <HAL_GPIO_Init+0x298>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	f200 80d7 	bhi.w	8001136 <HAL_GPIO_Init+0x31e>
 8000f88:	4a46      	ldr	r2, [pc, #280]	; (80010a4 <HAL_GPIO_Init+0x28c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	f000 80a9 	beq.w	80010e2 <HAL_GPIO_Init+0x2ca>
 8000f90:	4a44      	ldr	r2, [pc, #272]	; (80010a4 <HAL_GPIO_Init+0x28c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	f200 80cf 	bhi.w	8001136 <HAL_GPIO_Init+0x31e>
 8000f98:	4a44      	ldr	r2, [pc, #272]	; (80010ac <HAL_GPIO_Init+0x294>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	f000 80a1 	beq.w	80010e2 <HAL_GPIO_Init+0x2ca>
 8000fa0:	4a42      	ldr	r2, [pc, #264]	; (80010ac <HAL_GPIO_Init+0x294>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	f200 80c7 	bhi.w	8001136 <HAL_GPIO_Init+0x31e>
 8000fa8:	2b12      	cmp	r3, #18
 8000faa:	d82b      	bhi.n	8001004 <HAL_GPIO_Init+0x1ec>
 8000fac:	2b12      	cmp	r3, #18
 8000fae:	f200 80c2 	bhi.w	8001136 <HAL_GPIO_Init+0x31e>
 8000fb2:	a201      	add	r2, pc, #4	; (adr r2, 8000fb8 <HAL_GPIO_Init+0x1a0>)
 8000fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb8:	080010e3 	.word	0x080010e3
 8000fbc:	0800100d 	.word	0x0800100d
 8000fc0:	0800105f 	.word	0x0800105f
 8000fc4:	08001131 	.word	0x08001131
 8000fc8:	08001137 	.word	0x08001137
 8000fcc:	08001137 	.word	0x08001137
 8000fd0:	08001137 	.word	0x08001137
 8000fd4:	08001137 	.word	0x08001137
 8000fd8:	08001137 	.word	0x08001137
 8000fdc:	08001137 	.word	0x08001137
 8000fe0:	08001137 	.word	0x08001137
 8000fe4:	08001137 	.word	0x08001137
 8000fe8:	08001137 	.word	0x08001137
 8000fec:	08001137 	.word	0x08001137
 8000ff0:	08001137 	.word	0x08001137
 8000ff4:	08001137 	.word	0x08001137
 8000ff8:	08001137 	.word	0x08001137
 8000ffc:	08001035 	.word	0x08001035
 8001000:	080010b9 	.word	0x080010b9
 8001004:	4a26      	ldr	r2, [pc, #152]	; (80010a0 <HAL_GPIO_Init+0x288>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d06b      	beq.n	80010e2 <HAL_GPIO_Init+0x2ca>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800100a:	e094      	b.n	8001136 <HAL_GPIO_Init+0x31e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	2b02      	cmp	r3, #2
 8001012:	d00b      	beq.n	800102c <HAL_GPIO_Init+0x214>
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d007      	beq.n	800102c <HAL_GPIO_Init+0x214>
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	2b03      	cmp	r3, #3
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x214>
 8001024:	21d5      	movs	r1, #213	; 0xd5
 8001026:	481d      	ldr	r0, [pc, #116]	; (800109c <HAL_GPIO_Init+0x284>)
 8001028:	f7ff f98e 	bl	8000348 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	623b      	str	r3, [r7, #32]
          break;
 8001032:	e081      	b.n	8001138 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	2b02      	cmp	r3, #2
 800103a:	d00b      	beq.n	8001054 <HAL_GPIO_Init+0x23c>
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d007      	beq.n	8001054 <HAL_GPIO_Init+0x23c>
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	2b03      	cmp	r3, #3
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x23c>
 800104c:	21dc      	movs	r1, #220	; 0xdc
 800104e:	4813      	ldr	r0, [pc, #76]	; (800109c <HAL_GPIO_Init+0x284>)
 8001050:	f7ff f97a 	bl	8000348 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	3304      	adds	r3, #4
 800105a:	623b      	str	r3, [r7, #32]
          break;
 800105c:	e06c      	b.n	8001138 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	2b02      	cmp	r3, #2
 8001064:	d00b      	beq.n	800107e <HAL_GPIO_Init+0x266>
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d007      	beq.n	800107e <HAL_GPIO_Init+0x266>
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	2b03      	cmp	r3, #3
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x266>
 8001076:	21e3      	movs	r1, #227	; 0xe3
 8001078:	4808      	ldr	r0, [pc, #32]	; (800109c <HAL_GPIO_Init+0x284>)
 800107a:	f7ff f965 	bl	8000348 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	3308      	adds	r3, #8
 8001084:	623b      	str	r3, [r7, #32]
          break;
 8001086:	e057      	b.n	8001138 <HAL_GPIO_Init+0x320>
 8001088:	40010800 	.word	0x40010800
 800108c:	40010c00 	.word	0x40010c00
 8001090:	40011000 	.word	0x40011000
 8001094:	40011400 	.word	0x40011400
 8001098:	40011800 	.word	0x40011800
 800109c:	08002960 	.word	0x08002960
 80010a0:	10110000 	.word	0x10110000
 80010a4:	10210000 	.word	0x10210000
 80010a8:	10310000 	.word	0x10310000
 80010ac:	10120000 	.word	0x10120000
 80010b0:	10220000 	.word	0x10220000
 80010b4:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d00b      	beq.n	80010d8 <HAL_GPIO_Init+0x2c0>
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d007      	beq.n	80010d8 <HAL_GPIO_Init+0x2c0>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	2b03      	cmp	r3, #3
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x2c0>
 80010d0:	21ea      	movs	r1, #234	; 0xea
 80010d2:	4880      	ldr	r0, [pc, #512]	; (80012d4 <HAL_GPIO_Init+0x4bc>)
 80010d4:	f7ff f938 	bl	8000348 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	330c      	adds	r3, #12
 80010de:	623b      	str	r3, [r7, #32]
          break;
 80010e0:	e02a      	b.n	8001138 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d00b      	beq.n	8001102 <HAL_GPIO_Init+0x2ea>
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d007      	beq.n	8001102 <HAL_GPIO_Init+0x2ea>
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x2ea>
 80010fa:	21f7      	movs	r1, #247	; 0xf7
 80010fc:	4875      	ldr	r0, [pc, #468]	; (80012d4 <HAL_GPIO_Init+0x4bc>)
 80010fe:	f7ff f923 	bl	8000348 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d102      	bne.n	8001110 <HAL_GPIO_Init+0x2f8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800110a:	2304      	movs	r3, #4
 800110c:	623b      	str	r3, [r7, #32]
          break;
 800110e:	e013      	b.n	8001138 <HAL_GPIO_Init+0x320>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d105      	bne.n	8001124 <HAL_GPIO_Init+0x30c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001118:	2308      	movs	r3, #8
 800111a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69fa      	ldr	r2, [r7, #28]
 8001120:	611a      	str	r2, [r3, #16]
          break;
 8001122:	e009      	b.n	8001138 <HAL_GPIO_Init+0x320>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001124:	2308      	movs	r3, #8
 8001126:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69fa      	ldr	r2, [r7, #28]
 800112c:	615a      	str	r2, [r3, #20]
          break;
 800112e:	e003      	b.n	8001138 <HAL_GPIO_Init+0x320>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
          break;
 8001134:	e000      	b.n	8001138 <HAL_GPIO_Init+0x320>
          break;
 8001136:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	2bff      	cmp	r3, #255	; 0xff
 800113c:	d801      	bhi.n	8001142 <HAL_GPIO_Init+0x32a>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	e001      	b.n	8001146 <HAL_GPIO_Init+0x32e>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3304      	adds	r3, #4
 8001146:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	2bff      	cmp	r3, #255	; 0xff
 800114c:	d802      	bhi.n	8001154 <HAL_GPIO_Init+0x33c>
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	e002      	b.n	800115a <HAL_GPIO_Init+0x342>
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	3b08      	subs	r3, #8
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	210f      	movs	r1, #15
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	fa01 f303 	lsl.w	r3, r1, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	401a      	ands	r2, r3
 800116c:	6a39      	ldr	r1, [r7, #32]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	fa01 f303 	lsl.w	r3, r1, r3
 8001174:	431a      	orrs	r2, r3
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 8096 	beq.w	80012b4 <HAL_GPIO_Init+0x49c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001188:	4b53      	ldr	r3, [pc, #332]	; (80012d8 <HAL_GPIO_Init+0x4c0>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a52      	ldr	r2, [pc, #328]	; (80012d8 <HAL_GPIO_Init+0x4c0>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b50      	ldr	r3, [pc, #320]	; (80012d8 <HAL_GPIO_Init+0x4c0>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011a0:	4a4e      	ldr	r2, [pc, #312]	; (80012dc <HAL_GPIO_Init+0x4c4>)
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3302      	adds	r3, #2
 80011a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	4013      	ands	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a46      	ldr	r2, [pc, #280]	; (80012e0 <HAL_GPIO_Init+0x4c8>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d013      	beq.n	80011f4 <HAL_GPIO_Init+0x3dc>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a45      	ldr	r2, [pc, #276]	; (80012e4 <HAL_GPIO_Init+0x4cc>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d00d      	beq.n	80011f0 <HAL_GPIO_Init+0x3d8>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a44      	ldr	r2, [pc, #272]	; (80012e8 <HAL_GPIO_Init+0x4d0>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d007      	beq.n	80011ec <HAL_GPIO_Init+0x3d4>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a43      	ldr	r2, [pc, #268]	; (80012ec <HAL_GPIO_Init+0x4d4>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d101      	bne.n	80011e8 <HAL_GPIO_Init+0x3d0>
 80011e4:	2303      	movs	r3, #3
 80011e6:	e006      	b.n	80011f6 <HAL_GPIO_Init+0x3de>
 80011e8:	2304      	movs	r3, #4
 80011ea:	e004      	b.n	80011f6 <HAL_GPIO_Init+0x3de>
 80011ec:	2302      	movs	r3, #2
 80011ee:	e002      	b.n	80011f6 <HAL_GPIO_Init+0x3de>
 80011f0:	2301      	movs	r3, #1
 80011f2:	e000      	b.n	80011f6 <HAL_GPIO_Init+0x3de>
 80011f4:	2300      	movs	r3, #0
 80011f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f8:	f002 0203 	and.w	r2, r2, #3
 80011fc:	0092      	lsls	r2, r2, #2
 80011fe:	4093      	lsls	r3, r2
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	4313      	orrs	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001206:	4935      	ldr	r1, [pc, #212]	; (80012dc <HAL_GPIO_Init+0x4c4>)
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	3302      	adds	r3, #2
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d006      	beq.n	800122e <HAL_GPIO_Init+0x416>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001220:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <HAL_GPIO_Init+0x4d8>)
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	4932      	ldr	r1, [pc, #200]	; (80012f0 <HAL_GPIO_Init+0x4d8>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	608b      	str	r3, [r1, #8]
 800122c:	e006      	b.n	800123c <HAL_GPIO_Init+0x424>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800122e:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <HAL_GPIO_Init+0x4d8>)
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	43db      	mvns	r3, r3
 8001236:	492e      	ldr	r1, [pc, #184]	; (80012f0 <HAL_GPIO_Init+0x4d8>)
 8001238:	4013      	ands	r3, r2
 800123a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d006      	beq.n	8001256 <HAL_GPIO_Init+0x43e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001248:	4b29      	ldr	r3, [pc, #164]	; (80012f0 <HAL_GPIO_Init+0x4d8>)
 800124a:	68da      	ldr	r2, [r3, #12]
 800124c:	4928      	ldr	r1, [pc, #160]	; (80012f0 <HAL_GPIO_Init+0x4d8>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	60cb      	str	r3, [r1, #12]
 8001254:	e006      	b.n	8001264 <HAL_GPIO_Init+0x44c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001256:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <HAL_GPIO_Init+0x4d8>)
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	43db      	mvns	r3, r3
 800125e:	4924      	ldr	r1, [pc, #144]	; (80012f0 <HAL_GPIO_Init+0x4d8>)
 8001260:	4013      	ands	r3, r2
 8001262:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d006      	beq.n	800127e <HAL_GPIO_Init+0x466>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001270:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <HAL_GPIO_Init+0x4d8>)
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	491e      	ldr	r1, [pc, #120]	; (80012f0 <HAL_GPIO_Init+0x4d8>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	604b      	str	r3, [r1, #4]
 800127c:	e006      	b.n	800128c <HAL_GPIO_Init+0x474>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800127e:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <HAL_GPIO_Init+0x4d8>)
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	43db      	mvns	r3, r3
 8001286:	491a      	ldr	r1, [pc, #104]	; (80012f0 <HAL_GPIO_Init+0x4d8>)
 8001288:	4013      	ands	r3, r2
 800128a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d006      	beq.n	80012a6 <HAL_GPIO_Init+0x48e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <HAL_GPIO_Init+0x4d8>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4914      	ldr	r1, [pc, #80]	; (80012f0 <HAL_GPIO_Init+0x4d8>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	600b      	str	r3, [r1, #0]
 80012a4:	e006      	b.n	80012b4 <HAL_GPIO_Init+0x49c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_GPIO_Init+0x4d8>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	4910      	ldr	r1, [pc, #64]	; (80012f0 <HAL_GPIO_Init+0x4d8>)
 80012b0:	4013      	ands	r3, r2
 80012b2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b6:	3301      	adds	r3, #1
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	fa22 f303 	lsr.w	r3, r2, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f47f ae1e 	bne.w	8000f06 <HAL_GPIO_Init+0xee>
  }
}
 80012ca:	bf00      	nop
 80012cc:	bf00      	nop
 80012ce:	3728      	adds	r7, #40	; 0x28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	08002960 	.word	0x08002960
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40010000 	.word	0x40010000
 80012e0:	40010800 	.word	0x40010800
 80012e4:	40010c00 	.word	0x40010c00
 80012e8:	40011000 	.word	0x40011000
 80012ec:	40011400 	.word	0x40011400
 80012f0:	40010400 	.word	0x40010400

080012f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	807b      	strh	r3, [r7, #2]
 8001300:	4613      	mov	r3, r2
 8001302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001304:	887b      	ldrh	r3, [r7, #2]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d004      	beq.n	8001314 <HAL_GPIO_WritePin+0x20>
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	0c1b      	lsrs	r3, r3, #16
 800130e:	041b      	lsls	r3, r3, #16
 8001310:	2b00      	cmp	r3, #0
 8001312:	d004      	beq.n	800131e <HAL_GPIO_WritePin+0x2a>
 8001314:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8001318:	480e      	ldr	r0, [pc, #56]	; (8001354 <HAL_GPIO_WritePin+0x60>)
 800131a:	f7ff f815 	bl	8000348 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800131e:	787b      	ldrb	r3, [r7, #1]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d007      	beq.n	8001334 <HAL_GPIO_WritePin+0x40>
 8001324:	787b      	ldrb	r3, [r7, #1]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d004      	beq.n	8001334 <HAL_GPIO_WritePin+0x40>
 800132a:	f240 11d5 	movw	r1, #469	; 0x1d5
 800132e:	4809      	ldr	r0, [pc, #36]	; (8001354 <HAL_GPIO_WritePin+0x60>)
 8001330:	f7ff f80a 	bl	8000348 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8001334:	787b      	ldrb	r3, [r7, #1]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001340:	e003      	b.n	800134a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001342:	887b      	ldrh	r3, [r7, #2]
 8001344:	041a      	lsls	r2, r3, #16
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	611a      	str	r2, [r3, #16]
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	08002960 	.word	0x08002960

08001358 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e35a      	b.n	8001a20 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d01c      	beq.n	80013ac <HAL_RCC_OscConfig+0x54>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b00      	cmp	r3, #0
 800137c:	d116      	bne.n	80013ac <HAL_RCC_OscConfig+0x54>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d110      	bne.n	80013ac <HAL_RCC_OscConfig+0x54>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10a      	bne.n	80013ac <HAL_RCC_OscConfig+0x54>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d104      	bne.n	80013ac <HAL_RCC_OscConfig+0x54>
 80013a2:	f240 1165 	movw	r1, #357	; 0x165
 80013a6:	488f      	ldr	r0, [pc, #572]	; (80015e4 <HAL_RCC_OscConfig+0x28c>)
 80013a8:	f7fe ffce 	bl	8000348 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 809a 	beq.w	80014ee <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00e      	beq.n	80013e0 <HAL_RCC_OscConfig+0x88>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ca:	d009      	beq.n	80013e0 <HAL_RCC_OscConfig+0x88>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013d4:	d004      	beq.n	80013e0 <HAL_RCC_OscConfig+0x88>
 80013d6:	f240 116b 	movw	r1, #363	; 0x16b
 80013da:	4882      	ldr	r0, [pc, #520]	; (80015e4 <HAL_RCC_OscConfig+0x28c>)
 80013dc:	f7fe ffb4 	bl	8000348 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013e0:	4b81      	ldr	r3, [pc, #516]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 030c 	and.w	r3, r3, #12
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d00c      	beq.n	8001406 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013ec:	4b7e      	ldr	r3, [pc, #504]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 030c 	and.w	r3, r3, #12
 80013f4:	2b08      	cmp	r3, #8
 80013f6:	d112      	bne.n	800141e <HAL_RCC_OscConfig+0xc6>
 80013f8:	4b7b      	ldr	r3, [pc, #492]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001404:	d10b      	bne.n	800141e <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001406:	4b78      	ldr	r3, [pc, #480]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d06c      	beq.n	80014ec <HAL_RCC_OscConfig+0x194>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d168      	bne.n	80014ec <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e300      	b.n	8001a20 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001426:	d106      	bne.n	8001436 <HAL_RCC_OscConfig+0xde>
 8001428:	4b6f      	ldr	r3, [pc, #444]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a6e      	ldr	r2, [pc, #440]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 800142e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	e02e      	b.n	8001494 <HAL_RCC_OscConfig+0x13c>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10c      	bne.n	8001458 <HAL_RCC_OscConfig+0x100>
 800143e:	4b6a      	ldr	r3, [pc, #424]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a69      	ldr	r2, [pc, #420]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 8001444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	4b67      	ldr	r3, [pc, #412]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a66      	ldr	r2, [pc, #408]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 8001450:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	e01d      	b.n	8001494 <HAL_RCC_OscConfig+0x13c>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001460:	d10c      	bne.n	800147c <HAL_RCC_OscConfig+0x124>
 8001462:	4b61      	ldr	r3, [pc, #388]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a60      	ldr	r2, [pc, #384]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 8001468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	4b5e      	ldr	r3, [pc, #376]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a5d      	ldr	r2, [pc, #372]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 8001474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e00b      	b.n	8001494 <HAL_RCC_OscConfig+0x13c>
 800147c:	4b5a      	ldr	r3, [pc, #360]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a59      	ldr	r2, [pc, #356]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 8001482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b57      	ldr	r3, [pc, #348]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a56      	ldr	r2, [pc, #344]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 800148e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001492:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d013      	beq.n	80014c4 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149c:	f7ff fb86 	bl	8000bac <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a4:	f7ff fb82 	bl	8000bac <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	; 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e2b4      	b.n	8001a20 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b6:	4b4c      	ldr	r3, [pc, #304]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0x14c>
 80014c2:	e014      	b.n	80014ee <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c4:	f7ff fb72 	bl	8000bac <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014cc:	f7ff fb6e 	bl	8000bac <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b64      	cmp	r3, #100	; 0x64
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e2a0      	b.n	8001a20 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014de:	4b42      	ldr	r3, [pc, #264]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0x174>
 80014ea:	e000      	b.n	80014ee <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 8080 	beq.w	80015fc <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d008      	beq.n	8001516 <HAL_RCC_OscConfig+0x1be>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d004      	beq.n	8001516 <HAL_RCC_OscConfig+0x1be>
 800150c:	f240 119f 	movw	r1, #415	; 0x19f
 8001510:	4834      	ldr	r0, [pc, #208]	; (80015e4 <HAL_RCC_OscConfig+0x28c>)
 8001512:	f7fe ff19 	bl	8000348 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	2b1f      	cmp	r3, #31
 800151c:	d904      	bls.n	8001528 <HAL_RCC_OscConfig+0x1d0>
 800151e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8001522:	4830      	ldr	r0, [pc, #192]	; (80015e4 <HAL_RCC_OscConfig+0x28c>)
 8001524:	f7fe ff10 	bl	8000348 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001528:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 030c 	and.w	r3, r3, #12
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00b      	beq.n	800154c <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001534:	4b2c      	ldr	r3, [pc, #176]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 030c 	and.w	r3, r3, #12
 800153c:	2b08      	cmp	r3, #8
 800153e:	d11c      	bne.n	800157a <HAL_RCC_OscConfig+0x222>
 8001540:	4b29      	ldr	r3, [pc, #164]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d116      	bne.n	800157a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800154c:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d005      	beq.n	8001564 <HAL_RCC_OscConfig+0x20c>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d001      	beq.n	8001564 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e25d      	b.n	8001a20 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001564:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	491d      	ldr	r1, [pc, #116]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 8001574:	4313      	orrs	r3, r2
 8001576:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001578:	e040      	b.n	80015fc <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d020      	beq.n	80015c4 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <HAL_RCC_OscConfig+0x294>)
 8001584:	2201      	movs	r2, #1
 8001586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff fb10 	bl	8000bac <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001590:	f7ff fb0c 	bl	8000bac <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e23e      	b.n	8001a20 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	490a      	ldr	r1, [pc, #40]	; (80015e8 <HAL_RCC_OscConfig+0x290>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	600b      	str	r3, [r1, #0]
 80015c2:	e01b      	b.n	80015fc <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_RCC_OscConfig+0x294>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ca:	f7ff faef 	bl	8000bac <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d0:	e00e      	b.n	80015f0 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d2:	f7ff faeb 	bl	8000bac <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d907      	bls.n	80015f0 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e21d      	b.n	8001a20 <HAL_RCC_OscConfig+0x6c8>
 80015e4:	080029d0 	.word	0x080029d0
 80015e8:	40021000 	.word	0x40021000
 80015ec:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f0:	4b7d      	ldr	r3, [pc, #500]	; (80017e8 <HAL_RCC_OscConfig+0x490>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1ea      	bne.n	80015d2 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0308 	and.w	r3, r3, #8
 8001604:	2b00      	cmp	r3, #0
 8001606:	d040      	beq.n	800168a <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d008      	beq.n	8001622 <HAL_RCC_OscConfig+0x2ca>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d004      	beq.n	8001622 <HAL_RCC_OscConfig+0x2ca>
 8001618:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800161c:	4873      	ldr	r0, [pc, #460]	; (80017ec <HAL_RCC_OscConfig+0x494>)
 800161e:	f7fe fe93 	bl	8000348 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d019      	beq.n	800165e <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800162a:	4b71      	ldr	r3, [pc, #452]	; (80017f0 <HAL_RCC_OscConfig+0x498>)
 800162c:	2201      	movs	r2, #1
 800162e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001630:	f7ff fabc 	bl	8000bac <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001638:	f7ff fab8 	bl	8000bac <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e1ea      	b.n	8001a20 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164a:	4b67      	ldr	r3, [pc, #412]	; (80017e8 <HAL_RCC_OscConfig+0x490>)
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001656:	2001      	movs	r0, #1
 8001658:	f000 fc02 	bl	8001e60 <RCC_Delay>
 800165c:	e015      	b.n	800168a <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800165e:	4b64      	ldr	r3, [pc, #400]	; (80017f0 <HAL_RCC_OscConfig+0x498>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001664:	f7ff faa2 	bl	8000bac <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800166c:	f7ff fa9e 	bl	8000bac <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e1d0      	b.n	8001a20 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800167e:	4b5a      	ldr	r3, [pc, #360]	; (80017e8 <HAL_RCC_OscConfig+0x490>)
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 80bf 	beq.w	8001816 <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001698:	2300      	movs	r3, #0
 800169a:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00c      	beq.n	80016be <HAL_RCC_OscConfig+0x366>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d008      	beq.n	80016be <HAL_RCC_OscConfig+0x366>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2b05      	cmp	r3, #5
 80016b2:	d004      	beq.n	80016be <HAL_RCC_OscConfig+0x366>
 80016b4:	f240 210f 	movw	r1, #527	; 0x20f
 80016b8:	484c      	ldr	r0, [pc, #304]	; (80017ec <HAL_RCC_OscConfig+0x494>)
 80016ba:	f7fe fe45 	bl	8000348 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016be:	4b4a      	ldr	r3, [pc, #296]	; (80017e8 <HAL_RCC_OscConfig+0x490>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10d      	bne.n	80016e6 <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	4b47      	ldr	r3, [pc, #284]	; (80017e8 <HAL_RCC_OscConfig+0x490>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	4a46      	ldr	r2, [pc, #280]	; (80017e8 <HAL_RCC_OscConfig+0x490>)
 80016d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d4:	61d3      	str	r3, [r2, #28]
 80016d6:	4b44      	ldr	r3, [pc, #272]	; (80017e8 <HAL_RCC_OscConfig+0x490>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016e2:	2301      	movs	r3, #1
 80016e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e6:	4b43      	ldr	r3, [pc, #268]	; (80017f4 <HAL_RCC_OscConfig+0x49c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d118      	bne.n	8001724 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016f2:	4b40      	ldr	r3, [pc, #256]	; (80017f4 <HAL_RCC_OscConfig+0x49c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a3f      	ldr	r2, [pc, #252]	; (80017f4 <HAL_RCC_OscConfig+0x49c>)
 80016f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016fe:	f7ff fa55 	bl	8000bac <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001706:	f7ff fa51 	bl	8000bac <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b64      	cmp	r3, #100	; 0x64
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e183      	b.n	8001a20 <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001718:	4b36      	ldr	r3, [pc, #216]	; (80017f4 <HAL_RCC_OscConfig+0x49c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f0      	beq.n	8001706 <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d106      	bne.n	800173a <HAL_RCC_OscConfig+0x3e2>
 800172c:	4b2e      	ldr	r3, [pc, #184]	; (80017e8 <HAL_RCC_OscConfig+0x490>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	4a2d      	ldr	r2, [pc, #180]	; (80017e8 <HAL_RCC_OscConfig+0x490>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6213      	str	r3, [r2, #32]
 8001738:	e02d      	b.n	8001796 <HAL_RCC_OscConfig+0x43e>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0x404>
 8001742:	4b29      	ldr	r3, [pc, #164]	; (80017e8 <HAL_RCC_OscConfig+0x490>)
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	4a28      	ldr	r2, [pc, #160]	; (80017e8 <HAL_RCC_OscConfig+0x490>)
 8001748:	f023 0301 	bic.w	r3, r3, #1
 800174c:	6213      	str	r3, [r2, #32]
 800174e:	4b26      	ldr	r3, [pc, #152]	; (80017e8 <HAL_RCC_OscConfig+0x490>)
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	4a25      	ldr	r2, [pc, #148]	; (80017e8 <HAL_RCC_OscConfig+0x490>)
 8001754:	f023 0304 	bic.w	r3, r3, #4
 8001758:	6213      	str	r3, [r2, #32]
 800175a:	e01c      	b.n	8001796 <HAL_RCC_OscConfig+0x43e>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	2b05      	cmp	r3, #5
 8001762:	d10c      	bne.n	800177e <HAL_RCC_OscConfig+0x426>
 8001764:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <HAL_RCC_OscConfig+0x490>)
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	4a1f      	ldr	r2, [pc, #124]	; (80017e8 <HAL_RCC_OscConfig+0x490>)
 800176a:	f043 0304 	orr.w	r3, r3, #4
 800176e:	6213      	str	r3, [r2, #32]
 8001770:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <HAL_RCC_OscConfig+0x490>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	4a1c      	ldr	r2, [pc, #112]	; (80017e8 <HAL_RCC_OscConfig+0x490>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6213      	str	r3, [r2, #32]
 800177c:	e00b      	b.n	8001796 <HAL_RCC_OscConfig+0x43e>
 800177e:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <HAL_RCC_OscConfig+0x490>)
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	4a19      	ldr	r2, [pc, #100]	; (80017e8 <HAL_RCC_OscConfig+0x490>)
 8001784:	f023 0301 	bic.w	r3, r3, #1
 8001788:	6213      	str	r3, [r2, #32]
 800178a:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <HAL_RCC_OscConfig+0x490>)
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	4a16      	ldr	r2, [pc, #88]	; (80017e8 <HAL_RCC_OscConfig+0x490>)
 8001790:	f023 0304 	bic.w	r3, r3, #4
 8001794:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d015      	beq.n	80017ca <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179e:	f7ff fa05 	bl	8000bac <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a4:	e00a      	b.n	80017bc <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a6:	f7ff fa01 	bl	8000bac <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e131      	b.n	8001a20 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017bc:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <HAL_RCC_OscConfig+0x490>)
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0ee      	beq.n	80017a6 <HAL_RCC_OscConfig+0x44e>
 80017c8:	e01c      	b.n	8001804 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ca:	f7ff f9ef 	bl	8000bac <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d0:	e012      	b.n	80017f8 <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d2:	f7ff f9eb 	bl	8000bac <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d909      	bls.n	80017f8 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e11b      	b.n	8001a20 <HAL_RCC_OscConfig+0x6c8>
 80017e8:	40021000 	.word	0x40021000
 80017ec:	080029d0 	.word	0x080029d0
 80017f0:	42420480 	.word	0x42420480
 80017f4:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f8:	4b8b      	ldr	r3, [pc, #556]	; (8001a28 <HAL_RCC_OscConfig+0x6d0>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1e6      	bne.n	80017d2 <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001804:	7dfb      	ldrb	r3, [r7, #23]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d105      	bne.n	8001816 <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800180a:	4b87      	ldr	r3, [pc, #540]	; (8001a28 <HAL_RCC_OscConfig+0x6d0>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	4a86      	ldr	r2, [pc, #536]	; (8001a28 <HAL_RCC_OscConfig+0x6d0>)
 8001810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001814:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00c      	beq.n	8001838 <HAL_RCC_OscConfig+0x4e0>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d008      	beq.n	8001838 <HAL_RCC_OscConfig+0x4e0>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d004      	beq.n	8001838 <HAL_RCC_OscConfig+0x4e0>
 800182e:	f240 21ad 	movw	r1, #685	; 0x2ad
 8001832:	487e      	ldr	r0, [pc, #504]	; (8001a2c <HAL_RCC_OscConfig+0x6d4>)
 8001834:	f7fe fd88 	bl	8000348 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 80ee 	beq.w	8001a1e <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001842:	4b79      	ldr	r3, [pc, #484]	; (8001a28 <HAL_RCC_OscConfig+0x6d0>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	2b08      	cmp	r3, #8
 800184c:	f000 80ce 	beq.w	80019ec <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	2b02      	cmp	r3, #2
 8001856:	f040 80b2 	bne.w	80019be <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d009      	beq.n	8001876 <HAL_RCC_OscConfig+0x51e>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800186a:	d004      	beq.n	8001876 <HAL_RCC_OscConfig+0x51e>
 800186c:	f240 21b6 	movw	r1, #694	; 0x2b6
 8001870:	486e      	ldr	r0, [pc, #440]	; (8001a2c <HAL_RCC_OscConfig+0x6d4>)
 8001872:	f7fe fd69 	bl	8000348 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187a:	2b00      	cmp	r3, #0
 800187c:	d04a      	beq.n	8001914 <HAL_RCC_OscConfig+0x5bc>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001886:	d045      	beq.n	8001914 <HAL_RCC_OscConfig+0x5bc>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001890:	d040      	beq.n	8001914 <HAL_RCC_OscConfig+0x5bc>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800189a:	d03b      	beq.n	8001914 <HAL_RCC_OscConfig+0x5bc>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018a4:	d036      	beq.n	8001914 <HAL_RCC_OscConfig+0x5bc>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80018ae:	d031      	beq.n	8001914 <HAL_RCC_OscConfig+0x5bc>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80018b8:	d02c      	beq.n	8001914 <HAL_RCC_OscConfig+0x5bc>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80018c2:	d027      	beq.n	8001914 <HAL_RCC_OscConfig+0x5bc>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018cc:	d022      	beq.n	8001914 <HAL_RCC_OscConfig+0x5bc>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80018d6:	d01d      	beq.n	8001914 <HAL_RCC_OscConfig+0x5bc>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018dc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80018e0:	d018      	beq.n	8001914 <HAL_RCC_OscConfig+0x5bc>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80018ea:	d013      	beq.n	8001914 <HAL_RCC_OscConfig+0x5bc>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80018f4:	d00e      	beq.n	8001914 <HAL_RCC_OscConfig+0x5bc>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 80018fe:	d009      	beq.n	8001914 <HAL_RCC_OscConfig+0x5bc>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001908:	d004      	beq.n	8001914 <HAL_RCC_OscConfig+0x5bc>
 800190a:	f240 21b7 	movw	r1, #695	; 0x2b7
 800190e:	4847      	ldr	r0, [pc, #284]	; (8001a2c <HAL_RCC_OscConfig+0x6d4>)
 8001910:	f7fe fd1a 	bl	8000348 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001914:	4b46      	ldr	r3, [pc, #280]	; (8001a30 <HAL_RCC_OscConfig+0x6d8>)
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191a:	f7ff f947 	bl	8000bac <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001922:	f7ff f943 	bl	8000bac <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e075      	b.n	8001a20 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001934:	4b3c      	ldr	r3, [pc, #240]	; (8001a28 <HAL_RCC_OscConfig+0x6d0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1f0      	bne.n	8001922 <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001948:	d116      	bne.n	8001978 <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d009      	beq.n	8001966 <HAL_RCC_OscConfig+0x60e>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800195a:	d004      	beq.n	8001966 <HAL_RCC_OscConfig+0x60e>
 800195c:	f240 21cd 	movw	r1, #717	; 0x2cd
 8001960:	4832      	ldr	r0, [pc, #200]	; (8001a2c <HAL_RCC_OscConfig+0x6d4>)
 8001962:	f7fe fcf1 	bl	8000348 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001966:	4b30      	ldr	r3, [pc, #192]	; (8001a28 <HAL_RCC_OscConfig+0x6d0>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	492d      	ldr	r1, [pc, #180]	; (8001a28 <HAL_RCC_OscConfig+0x6d0>)
 8001974:	4313      	orrs	r3, r2
 8001976:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001978:	4b2b      	ldr	r3, [pc, #172]	; (8001a28 <HAL_RCC_OscConfig+0x6d0>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a19      	ldr	r1, [r3, #32]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	430b      	orrs	r3, r1
 800198a:	4927      	ldr	r1, [pc, #156]	; (8001a28 <HAL_RCC_OscConfig+0x6d0>)
 800198c:	4313      	orrs	r3, r2
 800198e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001990:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <HAL_RCC_OscConfig+0x6d8>)
 8001992:	2201      	movs	r2, #1
 8001994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7ff f909 	bl	8000bac <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199e:	f7ff f905 	bl	8000bac <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e037      	b.n	8001a20 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019b0:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <HAL_RCC_OscConfig+0x6d0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x646>
 80019bc:	e02f      	b.n	8001a1e <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019be:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <HAL_RCC_OscConfig+0x6d8>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c4:	f7ff f8f2 	bl	8000bac <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019cc:	f7ff f8ee 	bl	8000bac <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e020      	b.n	8001a20 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019de:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_RCC_OscConfig+0x6d0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x674>
 80019ea:	e018      	b.n	8001a1e <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d101      	bne.n	80019f8 <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e013      	b.n	8001a20 <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_RCC_OscConfig+0x6d0>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d106      	bne.n	8001a1a <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d001      	beq.n	8001a1e <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	080029d0 	.word	0x080029d0
 8001a30:	42420060 	.word	0x42420060

08001a34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e176      	b.n	8001d36 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d116      	bne.n	8001a82 <HAL_RCC_ClockConfig+0x4e>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d110      	bne.n	8001a82 <HAL_RCC_ClockConfig+0x4e>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10a      	bne.n	8001a82 <HAL_RCC_ClockConfig+0x4e>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d104      	bne.n	8001a82 <HAL_RCC_ClockConfig+0x4e>
 8001a78:	f240 3136 	movw	r1, #822	; 0x336
 8001a7c:	4874      	ldr	r0, [pc, #464]	; (8001c50 <HAL_RCC_ClockConfig+0x21c>)
 8001a7e:	f7fe fc63 	bl	8000348 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00a      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x6a>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d007      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x6a>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d004      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x6a>
 8001a94:	f240 3137 	movw	r1, #823	; 0x337
 8001a98:	486d      	ldr	r0, [pc, #436]	; (8001c50 <HAL_RCC_ClockConfig+0x21c>)
 8001a9a:	f7fe fc55 	bl	8000348 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a9e:	4b6d      	ldr	r3, [pc, #436]	; (8001c54 <HAL_RCC_ClockConfig+0x220>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d910      	bls.n	8001ace <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aac:	4b69      	ldr	r3, [pc, #420]	; (8001c54 <HAL_RCC_ClockConfig+0x220>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f023 0207 	bic.w	r2, r3, #7
 8001ab4:	4967      	ldr	r1, [pc, #412]	; (8001c54 <HAL_RCC_ClockConfig+0x220>)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001abc:	4b65      	ldr	r3, [pc, #404]	; (8001c54 <HAL_RCC_ClockConfig+0x220>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d001      	beq.n	8001ace <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e133      	b.n	8001d36 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d049      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d005      	beq.n	8001af2 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ae6:	4b5c      	ldr	r3, [pc, #368]	; (8001c58 <HAL_RCC_ClockConfig+0x224>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	4a5b      	ldr	r2, [pc, #364]	; (8001c58 <HAL_RCC_ClockConfig+0x224>)
 8001aec:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001af0:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0308 	and.w	r3, r3, #8
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d005      	beq.n	8001b0a <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001afe:	4b56      	ldr	r3, [pc, #344]	; (8001c58 <HAL_RCC_ClockConfig+0x224>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4a55      	ldr	r2, [pc, #340]	; (8001c58 <HAL_RCC_ClockConfig+0x224>)
 8001b04:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b08:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d024      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x128>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b80      	cmp	r3, #128	; 0x80
 8001b18:	d020      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x128>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b90      	cmp	r3, #144	; 0x90
 8001b20:	d01c      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x128>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2ba0      	cmp	r3, #160	; 0xa0
 8001b28:	d018      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x128>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2bb0      	cmp	r3, #176	; 0xb0
 8001b30:	d014      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x128>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2bc0      	cmp	r3, #192	; 0xc0
 8001b38:	d010      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x128>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2bd0      	cmp	r3, #208	; 0xd0
 8001b40:	d00c      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x128>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2be0      	cmp	r3, #224	; 0xe0
 8001b48:	d008      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x128>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2bf0      	cmp	r3, #240	; 0xf0
 8001b50:	d004      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x128>
 8001b52:	f240 315d 	movw	r1, #861	; 0x35d
 8001b56:	483e      	ldr	r0, [pc, #248]	; (8001c50 <HAL_RCC_ClockConfig+0x21c>)
 8001b58:	f7fe fbf6 	bl	8000348 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b5c:	4b3e      	ldr	r3, [pc, #248]	; (8001c58 <HAL_RCC_ClockConfig+0x224>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	493b      	ldr	r1, [pc, #236]	; (8001c58 <HAL_RCC_ClockConfig+0x224>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d051      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00c      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x168>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d008      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x168>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d004      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x168>
 8001b92:	f44f 7159 	mov.w	r1, #868	; 0x364
 8001b96:	482e      	ldr	r0, [pc, #184]	; (8001c50 <HAL_RCC_ClockConfig+0x21c>)
 8001b98:	f7fe fbd6 	bl	8000348 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d107      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba4:	4b2c      	ldr	r3, [pc, #176]	; (8001c58 <HAL_RCC_ClockConfig+0x224>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d115      	bne.n	8001bdc <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0c0      	b.n	8001d36 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d107      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bbc:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <HAL_RCC_ClockConfig+0x224>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d109      	bne.n	8001bdc <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0b4      	b.n	8001d36 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bcc:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <HAL_RCC_ClockConfig+0x224>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0ac      	b.n	8001d36 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bdc:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <HAL_RCC_ClockConfig+0x224>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f023 0203 	bic.w	r2, r3, #3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	491b      	ldr	r1, [pc, #108]	; (8001c58 <HAL_RCC_ClockConfig+0x224>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bee:	f7fe ffdd 	bl	8000bac <HAL_GetTick>
 8001bf2:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf4:	e00a      	b.n	8001c0c <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf6:	f7fe ffd9 	bl	8000bac <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e094      	b.n	8001d36 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_RCC_ClockConfig+0x224>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 020c 	and.w	r2, r3, #12
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d1eb      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c1e:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <HAL_RCC_ClockConfig+0x220>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d217      	bcs.n	8001c5c <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_RCC_ClockConfig+0x220>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f023 0207 	bic.w	r2, r3, #7
 8001c34:	4907      	ldr	r1, [pc, #28]	; (8001c54 <HAL_RCC_ClockConfig+0x220>)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_RCC_ClockConfig+0x220>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d008      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e073      	b.n	8001d36 <HAL_RCC_ClockConfig+0x302>
 8001c4e:	bf00      	nop
 8001c50:	080029d0 	.word	0x080029d0
 8001c54:	40022000 	.word	0x40022000
 8001c58:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d025      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d018      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x26e>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c78:	d013      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x26e>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001c82:	d00e      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x26e>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001c8c:	d009      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x26e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001c96:	d004      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x26e>
 8001c98:	f240 31a2 	movw	r1, #930	; 0x3a2
 8001c9c:	4828      	ldr	r0, [pc, #160]	; (8001d40 <HAL_RCC_ClockConfig+0x30c>)
 8001c9e:	f7fe fb53 	bl	8000348 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca2:	4b28      	ldr	r3, [pc, #160]	; (8001d44 <HAL_RCC_ClockConfig+0x310>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	4925      	ldr	r1, [pc, #148]	; (8001d44 <HAL_RCC_ClockConfig+0x310>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d026      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d018      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x2c6>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd0:	d013      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x2c6>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001cda:	d00e      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x2c6>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001ce4:	d009      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x2c6>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001cee:	d004      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x2c6>
 8001cf0:	f240 31a9 	movw	r1, #937	; 0x3a9
 8001cf4:	4812      	ldr	r0, [pc, #72]	; (8001d40 <HAL_RCC_ClockConfig+0x30c>)
 8001cf6:	f7fe fb27 	bl	8000348 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cfa:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <HAL_RCC_ClockConfig+0x310>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	490e      	ldr	r1, [pc, #56]	; (8001d44 <HAL_RCC_ClockConfig+0x310>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d0e:	f000 f821 	bl	8001d54 <HAL_RCC_GetSysClockFreq>
 8001d12:	4602      	mov	r2, r0
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <HAL_RCC_ClockConfig+0x310>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	490a      	ldr	r1, [pc, #40]	; (8001d48 <HAL_RCC_ClockConfig+0x314>)
 8001d20:	5ccb      	ldrb	r3, [r1, r3]
 8001d22:	fa22 f303 	lsr.w	r3, r2, r3
 8001d26:	4a09      	ldr	r2, [pc, #36]	; (8001d4c <HAL_RCC_ClockConfig+0x318>)
 8001d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <HAL_RCC_ClockConfig+0x31c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fefa 	bl	8000b28 <HAL_InitTick>

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	080029d0 	.word	0x080029d0
 8001d44:	40021000 	.word	0x40021000
 8001d48:	08002b18 	.word	0x08002b18
 8001d4c:	20000000 	.word	0x20000000
 8001d50:	20000004 	.word	0x20000004

08001d54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b087      	sub	sp, #28
 8001d58:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d002      	beq.n	8001d84 <HAL_RCC_GetSysClockFreq+0x30>
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d003      	beq.n	8001d8a <HAL_RCC_GetSysClockFreq+0x36>
 8001d82:	e027      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d84:	4b19      	ldr	r3, [pc, #100]	; (8001dec <HAL_RCC_GetSysClockFreq+0x98>)
 8001d86:	613b      	str	r3, [r7, #16]
      break;
 8001d88:	e027      	b.n	8001dda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	0c9b      	lsrs	r3, r3, #18
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	4a17      	ldr	r2, [pc, #92]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d94:	5cd3      	ldrb	r3, [r2, r3]
 8001d96:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d010      	beq.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001da2:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	0c5b      	lsrs	r3, r3, #17
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	4a11      	ldr	r2, [pc, #68]	; (8001df4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dae:	5cd3      	ldrb	r3, [r2, r3]
 8001db0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a0d      	ldr	r2, [pc, #52]	; (8001dec <HAL_RCC_GetSysClockFreq+0x98>)
 8001db6:	fb03 f202 	mul.w	r2, r3, r2
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	e004      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a0c      	ldr	r2, [pc, #48]	; (8001df8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001dc8:	fb02 f303 	mul.w	r3, r2, r3
 8001dcc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	613b      	str	r3, [r7, #16]
      break;
 8001dd2:	e002      	b.n	8001dda <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <HAL_RCC_GetSysClockFreq+0x98>)
 8001dd6:	613b      	str	r3, [r7, #16]
      break;
 8001dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dda:	693b      	ldr	r3, [r7, #16]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	371c      	adds	r7, #28
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40021000 	.word	0x40021000
 8001dec:	007a1200 	.word	0x007a1200
 8001df0:	08002b30 	.word	0x08002b30
 8001df4:	08002b40 	.word	0x08002b40
 8001df8:	003d0900 	.word	0x003d0900

08001dfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e00:	4b02      	ldr	r3, [pc, #8]	; (8001e0c <HAL_RCC_GetHCLKFreq+0x10>)
 8001e02:	681b      	ldr	r3, [r3, #0]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr
 8001e0c:	20000000 	.word	0x20000000

08001e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e14:	f7ff fff2 	bl	8001dfc <HAL_RCC_GetHCLKFreq>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	0a1b      	lsrs	r3, r3, #8
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	4903      	ldr	r1, [pc, #12]	; (8001e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e26:	5ccb      	ldrb	r3, [r1, r3]
 8001e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40021000 	.word	0x40021000
 8001e34:	08002b28 	.word	0x08002b28

08001e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e3c:	f7ff ffde 	bl	8001dfc <HAL_RCC_GetHCLKFreq>
 8001e40:	4602      	mov	r2, r0
 8001e42:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	0adb      	lsrs	r3, r3, #11
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	4903      	ldr	r1, [pc, #12]	; (8001e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e4e:	5ccb      	ldrb	r3, [r1, r3]
 8001e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	08002b28 	.word	0x08002b28

08001e60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e68:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <RCC_Delay+0x34>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <RCC_Delay+0x38>)
 8001e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e72:	0a5b      	lsrs	r3, r3, #9
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	fb02 f303 	mul.w	r3, r2, r3
 8001e7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e7c:	bf00      	nop
  }
  while (Delay --);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1e5a      	subs	r2, r3, #1
 8001e82:	60fa      	str	r2, [r7, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1f9      	bne.n	8001e7c <RCC_Delay+0x1c>
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr
 8001e94:	20000000 	.word	0x20000000
 8001e98:	10624dd3 	.word	0x10624dd3

08001e9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e16d      	b.n	800218a <HAL_SPI_Init+0x2ee>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a6b      	ldr	r2, [pc, #428]	; (8002060 <HAL_SPI_Init+0x1c4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d009      	beq.n	8001ecc <HAL_SPI_Init+0x30>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a69      	ldr	r2, [pc, #420]	; (8002064 <HAL_SPI_Init+0x1c8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d004      	beq.n	8001ecc <HAL_SPI_Init+0x30>
 8001ec2:	f44f 71ab 	mov.w	r1, #342	; 0x156
 8001ec6:	4868      	ldr	r0, [pc, #416]	; (8002068 <HAL_SPI_Init+0x1cc>)
 8001ec8:	f7fe fa3e 	bl	8000348 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d009      	beq.n	8001ee8 <HAL_SPI_Init+0x4c>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001edc:	d004      	beq.n	8001ee8 <HAL_SPI_Init+0x4c>
 8001ede:	f240 1157 	movw	r1, #343	; 0x157
 8001ee2:	4861      	ldr	r0, [pc, #388]	; (8002068 <HAL_SPI_Init+0x1cc>)
 8001ee4:	f7fe fa30 	bl	8000348 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00e      	beq.n	8001f0e <HAL_SPI_Init+0x72>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef8:	d009      	beq.n	8001f0e <HAL_SPI_Init+0x72>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f02:	d004      	beq.n	8001f0e <HAL_SPI_Init+0x72>
 8001f04:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8001f08:	4857      	ldr	r0, [pc, #348]	; (8002068 <HAL_SPI_Init+0x1cc>)
 8001f0a:	f7fe fa1d 	bl	8000348 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f16:	d008      	beq.n	8001f2a <HAL_SPI_Init+0x8e>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d004      	beq.n	8001f2a <HAL_SPI_Init+0x8e>
 8001f20:	f240 1159 	movw	r1, #345	; 0x159
 8001f24:	4850      	ldr	r0, [pc, #320]	; (8002068 <HAL_SPI_Init+0x1cc>)
 8001f26:	f7fe fa0f 	bl	8000348 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f32:	d00d      	beq.n	8001f50 <HAL_SPI_Init+0xb4>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d009      	beq.n	8001f50 <HAL_SPI_Init+0xb4>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f44:	d004      	beq.n	8001f50 <HAL_SPI_Init+0xb4>
 8001f46:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8001f4a:	4847      	ldr	r0, [pc, #284]	; (8002068 <HAL_SPI_Init+0x1cc>)
 8001f4c:	f7fe f9fc 	bl	8000348 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d020      	beq.n	8001f9a <HAL_SPI_Init+0xfe>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d01c      	beq.n	8001f9a <HAL_SPI_Init+0xfe>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69db      	ldr	r3, [r3, #28]
 8001f64:	2b10      	cmp	r3, #16
 8001f66:	d018      	beq.n	8001f9a <HAL_SPI_Init+0xfe>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	2b18      	cmp	r3, #24
 8001f6e:	d014      	beq.n	8001f9a <HAL_SPI_Init+0xfe>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	2b20      	cmp	r3, #32
 8001f76:	d010      	beq.n	8001f9a <HAL_SPI_Init+0xfe>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	2b28      	cmp	r3, #40	; 0x28
 8001f7e:	d00c      	beq.n	8001f9a <HAL_SPI_Init+0xfe>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	2b30      	cmp	r3, #48	; 0x30
 8001f86:	d008      	beq.n	8001f9a <HAL_SPI_Init+0xfe>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	2b38      	cmp	r3, #56	; 0x38
 8001f8e:	d004      	beq.n	8001f9a <HAL_SPI_Init+0xfe>
 8001f90:	f240 115b 	movw	r1, #347	; 0x15b
 8001f94:	4834      	ldr	r0, [pc, #208]	; (8002068 <HAL_SPI_Init+0x1cc>)
 8001f96:	f7fe f9d7 	bl	8000348 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d008      	beq.n	8001fb4 <HAL_SPI_Init+0x118>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	2b80      	cmp	r3, #128	; 0x80
 8001fa8:	d004      	beq.n	8001fb4 <HAL_SPI_Init+0x118>
 8001faa:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8001fae:	482e      	ldr	r0, [pc, #184]	; (8002068 <HAL_SPI_Init+0x1cc>)
 8001fb0:	f7fe f9ca 	bl	8000348 <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d004      	beq.n	8001fc6 <HAL_SPI_Init+0x12a>
 8001fbc:	f240 115f 	movw	r1, #351	; 0x15f
 8001fc0:	4829      	ldr	r0, [pc, #164]	; (8002068 <HAL_SPI_Init+0x1cc>)
 8001fc2:	f7fe f9c1 	bl	8000348 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d14e      	bne.n	800206c <HAL_SPI_Init+0x1d0>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d008      	beq.n	8001fe8 <HAL_SPI_Init+0x14c>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d004      	beq.n	8001fe8 <HAL_SPI_Init+0x14c>
 8001fde:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8001fe2:	4821      	ldr	r0, [pc, #132]	; (8002068 <HAL_SPI_Init+0x1cc>)
 8001fe4:	f7fe f9b0 	bl	8000348 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d008      	beq.n	8002002 <HAL_SPI_Init+0x166>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d004      	beq.n	8002002 <HAL_SPI_Init+0x166>
 8001ff8:	f240 1163 	movw	r1, #355	; 0x163
 8001ffc:	481a      	ldr	r0, [pc, #104]	; (8002068 <HAL_SPI_Init+0x1cc>)
 8001ffe:	f7fe f9a3 	bl	8000348 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800200a:	d125      	bne.n	8002058 <HAL_SPI_Init+0x1bc>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d056      	beq.n	80020c2 <HAL_SPI_Init+0x226>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	2b08      	cmp	r3, #8
 800201a:	d052      	beq.n	80020c2 <HAL_SPI_Init+0x226>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	2b10      	cmp	r3, #16
 8002022:	d04e      	beq.n	80020c2 <HAL_SPI_Init+0x226>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	2b18      	cmp	r3, #24
 800202a:	d04a      	beq.n	80020c2 <HAL_SPI_Init+0x226>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	2b20      	cmp	r3, #32
 8002032:	d046      	beq.n	80020c2 <HAL_SPI_Init+0x226>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	2b28      	cmp	r3, #40	; 0x28
 800203a:	d042      	beq.n	80020c2 <HAL_SPI_Init+0x226>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	2b30      	cmp	r3, #48	; 0x30
 8002042:	d03e      	beq.n	80020c2 <HAL_SPI_Init+0x226>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	2b38      	cmp	r3, #56	; 0x38
 800204a:	d03a      	beq.n	80020c2 <HAL_SPI_Init+0x226>
 800204c:	f240 1167 	movw	r1, #359	; 0x167
 8002050:	4805      	ldr	r0, [pc, #20]	; (8002068 <HAL_SPI_Init+0x1cc>)
 8002052:	f7fe f979 	bl	8000348 <assert_failed>
 8002056:	e034      	b.n	80020c2 <HAL_SPI_Init+0x226>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	61da      	str	r2, [r3, #28]
 800205e:	e030      	b.n	80020c2 <HAL_SPI_Init+0x226>
 8002060:	40013000 	.word	0x40013000
 8002064:	40003800 	.word	0x40003800
 8002068:	08002a3c 	.word	0x08002a3c
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d020      	beq.n	80020b6 <HAL_SPI_Init+0x21a>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	2b08      	cmp	r3, #8
 800207a:	d01c      	beq.n	80020b6 <HAL_SPI_Init+0x21a>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	2b10      	cmp	r3, #16
 8002082:	d018      	beq.n	80020b6 <HAL_SPI_Init+0x21a>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	2b18      	cmp	r3, #24
 800208a:	d014      	beq.n	80020b6 <HAL_SPI_Init+0x21a>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	2b20      	cmp	r3, #32
 8002092:	d010      	beq.n	80020b6 <HAL_SPI_Init+0x21a>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	2b28      	cmp	r3, #40	; 0x28
 800209a:	d00c      	beq.n	80020b6 <HAL_SPI_Init+0x21a>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	2b30      	cmp	r3, #48	; 0x30
 80020a2:	d008      	beq.n	80020b6 <HAL_SPI_Init+0x21a>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	2b38      	cmp	r3, #56	; 0x38
 80020aa:	d004      	beq.n	80020b6 <HAL_SPI_Init+0x21a>
 80020ac:	f240 1171 	movw	r1, #369	; 0x171
 80020b0:	4838      	ldr	r0, [pc, #224]	; (8002194 <HAL_SPI_Init+0x2f8>)
 80020b2:	f7fe f949 	bl	8000348 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d106      	bne.n	80020e2 <HAL_SPI_Init+0x246>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7fe f973 	bl	80003c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2202      	movs	r2, #2
 80020e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020f8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002114:	431a      	orrs	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	431a      	orrs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800213c:	431a      	orrs	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002146:	ea42 0103 	orr.w	r1, r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	0c1a      	lsrs	r2, r3, #16
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f002 0204 	and.w	r2, r2, #4
 8002168:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	69da      	ldr	r2, [r3, #28]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002178:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	08002a3c 	.word	0x08002a3c

08002198 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	4613      	mov	r3, r2
 80021a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	77fb      	strb	r3, [r7, #31]
  uint16_t initial_TxXferCount;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d009      	beq.n	80021c8 <HAL_SPI_Transmit+0x30>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021bc:	d004      	beq.n	80021c8 <HAL_SPI_Transmit+0x30>
 80021be:	f44f 7148 	mov.w	r1, #800	; 0x320
 80021c2:	4884      	ldr	r0, [pc, #528]	; (80023d4 <HAL_SPI_Transmit+0x23c>)
 80021c4:	f7fe f8c0 	bl	8000348 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d101      	bne.n	80021d6 <HAL_SPI_Transmit+0x3e>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e12f      	b.n	8002436 <HAL_SPI_Transmit+0x29e>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021de:	f7fe fce5 	bl	8000bac <HAL_GetTick>
 80021e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d002      	beq.n	80021fa <HAL_SPI_Transmit+0x62>
  {
    errorcode = HAL_BUSY;
 80021f4:	2302      	movs	r3, #2
 80021f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021f8:	e118      	b.n	800242c <HAL_SPI_Transmit+0x294>
  }

  if ((pData == NULL) || (Size == 0U))
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d002      	beq.n	8002206 <HAL_SPI_Transmit+0x6e>
 8002200:	88fb      	ldrh	r3, [r7, #6]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d102      	bne.n	800220c <HAL_SPI_Transmit+0x74>
  {
    errorcode = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	77fb      	strb	r3, [r7, #31]
    goto error;
 800220a:	e10f      	b.n	800242c <HAL_SPI_Transmit+0x294>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2203      	movs	r2, #3
 8002210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	88fa      	ldrh	r2, [r7, #6]
 8002224:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	88fa      	ldrh	r2, [r7, #6]
 800222a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002252:	d10f      	bne.n	8002274 <HAL_SPI_Transmit+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002262:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002272:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227e:	2b40      	cmp	r3, #64	; 0x40
 8002280:	d007      	beq.n	8002292 <HAL_SPI_Transmit+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002290:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800229a:	d14f      	bne.n	800233c <HAL_SPI_Transmit+0x1a4>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <HAL_SPI_Transmit+0x112>
 80022a4:	8afb      	ldrh	r3, [r7, #22]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d142      	bne.n	8002330 <HAL_SPI_Transmit+0x198>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	881a      	ldrh	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	1c9a      	adds	r2, r3, #2
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80022ce:	e02f      	b.n	8002330 <HAL_SPI_Transmit+0x198>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d112      	bne.n	8002304 <HAL_SPI_Transmit+0x16c>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	881a      	ldrh	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	1c9a      	adds	r2, r3, #2
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	86da      	strh	r2, [r3, #54]	; 0x36
 8002302:	e015      	b.n	8002330 <HAL_SPI_Transmit+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002304:	f7fe fc52 	bl	8000bac <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d803      	bhi.n	800231c <HAL_SPI_Transmit+0x184>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800231a:	d102      	bne.n	8002322 <HAL_SPI_Transmit+0x18a>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d106      	bne.n	8002330 <HAL_SPI_Transmit+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800232e:	e07d      	b.n	800242c <HAL_SPI_Transmit+0x294>
    while (hspi->TxXferCount > 0U)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002334:	b29b      	uxth	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1ca      	bne.n	80022d0 <HAL_SPI_Transmit+0x138>
 800233a:	e052      	b.n	80023e2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <HAL_SPI_Transmit+0x1b2>
 8002344:	8afb      	ldrh	r3, [r7, #22]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d146      	bne.n	80023d8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	330c      	adds	r3, #12
 8002354:	7812      	ldrb	r2, [r2, #0]
 8002356:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	1c5a      	adds	r2, r3, #1
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002366:	b29b      	uxth	r3, r3
 8002368:	3b01      	subs	r3, #1
 800236a:	b29a      	uxth	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002370:	e032      	b.n	80023d8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b02      	cmp	r3, #2
 800237e:	d113      	bne.n	80023a8 <HAL_SPI_Transmit+0x210>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	330c      	adds	r3, #12
 800238a:	7812      	ldrb	r2, [r2, #0]
 800238c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800239c:	b29b      	uxth	r3, r3
 800239e:	3b01      	subs	r3, #1
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80023a6:	e017      	b.n	80023d8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023a8:	f7fe fc00 	bl	8000bac <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d803      	bhi.n	80023c0 <HAL_SPI_Transmit+0x228>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023be:	d102      	bne.n	80023c6 <HAL_SPI_Transmit+0x22e>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d108      	bne.n	80023d8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80023d2:	e02b      	b.n	800242c <HAL_SPI_Transmit+0x294>
 80023d4:	08002a3c 	.word	0x08002a3c
    while (hspi->TxXferCount > 0U)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023dc:	b29b      	uxth	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1c7      	bne.n	8002372 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	6839      	ldr	r1, [r7, #0]
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 f8b2 	bl	8002550 <SPI_EndRxTxTransaction>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2220      	movs	r2, #32
 80023f6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10a      	bne.n	8002416 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002400:	2300      	movs	r3, #0
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	77fb      	strb	r3, [r7, #31]
 8002422:	e003      	b.n	800242c <HAL_SPI_Transmit+0x294>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002434:	7ffb      	ldrb	r3, [r7, #31]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3720      	adds	r7, #32
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop

08002440 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	603b      	str	r3, [r7, #0]
 800244c:	4613      	mov	r3, r2
 800244e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002450:	f7fe fbac 	bl	8000bac <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002458:	1a9b      	subs	r3, r3, r2
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	4413      	add	r3, r2
 800245e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002460:	f7fe fba4 	bl	8000bac <HAL_GetTick>
 8002464:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002466:	4b39      	ldr	r3, [pc, #228]	; (800254c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	015b      	lsls	r3, r3, #5
 800246c:	0d1b      	lsrs	r3, r3, #20
 800246e:	69fa      	ldr	r2, [r7, #28]
 8002470:	fb02 f303 	mul.w	r3, r2, r3
 8002474:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002476:	e054      	b.n	8002522 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800247e:	d050      	beq.n	8002522 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002480:	f7fe fb94 	bl	8000bac <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	429a      	cmp	r2, r3
 800248e:	d902      	bls.n	8002496 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d13d      	bne.n	8002512 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80024a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024ae:	d111      	bne.n	80024d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024b8:	d004      	beq.n	80024c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c2:	d107      	bne.n	80024d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024dc:	d10f      	bne.n	80024fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e017      	b.n	8002542 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	3b01      	subs	r3, #1
 8002520:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	4013      	ands	r3, r2
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	429a      	cmp	r2, r3
 8002530:	bf0c      	ite	eq
 8002532:	2301      	moveq	r3, #1
 8002534:	2300      	movne	r3, #0
 8002536:	b2db      	uxtb	r3, r3
 8002538:	461a      	mov	r2, r3
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	429a      	cmp	r2, r3
 800253e:	d19b      	bne.n	8002478 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3720      	adds	r7, #32
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000000 	.word	0x20000000

08002550 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af02      	add	r7, sp, #8
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2200      	movs	r2, #0
 8002564:	2180      	movs	r1, #128	; 0x80
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f7ff ff6a 	bl	8002440 <SPI_WaitFlagStateUntilTimeout>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d007      	beq.n	8002582 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002576:	f043 0220 	orr.w	r2, r3, #32
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e000      	b.n	8002584 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e095      	b.n	80026ca <HAL_UART_Init+0x13e>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d02c      	beq.n	8002600 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a4a      	ldr	r2, [pc, #296]	; (80026d4 <HAL_UART_Init+0x148>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d00e      	beq.n	80025ce <HAL_UART_Init+0x42>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a48      	ldr	r2, [pc, #288]	; (80026d8 <HAL_UART_Init+0x14c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d009      	beq.n	80025ce <HAL_UART_Init+0x42>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a47      	ldr	r2, [pc, #284]	; (80026dc <HAL_UART_Init+0x150>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d004      	beq.n	80025ce <HAL_UART_Init+0x42>
 80025c4:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 80025c8:	4845      	ldr	r0, [pc, #276]	; (80026e0 <HAL_UART_Init+0x154>)
 80025ca:	f7fd febd 	bl	8000348 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d028      	beq.n	8002628 <HAL_UART_Init+0x9c>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025de:	d023      	beq.n	8002628 <HAL_UART_Init+0x9c>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025e8:	d01e      	beq.n	8002628 <HAL_UART_Init+0x9c>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025f2:	d019      	beq.n	8002628 <HAL_UART_Init+0x9c>
 80025f4:	f240 116f 	movw	r1, #367	; 0x16f
 80025f8:	4839      	ldr	r0, [pc, #228]	; (80026e0 <HAL_UART_Init+0x154>)
 80025fa:	f7fd fea5 	bl	8000348 <assert_failed>
 80025fe:	e013      	b.n	8002628 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a33      	ldr	r2, [pc, #204]	; (80026d4 <HAL_UART_Init+0x148>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00e      	beq.n	8002628 <HAL_UART_Init+0x9c>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a32      	ldr	r2, [pc, #200]	; (80026d8 <HAL_UART_Init+0x14c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d009      	beq.n	8002628 <HAL_UART_Init+0x9c>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a30      	ldr	r2, [pc, #192]	; (80026dc <HAL_UART_Init+0x150>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d004      	beq.n	8002628 <HAL_UART_Init+0x9c>
 800261e:	f240 1173 	movw	r1, #371	; 0x173
 8002622:	482f      	ldr	r0, [pc, #188]	; (80026e0 <HAL_UART_Init+0x154>)
 8002624:	f7fd fe90 	bl	8000348 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d009      	beq.n	8002644 <HAL_UART_Init+0xb8>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002638:	d004      	beq.n	8002644 <HAL_UART_Init+0xb8>
 800263a:	f240 1175 	movw	r1, #373	; 0x175
 800263e:	4828      	ldr	r0, [pc, #160]	; (80026e0 <HAL_UART_Init+0x154>)
 8002640:	f7fd fe82 	bl	8000348 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d106      	bne.n	800265e <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7fe f9dd 	bl	8000a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2224      	movs	r2, #36	; 0x24
 8002662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002674:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f834 	bl	80026e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800268a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	695a      	ldr	r2, [r3, #20]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800269a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026aa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2220      	movs	r2, #32
 80026b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2220      	movs	r2, #32
 80026be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40013800 	.word	0x40013800
 80026d8:	40004400 	.word	0x40004400
 80026dc:	40004800 	.word	0x40004800
 80026e0:	08002aa8 	.word	0x08002aa8

080026e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	4a5f      	ldr	r2, [pc, #380]	; (8002870 <UART_SetConfig+0x18c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d904      	bls.n	8002700 <UART_SetConfig+0x1c>
 80026f6:	f640 6166 	movw	r1, #3686	; 0xe66
 80026fa:	485e      	ldr	r0, [pc, #376]	; (8002874 <UART_SetConfig+0x190>)
 80026fc:	f7fd fe24 	bl	8000348 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d009      	beq.n	800271c <UART_SetConfig+0x38>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002710:	d004      	beq.n	800271c <UART_SetConfig+0x38>
 8002712:	f640 6167 	movw	r1, #3687	; 0xe67
 8002716:	4857      	ldr	r0, [pc, #348]	; (8002874 <UART_SetConfig+0x190>)
 8002718:	f7fd fe16 	bl	8000348 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00e      	beq.n	8002742 <UART_SetConfig+0x5e>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800272c:	d009      	beq.n	8002742 <UART_SetConfig+0x5e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002736:	d004      	beq.n	8002742 <UART_SetConfig+0x5e>
 8002738:	f640 6168 	movw	r1, #3688	; 0xe68
 800273c:	484d      	ldr	r0, [pc, #308]	; (8002874 <UART_SetConfig+0x190>)
 800273e:	f7fd fe03 	bl	8000348 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695a      	ldr	r2, [r3, #20]
 8002746:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800274a:	4013      	ands	r3, r2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d103      	bne.n	8002758 <UART_SetConfig+0x74>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d104      	bne.n	8002762 <UART_SetConfig+0x7e>
 8002758:	f640 6169 	movw	r1, #3689	; 0xe69
 800275c:	4845      	ldr	r0, [pc, #276]	; (8002874 <UART_SetConfig+0x190>)
 800275e:	f7fd fdf3 	bl	8000348 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	431a      	orrs	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	4313      	orrs	r3, r2
 8002788:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002794:	f023 030c 	bic.w	r3, r3, #12
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	430b      	orrs	r3, r1
 80027a0:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	699a      	ldr	r2, [r3, #24]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a2e      	ldr	r2, [pc, #184]	; (8002878 <UART_SetConfig+0x194>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d103      	bne.n	80027ca <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027c2:	f7ff fb39 	bl	8001e38 <HAL_RCC_GetPCLK2Freq>
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	e002      	b.n	80027d0 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027ca:	f7ff fb21 	bl	8001e10 <HAL_RCC_GetPCLK1Freq>
 80027ce:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	009a      	lsls	r2, r3, #2
 80027da:	441a      	add	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e6:	4a25      	ldr	r2, [pc, #148]	; (800287c <UART_SetConfig+0x198>)
 80027e8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ec:	095b      	lsrs	r3, r3, #5
 80027ee:	0119      	lsls	r1, r3, #4
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	009a      	lsls	r2, r3, #2
 80027fa:	441a      	add	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	fbb2 f2f3 	udiv	r2, r2, r3
 8002806:	4b1d      	ldr	r3, [pc, #116]	; (800287c <UART_SetConfig+0x198>)
 8002808:	fba3 0302 	umull	r0, r3, r3, r2
 800280c:	095b      	lsrs	r3, r3, #5
 800280e:	2064      	movs	r0, #100	; 0x64
 8002810:	fb00 f303 	mul.w	r3, r0, r3
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	3332      	adds	r3, #50	; 0x32
 800281a:	4a18      	ldr	r2, [pc, #96]	; (800287c <UART_SetConfig+0x198>)
 800281c:	fba2 2303 	umull	r2, r3, r2, r3
 8002820:	095b      	lsrs	r3, r3, #5
 8002822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002826:	4419      	add	r1, r3
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	009a      	lsls	r2, r3, #2
 8002832:	441a      	add	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	fbb2 f2f3 	udiv	r2, r2, r3
 800283e:	4b0f      	ldr	r3, [pc, #60]	; (800287c <UART_SetConfig+0x198>)
 8002840:	fba3 0302 	umull	r0, r3, r3, r2
 8002844:	095b      	lsrs	r3, r3, #5
 8002846:	2064      	movs	r0, #100	; 0x64
 8002848:	fb00 f303 	mul.w	r3, r0, r3
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	3332      	adds	r3, #50	; 0x32
 8002852:	4a0a      	ldr	r2, [pc, #40]	; (800287c <UART_SetConfig+0x198>)
 8002854:	fba2 2303 	umull	r2, r3, r2, r3
 8002858:	095b      	lsrs	r3, r3, #5
 800285a:	f003 020f 	and.w	r2, r3, #15
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	440a      	add	r2, r1
 8002864:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002866:	bf00      	nop
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	0044aa20 	.word	0x0044aa20
 8002874:	08002aa8 	.word	0x08002aa8
 8002878:	40013800 	.word	0x40013800
 800287c:	51eb851f 	.word	0x51eb851f

08002880 <memset>:
 8002880:	4603      	mov	r3, r0
 8002882:	4402      	add	r2, r0
 8002884:	4293      	cmp	r3, r2
 8002886:	d100      	bne.n	800288a <memset+0xa>
 8002888:	4770      	bx	lr
 800288a:	f803 1b01 	strb.w	r1, [r3], #1
 800288e:	e7f9      	b.n	8002884 <memset+0x4>

08002890 <__libc_init_array>:
 8002890:	b570      	push	{r4, r5, r6, lr}
 8002892:	2600      	movs	r6, #0
 8002894:	4d0c      	ldr	r5, [pc, #48]	; (80028c8 <__libc_init_array+0x38>)
 8002896:	4c0d      	ldr	r4, [pc, #52]	; (80028cc <__libc_init_array+0x3c>)
 8002898:	1b64      	subs	r4, r4, r5
 800289a:	10a4      	asrs	r4, r4, #2
 800289c:	42a6      	cmp	r6, r4
 800289e:	d109      	bne.n	80028b4 <__libc_init_array+0x24>
 80028a0:	f000 f81a 	bl	80028d8 <_init>
 80028a4:	2600      	movs	r6, #0
 80028a6:	4d0a      	ldr	r5, [pc, #40]	; (80028d0 <__libc_init_array+0x40>)
 80028a8:	4c0a      	ldr	r4, [pc, #40]	; (80028d4 <__libc_init_array+0x44>)
 80028aa:	1b64      	subs	r4, r4, r5
 80028ac:	10a4      	asrs	r4, r4, #2
 80028ae:	42a6      	cmp	r6, r4
 80028b0:	d105      	bne.n	80028be <__libc_init_array+0x2e>
 80028b2:	bd70      	pop	{r4, r5, r6, pc}
 80028b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80028b8:	4798      	blx	r3
 80028ba:	3601      	adds	r6, #1
 80028bc:	e7ee      	b.n	800289c <__libc_init_array+0xc>
 80028be:	f855 3b04 	ldr.w	r3, [r5], #4
 80028c2:	4798      	blx	r3
 80028c4:	3601      	adds	r6, #1
 80028c6:	e7f2      	b.n	80028ae <__libc_init_array+0x1e>
 80028c8:	08002b44 	.word	0x08002b44
 80028cc:	08002b44 	.word	0x08002b44
 80028d0:	08002b44 	.word	0x08002b44
 80028d4:	08002b48 	.word	0x08002b48

080028d8 <_init>:
 80028d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028da:	bf00      	nop
 80028dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028de:	bc08      	pop	{r3}
 80028e0:	469e      	mov	lr, r3
 80028e2:	4770      	bx	lr

080028e4 <_fini>:
 80028e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028e6:	bf00      	nop
 80028e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ea:	bc08      	pop	{r3}
 80028ec:	469e      	mov	lr, r3
 80028ee:	4770      	bx	lr
